#define UNI_SINGLE_HEADER
#pragma once
#include <cstdint>
#include <array>
#include <algorithm>
namespace uni {

template<class ForwardIt, class T, class Compare>
constexpr ForwardIt upper_bound(ForwardIt first, ForwardIt last, const T& value, Compare comp) {
    ForwardIt it = first;
    typename std::iterator_traits<ForwardIt>::difference_type count = std::distance(first, last);
    typename std::iterator_traits<ForwardIt>::difference_type step = count / 2;

    while(count > 0) {
        it = first;
        step = count / 2;
        std::advance(it, step);
        if(!comp(value, *it)) {
            first = ++it;
            count -= step + 1;
        } else
            count = step;
    }
    return first;
}

template<class ForwardIt, class T, class Compare>
constexpr ForwardIt lower_bound(ForwardIt first, ForwardIt last, const T& value, Compare comp) {
    ForwardIt it = first;
    typename std::iterator_traits<ForwardIt>::difference_type count = std::distance(first, last);
    typename std::iterator_traits<ForwardIt>::difference_type step = count / 2;

    while(count > 0) {
        it = first;
        step = count / 2;
        std::advance(it, step);
        if(comp(*it, value)) {
            first = ++it;
            count -= step + 1;
        } else
            count = step;
    }
    return first;
}

template<std::size_t r1_s,
         std::size_t r2_s, int16_t r2_t_f, int16_t r2_t_b,
         std::size_t r3_s,
         std::size_t r4_s, int16_t r4_t_f, int16_t r4_t_b,
         std::size_t r5_s, int16_t r5_t_f, int16_t r5_t_b,
         std::size_t r6_s>
struct __bool_trie {

    // not tries, just bitmaps for all code points 0..0x7FF (UTF-8 1- and 2-byte sequences)
    std::array<std::uint64_t, 32> r1;

    // trie for code points 0x800..0xFFFF (UTF-8 3-byte sequences, aka rest of BMP)
    std::array<std::uint8_t, r2_s> r2;
    std::array<std::uint64_t, r3_s> r3;    // leaves can be shared, so size isn't fixed

    // trie for 0x10000..0x10FFFF (UTF-8 4-byte sequences, aka non-BMP code points)
    std::array<std::uint8_t, r4_s> r4;
    std::array<std::uint8_t, r5_s> r5;     // two level to exploit sparseness of non-BMP
    std::array<std::uint64_t, r6_s> r6;    // again, leaves are shared

    constexpr bool lookup(char32_t u) const {
        std::uint32_t c = u;
        if(c < 0x800) {
            if constexpr(r1_s == 0)
                return false;
            return trie_range_leaf(c, r1[c >> 6]);
        } else if(c < 0x10000) {
            if constexpr(r3_s == 0)
                return false;
            auto i = (c >> 6) - 0x20;
            if(i < r2_t_f || i > r2_s - r2_t_b)
                i = 0;
            auto child = r2[i + r2_t_f];

            return trie_range_leaf(c, r3.begin()[child]);
        } else {
            if constexpr(r6_s == 0)
                return false;
            auto i4 = (c >> 12) - 0x10;
            if(i4 < r4_t_f || i4 > r4_s - r4_t_b)
                i4 = 0;
            auto child = r4[i4];

            auto i5 = (child << 6) + ((c >> 6) & 0x3f);
             if(i5 < r5_t_f || i5 > r5_s - r5_t_b)
                i5 = 0;
            auto leaf = r5.begin()[i5];
            return trie_range_leaf(c, r6.begin()[leaf]);
        }
    }

    constexpr bool trie_range_leaf(std::uint32_t c, std::uint64_t chunk) const {
        return (chunk >> (c & 0b111111)) & 0b1;
    }
};

template<std::size_t size>
struct flat_array {
    std::array<char32_t, size> data;
    constexpr bool lookup(char32_t u) const {
        if constexpr(size < 20) {
            for(auto it = data.begin(); it != data.end(); ++it) {
                if(*it == u)
                    return true;
                if(it == data.end())
                    return false;
            }
        } else {
            return std::binary_search(data.begin(), data.end(), u);
        }
        return false;
    }
};


struct __range_array_elem {
    char32_t c : 24;
    bool b = 1;
};
template<std::size_t size>
struct __range_array {
    std::array<__range_array_elem, size> data;

    constexpr bool lookup(char32_t u) const {
        if((char32_t)u > 0x10FFFF)
            return false;
        auto it =
            uni::upper_bound(data.begin(), data.end(), u,
                             [](char32_t cp, const __range_array_elem& e) { return cp < e.c; });
        if(it == data.end())
            return false;
        it--;
        return it->b;
    }
};


constexpr char __propcharnorm(char a) {
    if(a >= 'A' && a <= 'Z')
        return a + 32;
    if(a == ' ' || a == '-')
        return '_';
    return a;
}
constexpr int __propcharcomp(char a, char b) {
    a = __propcharnorm(a);
    b = __propcharnorm(b);
    if(a == b)
        return 0;
    if(a < b)
        return -1;
    return 1;
}
constexpr int __pronamecomp(std::string_view sa, std::string_view sb) {
    auto a = sa.begin();
    auto b = sb.begin();

    for(; a != sb.end() && b != sb.end(); a++, b++) {
        auto res = __propcharcomp(*a, *b);
        if(res != 0)
            return res;
    }
    if(sa.size() < sb.size())
        return -1;
    else if(sb.size() < sa.size())
        return 1;
    return 0;
}

}    // namespace uni

namespace uni {


enum class script;
enum class block;
enum class category;
enum class property;
enum class version : uint8_t;

template<uni::script>
bool cp_is(char32_t) = delete;


template<uni::property>
bool cp_is(char32_t) = delete;


constexpr version cp_age(char32_t cp);
constexpr block cp_block(char32_t cp);

constexpr bool cp_is_valid(char32_t cp);
constexpr bool cp_is_assigned(char32_t cp);
constexpr bool cp_is_ascii(char32_t cp);

struct numeric_value {

    constexpr double value() const {
        return numerator() / double(_d);
    }

    constexpr long long numerator() const {
        return _n;
    }

    constexpr int denominator() const {
        return _d;
    }

    constexpr bool is_valid() const {
        return _d != 0;
    }

protected:
    constexpr numeric_value() = default;
    constexpr numeric_value(long long n, int16_t d) : _n(n), _d(d) {}

    long long _n = 0;
    int16_t _d = 0;
    friend constexpr numeric_value cp_numeric_value(char32_t cp);
};

constexpr numeric_value cp_numeric_value(char32_t cp);


}    // namespace uni

#ifndef UNI_SINGLE_HEADER
#    pragma once
#    include "base.h"
#endif
namespace uni {
struct __string_with_idx {
    const char* name;
    uint32_t value;
};
enum class version : uint8_t {
    unassigned,
    v1_1,
    v2_0,
    v2_1,
    v3_0,
    v3_1,
    v3_2,
    v4_0,
    v4_1,
    v5_0,
    v5_1,
    v5_2,
    v6_0,
    v6_1,
    v6_2,
    v6_3,
    v7_0,
    v8_0,
    v9_0,
    v10_0,
    v11_0,
    v12_0,
    standard_unicode_version = v12_0,
    minimum_version = v10_0,
    latest_version = v12_0
};
static constexpr std::array __age_strings = {
    "unassigned", "1.1", "2.0", "2.1", "3.0", "3.1", "3.2", "4.0", "4.1",  "5.0",  "5.1",
    "5.2",        "6.0", "6.1", "6.2", "6.3", "7.0", "8.0", "9.0", "10.0", "11.0", "12.0"};

struct __age_data_t {
    char32_t first;
    version a;
};
static constexpr std::array __age_data = {
    __age_data_t{0x0000, version::v1_1},        __age_data_t{0x01F6, version::v3_0},
    __age_data_t{0x01FA, version::v1_1},        __age_data_t{0x0218, version::v3_0},
    __age_data_t{0x0220, version::v3_2},        __age_data_t{0x0221, version::v4_0},
    __age_data_t{0x0222, version::v3_0},        __age_data_t{0x0234, version::v4_0},
    __age_data_t{0x0237, version::v4_1},        __age_data_t{0x0242, version::v5_0},
    __age_data_t{0x0250, version::v1_1},        __age_data_t{0x02A9, version::v3_0},
    __age_data_t{0x02AE, version::v4_0},        __age_data_t{0x02B0, version::v1_1},
    __age_data_t{0x02DF, version::v3_0},        __age_data_t{0x02E0, version::v1_1},
    __age_data_t{0x02EA, version::v3_0},        __age_data_t{0x02EF, version::v4_0},
    __age_data_t{0x0300, version::v1_1},        __age_data_t{0x0346, version::v3_0},
    __age_data_t{0x034F, version::v3_2},        __age_data_t{0x0350, version::v4_0},
    __age_data_t{0x0358, version::v4_1},        __age_data_t{0x035D, version::v4_0},
    __age_data_t{0x0360, version::v1_1},        __age_data_t{0x0362, version::v3_0},
    __age_data_t{0x0363, version::v3_2},        __age_data_t{0x0370, version::v5_1},
    __age_data_t{0x0374, version::v1_1},        __age_data_t{0x0376, version::v5_1},
    __age_data_t{0x0378, version::unassigned},  __age_data_t{0x037A, version::v1_1},
    __age_data_t{0x037B, version::v5_0},        __age_data_t{0x037E, version::v1_1},
    __age_data_t{0x037F, version::v7_0},        __age_data_t{0x0380, version::unassigned},
    __age_data_t{0x0384, version::v1_1},        __age_data_t{0x038B, version::unassigned},
    __age_data_t{0x038C, version::v1_1},        __age_data_t{0x038D, version::unassigned},
    __age_data_t{0x038E, version::v1_1},        __age_data_t{0x03A2, version::unassigned},
    __age_data_t{0x03A3, version::v1_1},        __age_data_t{0x03CF, version::v5_1},
    __age_data_t{0x03D0, version::v1_1},        __age_data_t{0x03D7, version::v3_0},
    __age_data_t{0x03D8, version::v3_2},        __age_data_t{0x03DA, version::v1_1},
    __age_data_t{0x03DB, version::v3_0},        __age_data_t{0x03DC, version::v1_1},
    __age_data_t{0x03DD, version::v3_0},        __age_data_t{0x03DE, version::v1_1},
    __age_data_t{0x03DF, version::v3_0},        __age_data_t{0x03E0, version::v1_1},
    __age_data_t{0x03E1, version::v3_0},        __age_data_t{0x03E2, version::v1_1},
    __age_data_t{0x03F4, version::v3_1},        __age_data_t{0x03F6, version::v3_2},
    __age_data_t{0x03F7, version::v4_0},        __age_data_t{0x03FC, version::v4_1},
    __age_data_t{0x0400, version::v3_0},        __age_data_t{0x0401, version::v1_1},
    __age_data_t{0x040D, version::v3_0},        __age_data_t{0x040E, version::v1_1},
    __age_data_t{0x0450, version::v3_0},        __age_data_t{0x0451, version::v1_1},
    __age_data_t{0x045D, version::v3_0},        __age_data_t{0x045E, version::v1_1},
    __age_data_t{0x0487, version::v5_1},        __age_data_t{0x0488, version::v3_0},
    __age_data_t{0x048A, version::v3_2},        __age_data_t{0x048C, version::v3_0},
    __age_data_t{0x0490, version::v1_1},        __age_data_t{0x04C5, version::v3_2},
    __age_data_t{0x04C7, version::v1_1},        __age_data_t{0x04C9, version::v3_2},
    __age_data_t{0x04CB, version::v1_1},        __age_data_t{0x04CD, version::v3_2},
    __age_data_t{0x04CF, version::v5_0},        __age_data_t{0x04D0, version::v1_1},
    __age_data_t{0x04EC, version::v3_0},        __age_data_t{0x04EE, version::v1_1},
    __age_data_t{0x04F6, version::v4_1},        __age_data_t{0x04F8, version::v1_1},
    __age_data_t{0x04FA, version::v5_0},        __age_data_t{0x0500, version::v3_2},
    __age_data_t{0x0510, version::v5_0},        __age_data_t{0x0514, version::v5_1},
    __age_data_t{0x0524, version::v5_2},        __age_data_t{0x0526, version::v6_0},
    __age_data_t{0x0528, version::v7_0},        __age_data_t{0x0530, version::unassigned},
    __age_data_t{0x0531, version::v1_1},        __age_data_t{0x0557, version::unassigned},
    __age_data_t{0x0559, version::v1_1},        __age_data_t{0x0560, version::v11_0},
    __age_data_t{0x0561, version::v1_1},        __age_data_t{0x0588, version::v11_0},
    __age_data_t{0x0589, version::v1_1},        __age_data_t{0x058A, version::v3_0},
    __age_data_t{0x058B, version::unassigned},  __age_data_t{0x058D, version::v7_0},
    __age_data_t{0x058F, version::v6_1},        __age_data_t{0x0590, version::unassigned},
    __age_data_t{0x0591, version::v2_0},        __age_data_t{0x05A2, version::v4_1},
    __age_data_t{0x05A3, version::v2_0},        __age_data_t{0x05B0, version::v1_1},
    __age_data_t{0x05BA, version::v5_0},        __age_data_t{0x05BB, version::v1_1},
    __age_data_t{0x05C4, version::v2_0},        __age_data_t{0x05C5, version::v4_1},
    __age_data_t{0x05C8, version::unassigned},  __age_data_t{0x05D0, version::v1_1},
    __age_data_t{0x05EB, version::unassigned},  __age_data_t{0x05EF, version::v11_0},
    __age_data_t{0x05F0, version::v1_1},        __age_data_t{0x05F5, version::unassigned},
    __age_data_t{0x0600, version::v4_0},        __age_data_t{0x0604, version::v6_1},
    __age_data_t{0x0605, version::v7_0},        __age_data_t{0x0606, version::v5_1},
    __age_data_t{0x060B, version::v4_1},        __age_data_t{0x060C, version::v1_1},
    __age_data_t{0x060D, version::v4_0},        __age_data_t{0x0616, version::v5_1},
    __age_data_t{0x061B, version::v1_1},        __age_data_t{0x061C, version::v6_3},
    __age_data_t{0x061D, version::unassigned},  __age_data_t{0x061E, version::v4_1},
    __age_data_t{0x061F, version::v1_1},        __age_data_t{0x0620, version::v6_0},
    __age_data_t{0x0621, version::v1_1},        __age_data_t{0x063B, version::v5_1},
    __age_data_t{0x0640, version::v1_1},        __age_data_t{0x0653, version::v3_0},
    __age_data_t{0x0656, version::v4_0},        __age_data_t{0x0659, version::v4_1},
    __age_data_t{0x065F, version::v6_0},        __age_data_t{0x0660, version::v1_1},
    __age_data_t{0x066E, version::v3_2},        __age_data_t{0x0670, version::v1_1},
    __age_data_t{0x06B8, version::v3_0},        __age_data_t{0x06BA, version::v1_1},
    __age_data_t{0x06BF, version::v3_0},        __age_data_t{0x06C0, version::v1_1},
    __age_data_t{0x06CF, version::v3_0},        __age_data_t{0x06D0, version::v1_1},
    __age_data_t{0x06EE, version::v4_0},        __age_data_t{0x06F0, version::v1_1},
    __age_data_t{0x06FA, version::v3_0},        __age_data_t{0x06FF, version::v4_0},
    __age_data_t{0x0700, version::v3_0},        __age_data_t{0x070E, version::unassigned},
    __age_data_t{0x070F, version::v3_0},        __age_data_t{0x072D, version::v4_0},
    __age_data_t{0x0730, version::v3_0},        __age_data_t{0x074B, version::unassigned},
    __age_data_t{0x074D, version::v4_0},        __age_data_t{0x0750, version::v4_1},
    __age_data_t{0x076E, version::v5_1},        __age_data_t{0x0780, version::v3_0},
    __age_data_t{0x07B1, version::v3_2},        __age_data_t{0x07B2, version::unassigned},
    __age_data_t{0x07C0, version::v5_0},        __age_data_t{0x07FB, version::unassigned},
    __age_data_t{0x07FD, version::v11_0},       __age_data_t{0x0800, version::v5_2},
    __age_data_t{0x082E, version::unassigned},  __age_data_t{0x0830, version::v5_2},
    __age_data_t{0x083F, version::unassigned},  __age_data_t{0x0840, version::v6_0},
    __age_data_t{0x085C, version::unassigned},  __age_data_t{0x085E, version::v6_0},
    __age_data_t{0x085F, version::unassigned},  __age_data_t{0x0860, version::v10_0},
    __age_data_t{0x086B, version::unassigned},  __age_data_t{0x08A0, version::v6_1},
    __age_data_t{0x08A1, version::v7_0},        __age_data_t{0x08A2, version::v6_1},
    __age_data_t{0x08AD, version::v7_0},        __age_data_t{0x08B3, version::v8_0},
    __age_data_t{0x08B5, version::unassigned},  __age_data_t{0x08B6, version::v9_0},
    __age_data_t{0x08BE, version::unassigned},  __age_data_t{0x08D3, version::v11_0},
    __age_data_t{0x08D4, version::v9_0},        __age_data_t{0x08E3, version::v8_0},
    __age_data_t{0x08E4, version::v6_1},        __age_data_t{0x08FF, version::v7_0},
    __age_data_t{0x0900, version::v5_2},        __age_data_t{0x0901, version::v1_1},
    __age_data_t{0x0904, version::v4_0},        __age_data_t{0x0905, version::v1_1},
    __age_data_t{0x093A, version::v6_0},        __age_data_t{0x093C, version::v1_1},
    __age_data_t{0x094E, version::v5_2},        __age_data_t{0x094F, version::v6_0},
    __age_data_t{0x0950, version::v1_1},        __age_data_t{0x0955, version::v5_2},
    __age_data_t{0x0956, version::v6_0},        __age_data_t{0x0958, version::v1_1},
    __age_data_t{0x0971, version::v5_1},        __age_data_t{0x0973, version::v6_0},
    __age_data_t{0x0978, version::v7_0},        __age_data_t{0x0979, version::v5_2},
    __age_data_t{0x097B, version::v5_0},        __age_data_t{0x097D, version::v4_1},
    __age_data_t{0x097E, version::v5_0},        __age_data_t{0x0980, version::v7_0},
    __age_data_t{0x0981, version::v1_1},        __age_data_t{0x0984, version::unassigned},
    __age_data_t{0x0985, version::v1_1},        __age_data_t{0x098D, version::unassigned},
    __age_data_t{0x098F, version::v1_1},        __age_data_t{0x0991, version::unassigned},
    __age_data_t{0x0993, version::v1_1},        __age_data_t{0x09A9, version::unassigned},
    __age_data_t{0x09AA, version::v1_1},        __age_data_t{0x09B1, version::unassigned},
    __age_data_t{0x09B2, version::v1_1},        __age_data_t{0x09B3, version::unassigned},
    __age_data_t{0x09B6, version::v1_1},        __age_data_t{0x09BA, version::unassigned},
    __age_data_t{0x09BC, version::v1_1},        __age_data_t{0x09BD, version::v4_0},
    __age_data_t{0x09BE, version::v1_1},        __age_data_t{0x09C5, version::unassigned},
    __age_data_t{0x09C7, version::v1_1},        __age_data_t{0x09C9, version::unassigned},
    __age_data_t{0x09CB, version::v1_1},        __age_data_t{0x09CE, version::v4_1},
    __age_data_t{0x09CF, version::unassigned},  __age_data_t{0x09D7, version::v1_1},
    __age_data_t{0x09D8, version::unassigned},  __age_data_t{0x09DC, version::v1_1},
    __age_data_t{0x09DE, version::unassigned},  __age_data_t{0x09DF, version::v1_1},
    __age_data_t{0x09E4, version::unassigned},  __age_data_t{0x09E6, version::v1_1},
    __age_data_t{0x09FB, version::v5_2},        __age_data_t{0x09FC, version::v10_0},
    __age_data_t{0x09FE, version::v11_0},       __age_data_t{0x09FF, version::unassigned},
    __age_data_t{0x0A01, version::v4_0},        __age_data_t{0x0A02, version::v1_1},
    __age_data_t{0x0A03, version::v4_0},        __age_data_t{0x0A04, version::unassigned},
    __age_data_t{0x0A05, version::v1_1},        __age_data_t{0x0A0B, version::unassigned},
    __age_data_t{0x0A0F, version::v1_1},        __age_data_t{0x0A11, version::unassigned},
    __age_data_t{0x0A13, version::v1_1},        __age_data_t{0x0A29, version::unassigned},
    __age_data_t{0x0A2A, version::v1_1},        __age_data_t{0x0A31, version::unassigned},
    __age_data_t{0x0A32, version::v1_1},        __age_data_t{0x0A34, version::unassigned},
    __age_data_t{0x0A35, version::v1_1},        __age_data_t{0x0A37, version::unassigned},
    __age_data_t{0x0A38, version::v1_1},        __age_data_t{0x0A3A, version::unassigned},
    __age_data_t{0x0A3C, version::v1_1},        __age_data_t{0x0A3D, version::unassigned},
    __age_data_t{0x0A3E, version::v1_1},        __age_data_t{0x0A43, version::unassigned},
    __age_data_t{0x0A47, version::v1_1},        __age_data_t{0x0A49, version::unassigned},
    __age_data_t{0x0A4B, version::v1_1},        __age_data_t{0x0A4E, version::unassigned},
    __age_data_t{0x0A51, version::v5_1},        __age_data_t{0x0A52, version::unassigned},
    __age_data_t{0x0A59, version::v1_1},        __age_data_t{0x0A5D, version::unassigned},
    __age_data_t{0x0A5E, version::v1_1},        __age_data_t{0x0A5F, version::unassigned},
    __age_data_t{0x0A66, version::v1_1},        __age_data_t{0x0A75, version::v5_1},
    __age_data_t{0x0A76, version::v11_0},       __age_data_t{0x0A77, version::unassigned},
    __age_data_t{0x0A81, version::v1_1},        __age_data_t{0x0A84, version::unassigned},
    __age_data_t{0x0A85, version::v1_1},        __age_data_t{0x0A8C, version::v4_0},
    __age_data_t{0x0A8D, version::v1_1},        __age_data_t{0x0A8E, version::unassigned},
    __age_data_t{0x0A8F, version::v1_1},        __age_data_t{0x0A92, version::unassigned},
    __age_data_t{0x0A93, version::v1_1},        __age_data_t{0x0AA9, version::unassigned},
    __age_data_t{0x0AAA, version::v1_1},        __age_data_t{0x0AB1, version::unassigned},
    __age_data_t{0x0AB2, version::v1_1},        __age_data_t{0x0AB4, version::unassigned},
    __age_data_t{0x0AB5, version::v1_1},        __age_data_t{0x0ABA, version::unassigned},
    __age_data_t{0x0ABC, version::v1_1},        __age_data_t{0x0AC6, version::unassigned},
    __age_data_t{0x0AC7, version::v1_1},        __age_data_t{0x0ACA, version::unassigned},
    __age_data_t{0x0ACB, version::v1_1},        __age_data_t{0x0ACE, version::unassigned},
    __age_data_t{0x0AD0, version::v1_1},        __age_data_t{0x0AD1, version::unassigned},
    __age_data_t{0x0AE0, version::v1_1},        __age_data_t{0x0AE1, version::v4_0},
    __age_data_t{0x0AE4, version::unassigned},  __age_data_t{0x0AE6, version::v1_1},
    __age_data_t{0x0AF0, version::v6_1},        __age_data_t{0x0AF1, version::v4_0},
    __age_data_t{0x0AF2, version::unassigned},  __age_data_t{0x0AF9, version::v8_0},
    __age_data_t{0x0AFA, version::v10_0},       __age_data_t{0x0B00, version::unassigned},
    __age_data_t{0x0B01, version::v1_1},        __age_data_t{0x0B04, version::unassigned},
    __age_data_t{0x0B05, version::v1_1},        __age_data_t{0x0B0D, version::unassigned},
    __age_data_t{0x0B0F, version::v1_1},        __age_data_t{0x0B11, version::unassigned},
    __age_data_t{0x0B13, version::v1_1},        __age_data_t{0x0B29, version::unassigned},
    __age_data_t{0x0B2A, version::v1_1},        __age_data_t{0x0B31, version::unassigned},
    __age_data_t{0x0B32, version::v1_1},        __age_data_t{0x0B34, version::unassigned},
    __age_data_t{0x0B35, version::v4_0},        __age_data_t{0x0B36, version::v1_1},
    __age_data_t{0x0B3A, version::unassigned},  __age_data_t{0x0B3C, version::v1_1},
    __age_data_t{0x0B44, version::v5_1},        __age_data_t{0x0B45, version::unassigned},
    __age_data_t{0x0B47, version::v1_1},        __age_data_t{0x0B49, version::unassigned},
    __age_data_t{0x0B4B, version::v1_1},        __age_data_t{0x0B4E, version::unassigned},
    __age_data_t{0x0B56, version::v1_1},        __age_data_t{0x0B58, version::unassigned},
    __age_data_t{0x0B5C, version::v1_1},        __age_data_t{0x0B5E, version::unassigned},
    __age_data_t{0x0B5F, version::v1_1},        __age_data_t{0x0B62, version::v5_1},
    __age_data_t{0x0B64, version::unassigned},  __age_data_t{0x0B66, version::v1_1},
    __age_data_t{0x0B71, version::v4_0},        __age_data_t{0x0B72, version::v6_0},
    __age_data_t{0x0B78, version::unassigned},  __age_data_t{0x0B82, version::v1_1},
    __age_data_t{0x0B84, version::unassigned},  __age_data_t{0x0B85, version::v1_1},
    __age_data_t{0x0B8B, version::unassigned},  __age_data_t{0x0B8E, version::v1_1},
    __age_data_t{0x0B91, version::unassigned},  __age_data_t{0x0B92, version::v1_1},
    __age_data_t{0x0B96, version::unassigned},  __age_data_t{0x0B99, version::v1_1},
    __age_data_t{0x0B9B, version::unassigned},  __age_data_t{0x0B9C, version::v1_1},
    __age_data_t{0x0B9D, version::unassigned},  __age_data_t{0x0B9E, version::v1_1},
    __age_data_t{0x0BA0, version::unassigned},  __age_data_t{0x0BA3, version::v1_1},
    __age_data_t{0x0BA5, version::unassigned},  __age_data_t{0x0BA8, version::v1_1},
    __age_data_t{0x0BAB, version::unassigned},  __age_data_t{0x0BAE, version::v1_1},
    __age_data_t{0x0BB6, version::v4_1},        __age_data_t{0x0BB7, version::v1_1},
    __age_data_t{0x0BBA, version::unassigned},  __age_data_t{0x0BBE, version::v1_1},
    __age_data_t{0x0BC3, version::unassigned},  __age_data_t{0x0BC6, version::v1_1},
    __age_data_t{0x0BC9, version::unassigned},  __age_data_t{0x0BCA, version::v1_1},
    __age_data_t{0x0BCE, version::unassigned},  __age_data_t{0x0BD0, version::v5_1},
    __age_data_t{0x0BD1, version::unassigned},  __age_data_t{0x0BD7, version::v1_1},
    __age_data_t{0x0BD8, version::unassigned},  __age_data_t{0x0BE6, version::v4_1},
    __age_data_t{0x0BE7, version::v1_1},        __age_data_t{0x0BF3, version::v4_0},
    __age_data_t{0x0BFB, version::unassigned},  __age_data_t{0x0C00, version::v7_0},
    __age_data_t{0x0C01, version::v1_1},        __age_data_t{0x0C04, version::v11_0},
    __age_data_t{0x0C05, version::v1_1},        __age_data_t{0x0C0D, version::unassigned},
    __age_data_t{0x0C0E, version::v1_1},        __age_data_t{0x0C11, version::unassigned},
    __age_data_t{0x0C12, version::v1_1},        __age_data_t{0x0C29, version::unassigned},
    __age_data_t{0x0C2A, version::v1_1},        __age_data_t{0x0C34, version::v7_0},
    __age_data_t{0x0C35, version::v1_1},        __age_data_t{0x0C3A, version::unassigned},
    __age_data_t{0x0C3D, version::v5_1},        __age_data_t{0x0C3E, version::v1_1},
    __age_data_t{0x0C45, version::unassigned},  __age_data_t{0x0C46, version::v1_1},
    __age_data_t{0x0C49, version::unassigned},  __age_data_t{0x0C4A, version::v1_1},
    __age_data_t{0x0C4E, version::unassigned},  __age_data_t{0x0C55, version::v1_1},
    __age_data_t{0x0C57, version::unassigned},  __age_data_t{0x0C58, version::v5_1},
    __age_data_t{0x0C5A, version::v8_0},        __age_data_t{0x0C5B, version::unassigned},
    __age_data_t{0x0C60, version::v1_1},        __age_data_t{0x0C62, version::v5_1},
    __age_data_t{0x0C64, version::unassigned},  __age_data_t{0x0C66, version::v1_1},
    __age_data_t{0x0C70, version::unassigned},  __age_data_t{0x0C77, version::v12_0},
    __age_data_t{0x0C78, version::v5_1},        __age_data_t{0x0C80, version::v9_0},
    __age_data_t{0x0C81, version::v7_0},        __age_data_t{0x0C82, version::v1_1},
    __age_data_t{0x0C84, version::v11_0},       __age_data_t{0x0C85, version::v1_1},
    __age_data_t{0x0C8D, version::unassigned},  __age_data_t{0x0C8E, version::v1_1},
    __age_data_t{0x0C91, version::unassigned},  __age_data_t{0x0C92, version::v1_1},
    __age_data_t{0x0CA9, version::unassigned},  __age_data_t{0x0CAA, version::v1_1},
    __age_data_t{0x0CB4, version::unassigned},  __age_data_t{0x0CB5, version::v1_1},
    __age_data_t{0x0CBA, version::unassigned},  __age_data_t{0x0CBC, version::v4_0},
    __age_data_t{0x0CBE, version::v1_1},        __age_data_t{0x0CC5, version::unassigned},
    __age_data_t{0x0CC6, version::v1_1},        __age_data_t{0x0CC9, version::unassigned},
    __age_data_t{0x0CCA, version::v1_1},        __age_data_t{0x0CCE, version::unassigned},
    __age_data_t{0x0CD5, version::v1_1},        __age_data_t{0x0CD7, version::unassigned},
    __age_data_t{0x0CDE, version::v1_1},        __age_data_t{0x0CDF, version::unassigned},
    __age_data_t{0x0CE0, version::v1_1},        __age_data_t{0x0CE2, version::v5_0},
    __age_data_t{0x0CE4, version::unassigned},  __age_data_t{0x0CE6, version::v1_1},
    __age_data_t{0x0CF0, version::unassigned},  __age_data_t{0x0CF1, version::v5_0},
    __age_data_t{0x0CF3, version::unassigned},  __age_data_t{0x0D00, version::v10_0},
    __age_data_t{0x0D01, version::v7_0},        __age_data_t{0x0D02, version::v1_1},
    __age_data_t{0x0D04, version::unassigned},  __age_data_t{0x0D05, version::v1_1},
    __age_data_t{0x0D0D, version::unassigned},  __age_data_t{0x0D0E, version::v1_1},
    __age_data_t{0x0D11, version::unassigned},  __age_data_t{0x0D12, version::v1_1},
    __age_data_t{0x0D29, version::v6_0},        __age_data_t{0x0D2A, version::v1_1},
    __age_data_t{0x0D3A, version::v6_0},        __age_data_t{0x0D3B, version::v10_0},
    __age_data_t{0x0D3D, version::v5_1},        __age_data_t{0x0D3E, version::v1_1},
    __age_data_t{0x0D44, version::v5_1},        __age_data_t{0x0D45, version::unassigned},
    __age_data_t{0x0D46, version::v1_1},        __age_data_t{0x0D49, version::unassigned},
    __age_data_t{0x0D4A, version::v1_1},        __age_data_t{0x0D4E, version::v6_0},
    __age_data_t{0x0D4F, version::v9_0},        __age_data_t{0x0D50, version::unassigned},
    __age_data_t{0x0D54, version::v9_0},        __age_data_t{0x0D57, version::v1_1},
    __age_data_t{0x0D58, version::v9_0},        __age_data_t{0x0D5F, version::v8_0},
    __age_data_t{0x0D60, version::v1_1},        __age_data_t{0x0D62, version::v5_1},
    __age_data_t{0x0D64, version::unassigned},  __age_data_t{0x0D66, version::v1_1},
    __age_data_t{0x0D70, version::v5_1},        __age_data_t{0x0D76, version::v9_0},
    __age_data_t{0x0D79, version::v5_1},        __age_data_t{0x0D80, version::unassigned},
    __age_data_t{0x0D82, version::v3_0},        __age_data_t{0x0D84, version::unassigned},
    __age_data_t{0x0D85, version::v3_0},        __age_data_t{0x0D97, version::unassigned},
    __age_data_t{0x0D9A, version::v3_0},        __age_data_t{0x0DB2, version::unassigned},
    __age_data_t{0x0DB3, version::v3_0},        __age_data_t{0x0DBC, version::unassigned},
    __age_data_t{0x0DBD, version::v3_0},        __age_data_t{0x0DBE, version::unassigned},
    __age_data_t{0x0DC0, version::v3_0},        __age_data_t{0x0DC7, version::unassigned},
    __age_data_t{0x0DCA, version::v3_0},        __age_data_t{0x0DCB, version::unassigned},
    __age_data_t{0x0DCF, version::v3_0},        __age_data_t{0x0DD5, version::unassigned},
    __age_data_t{0x0DD6, version::v3_0},        __age_data_t{0x0DD7, version::unassigned},
    __age_data_t{0x0DD8, version::v3_0},        __age_data_t{0x0DE0, version::unassigned},
    __age_data_t{0x0DE6, version::v7_0},        __age_data_t{0x0DF0, version::unassigned},
    __age_data_t{0x0DF2, version::v3_0},        __age_data_t{0x0DF5, version::unassigned},
    __age_data_t{0x0E01, version::v1_1},        __age_data_t{0x0E3B, version::unassigned},
    __age_data_t{0x0E3F, version::v1_1},        __age_data_t{0x0E5C, version::unassigned},
    __age_data_t{0x0E81, version::v1_1},        __age_data_t{0x0E83, version::unassigned},
    __age_data_t{0x0E84, version::v1_1},        __age_data_t{0x0E85, version::unassigned},
    __age_data_t{0x0E86, version::v12_0},       __age_data_t{0x0E87, version::v1_1},
    __age_data_t{0x0E89, version::v12_0},       __age_data_t{0x0E8A, version::v1_1},
    __age_data_t{0x0E8B, version::unassigned},  __age_data_t{0x0E8C, version::v12_0},
    __age_data_t{0x0E8D, version::v1_1},        __age_data_t{0x0E8E, version::v12_0},
    __age_data_t{0x0E94, version::v1_1},        __age_data_t{0x0E98, version::v12_0},
    __age_data_t{0x0E99, version::v1_1},        __age_data_t{0x0EA0, version::v12_0},
    __age_data_t{0x0EA1, version::v1_1},        __age_data_t{0x0EA4, version::unassigned},
    __age_data_t{0x0EA5, version::v1_1},        __age_data_t{0x0EA6, version::unassigned},
    __age_data_t{0x0EA7, version::v1_1},        __age_data_t{0x0EA8, version::v12_0},
    __age_data_t{0x0EAA, version::v1_1},        __age_data_t{0x0EAC, version::v12_0},
    __age_data_t{0x0EAD, version::v1_1},        __age_data_t{0x0EBA, version::v12_0},
    __age_data_t{0x0EBB, version::v1_1},        __age_data_t{0x0EBE, version::unassigned},
    __age_data_t{0x0EC0, version::v1_1},        __age_data_t{0x0EC5, version::unassigned},
    __age_data_t{0x0EC6, version::v1_1},        __age_data_t{0x0EC7, version::unassigned},
    __age_data_t{0x0EC8, version::v1_1},        __age_data_t{0x0ECE, version::unassigned},
    __age_data_t{0x0ED0, version::v1_1},        __age_data_t{0x0EDA, version::unassigned},
    __age_data_t{0x0EDC, version::v1_1},        __age_data_t{0x0EDE, version::v6_1},
    __age_data_t{0x0EE0, version::unassigned},  __age_data_t{0x0F00, version::v2_0},
    __age_data_t{0x0F48, version::unassigned},  __age_data_t{0x0F49, version::v2_0},
    __age_data_t{0x0F6A, version::v3_0},        __age_data_t{0x0F6B, version::v5_1},
    __age_data_t{0x0F6D, version::unassigned},  __age_data_t{0x0F71, version::v2_0},
    __age_data_t{0x0F8C, version::v6_0},        __age_data_t{0x0F90, version::v2_0},
    __age_data_t{0x0F96, version::v3_0},        __age_data_t{0x0F97, version::v2_0},
    __age_data_t{0x0F98, version::unassigned},  __age_data_t{0x0F99, version::v2_0},
    __age_data_t{0x0FAE, version::v3_0},        __age_data_t{0x0FB1, version::v2_0},
    __age_data_t{0x0FB8, version::v3_0},        __age_data_t{0x0FB9, version::v2_0},
    __age_data_t{0x0FBA, version::v3_0},        __age_data_t{0x0FBD, version::unassigned},
    __age_data_t{0x0FBE, version::v3_0},        __age_data_t{0x0FCD, version::unassigned},
    __age_data_t{0x0FCE, version::v5_1},        __age_data_t{0x0FCF, version::v3_0},
    __age_data_t{0x0FD0, version::v4_1},        __age_data_t{0x0FD2, version::v5_1},
    __age_data_t{0x0FD5, version::v5_2},        __age_data_t{0x0FD9, version::v6_0},
    __age_data_t{0x0FDB, version::unassigned},  __age_data_t{0x1000, version::v3_0},
    __age_data_t{0x1022, version::v5_1},        __age_data_t{0x1023, version::v3_0},
    __age_data_t{0x1028, version::v5_1},        __age_data_t{0x1029, version::v3_0},
    __age_data_t{0x102B, version::v5_1},        __age_data_t{0x102C, version::v3_0},
    __age_data_t{0x1033, version::v5_1},        __age_data_t{0x1036, version::v3_0},
    __age_data_t{0x103A, version::v5_1},        __age_data_t{0x1040, version::v3_0},
    __age_data_t{0x105A, version::v5_1},        __age_data_t{0x109A, version::v5_2},
    __age_data_t{0x109E, version::v5_1},        __age_data_t{0x10A0, version::v1_1},
    __age_data_t{0x10C6, version::unassigned},  __age_data_t{0x10C7, version::v6_1},
    __age_data_t{0x10C8, version::unassigned},  __age_data_t{0x10CD, version::v6_1},
    __age_data_t{0x10CE, version::unassigned},  __age_data_t{0x10D0, version::v1_1},
    __age_data_t{0x10F7, version::v3_2},        __age_data_t{0x10F9, version::v4_1},
    __age_data_t{0x10FB, version::v1_1},        __age_data_t{0x10FC, version::v4_1},
    __age_data_t{0x10FD, version::v6_1},        __age_data_t{0x1100, version::v1_1},
    __age_data_t{0x115A, version::v5_2},        __age_data_t{0x115F, version::v1_1},
    __age_data_t{0x11A3, version::v5_2},        __age_data_t{0x11A8, version::v1_1},
    __age_data_t{0x11FA, version::v5_2},        __age_data_t{0x1200, version::v3_0},
    __age_data_t{0x1207, version::v4_1},        __age_data_t{0x1208, version::v3_0},
    __age_data_t{0x1247, version::v4_1},        __age_data_t{0x1248, version::v3_0},
    __age_data_t{0x1249, version::unassigned},  __age_data_t{0x124A, version::v3_0},
    __age_data_t{0x124E, version::unassigned},  __age_data_t{0x1250, version::v3_0},
    __age_data_t{0x1257, version::unassigned},  __age_data_t{0x1258, version::v3_0},
    __age_data_t{0x1259, version::unassigned},  __age_data_t{0x125A, version::v3_0},
    __age_data_t{0x125E, version::unassigned},  __age_data_t{0x1260, version::v3_0},
    __age_data_t{0x1287, version::v4_1},        __age_data_t{0x1288, version::v3_0},
    __age_data_t{0x1289, version::unassigned},  __age_data_t{0x128A, version::v3_0},
    __age_data_t{0x128E, version::unassigned},  __age_data_t{0x1290, version::v3_0},
    __age_data_t{0x12AF, version::v4_1},        __age_data_t{0x12B0, version::v3_0},
    __age_data_t{0x12B1, version::unassigned},  __age_data_t{0x12B2, version::v3_0},
    __age_data_t{0x12B6, version::unassigned},  __age_data_t{0x12B8, version::v3_0},
    __age_data_t{0x12BF, version::unassigned},  __age_data_t{0x12C0, version::v3_0},
    __age_data_t{0x12C1, version::unassigned},  __age_data_t{0x12C2, version::v3_0},
    __age_data_t{0x12C6, version::unassigned},  __age_data_t{0x12C8, version::v3_0},
    __age_data_t{0x12CF, version::v4_1},        __age_data_t{0x12D0, version::v3_0},
    __age_data_t{0x12D7, version::unassigned},  __age_data_t{0x12D8, version::v3_0},
    __age_data_t{0x12EF, version::v4_1},        __age_data_t{0x12F0, version::v3_0},
    __age_data_t{0x130F, version::v4_1},        __age_data_t{0x1310, version::v3_0},
    __age_data_t{0x1311, version::unassigned},  __age_data_t{0x1312, version::v3_0},
    __age_data_t{0x1316, version::unassigned},  __age_data_t{0x1318, version::v3_0},
    __age_data_t{0x131F, version::v4_1},        __age_data_t{0x1320, version::v3_0},
    __age_data_t{0x1347, version::v4_1},        __age_data_t{0x1348, version::v3_0},
    __age_data_t{0x135B, version::unassigned},  __age_data_t{0x135D, version::v6_0},
    __age_data_t{0x135F, version::v4_1},        __age_data_t{0x1361, version::v3_0},
    __age_data_t{0x137D, version::unassigned},  __age_data_t{0x1380, version::v4_1},
    __age_data_t{0x139A, version::unassigned},  __age_data_t{0x13A0, version::v3_0},
    __age_data_t{0x13F5, version::v8_0},        __age_data_t{0x13F6, version::unassigned},
    __age_data_t{0x13F8, version::v8_0},        __age_data_t{0x13FE, version::unassigned},
    __age_data_t{0x1400, version::v5_2},        __age_data_t{0x1401, version::v3_0},
    __age_data_t{0x1677, version::v5_2},        __age_data_t{0x1680, version::v3_0},
    __age_data_t{0x169D, version::unassigned},  __age_data_t{0x16A0, version::v3_0},
    __age_data_t{0x16F1, version::v7_0},        __age_data_t{0x16F9, version::unassigned},
    __age_data_t{0x1700, version::v3_2},        __age_data_t{0x170D, version::unassigned},
    __age_data_t{0x170E, version::v3_2},        __age_data_t{0x1715, version::unassigned},
    __age_data_t{0x1720, version::v3_2},        __age_data_t{0x1737, version::unassigned},
    __age_data_t{0x1740, version::v3_2},        __age_data_t{0x1754, version::unassigned},
    __age_data_t{0x1760, version::v3_2},        __age_data_t{0x176D, version::unassigned},
    __age_data_t{0x176E, version::v3_2},        __age_data_t{0x1771, version::unassigned},
    __age_data_t{0x1772, version::v3_2},        __age_data_t{0x1774, version::unassigned},
    __age_data_t{0x1780, version::v3_0},        __age_data_t{0x17DD, version::v4_0},
    __age_data_t{0x17DE, version::unassigned},  __age_data_t{0x17E0, version::v3_0},
    __age_data_t{0x17EA, version::unassigned},  __age_data_t{0x17F0, version::v4_0},
    __age_data_t{0x17FA, version::unassigned},  __age_data_t{0x1800, version::v3_0},
    __age_data_t{0x180F, version::unassigned},  __age_data_t{0x1810, version::v3_0},
    __age_data_t{0x181A, version::unassigned},  __age_data_t{0x1820, version::v3_0},
    __age_data_t{0x1878, version::v11_0},       __age_data_t{0x1879, version::unassigned},
    __age_data_t{0x1880, version::v3_0},        __age_data_t{0x18AA, version::v5_1},
    __age_data_t{0x18AB, version::unassigned},  __age_data_t{0x18B0, version::v5_2},
    __age_data_t{0x18F6, version::unassigned},  __age_data_t{0x1900, version::v4_0},
    __age_data_t{0x191D, version::v7_0},        __age_data_t{0x191F, version::unassigned},
    __age_data_t{0x1920, version::v4_0},        __age_data_t{0x192C, version::unassigned},
    __age_data_t{0x1930, version::v4_0},        __age_data_t{0x193C, version::unassigned},
    __age_data_t{0x1940, version::v4_0},        __age_data_t{0x1941, version::unassigned},
    __age_data_t{0x1944, version::v4_0},        __age_data_t{0x196E, version::unassigned},
    __age_data_t{0x1970, version::v4_0},        __age_data_t{0x1975, version::unassigned},
    __age_data_t{0x1980, version::v4_1},        __age_data_t{0x19AA, version::v5_2},
    __age_data_t{0x19AC, version::unassigned},  __age_data_t{0x19B0, version::v4_1},
    __age_data_t{0x19CA, version::unassigned},  __age_data_t{0x19D0, version::v4_1},
    __age_data_t{0x19DA, version::v5_2},        __age_data_t{0x19DB, version::unassigned},
    __age_data_t{0x19DE, version::v4_1},        __age_data_t{0x19E0, version::v4_0},
    __age_data_t{0x1A00, version::v4_1},        __age_data_t{0x1A1C, version::unassigned},
    __age_data_t{0x1A1E, version::v4_1},        __age_data_t{0x1A20, version::v5_2},
    __age_data_t{0x1A5F, version::unassigned},  __age_data_t{0x1A60, version::v5_2},
    __age_data_t{0x1A7D, version::unassigned},  __age_data_t{0x1A7F, version::v5_2},
    __age_data_t{0x1A8A, version::unassigned},  __age_data_t{0x1A90, version::v5_2},
    __age_data_t{0x1A9A, version::unassigned},  __age_data_t{0x1AA0, version::v5_2},
    __age_data_t{0x1AAE, version::unassigned},  __age_data_t{0x1AB0, version::v7_0},
    __age_data_t{0x1ABF, version::unassigned},  __age_data_t{0x1B00, version::v5_0},
    __age_data_t{0x1B4C, version::unassigned},  __age_data_t{0x1B50, version::v5_0},
    __age_data_t{0x1B7D, version::unassigned},  __age_data_t{0x1B80, version::v5_1},
    __age_data_t{0x1BAB, version::v6_1},        __age_data_t{0x1BAE, version::v5_1},
    __age_data_t{0x1BBA, version::v6_1},        __age_data_t{0x1BC0, version::v6_0},
    __age_data_t{0x1BF4, version::unassigned},  __age_data_t{0x1BFC, version::v6_0},
    __age_data_t{0x1C00, version::v5_1},        __age_data_t{0x1C38, version::unassigned},
    __age_data_t{0x1C3B, version::v5_1},        __age_data_t{0x1C4A, version::unassigned},
    __age_data_t{0x1C4D, version::v5_1},        __age_data_t{0x1C80, version::v9_0},
    __age_data_t{0x1C89, version::unassigned},  __age_data_t{0x1C90, version::v11_0},
    __age_data_t{0x1CBB, version::unassigned},  __age_data_t{0x1CBD, version::v11_0},
    __age_data_t{0x1CC0, version::v6_1},        __age_data_t{0x1CC8, version::unassigned},
    __age_data_t{0x1CD0, version::v5_2},        __age_data_t{0x1CF3, version::v6_1},
    __age_data_t{0x1CF7, version::v10_0},       __age_data_t{0x1CF8, version::v7_0},
    __age_data_t{0x1CFA, version::v12_0},       __age_data_t{0x1CFB, version::unassigned},
    __age_data_t{0x1D00, version::v4_0},        __age_data_t{0x1D6C, version::v4_1},
    __age_data_t{0x1DC4, version::v5_0},        __age_data_t{0x1DCB, version::v5_1},
    __age_data_t{0x1DE7, version::v7_0},        __age_data_t{0x1DF6, version::v10_0},
    __age_data_t{0x1DFA, version::unassigned},  __age_data_t{0x1DFB, version::v9_0},
    __age_data_t{0x1DFC, version::v6_0},        __age_data_t{0x1DFD, version::v5_2},
    __age_data_t{0x1DFE, version::v5_0},        __age_data_t{0x1E00, version::v1_1},
    __age_data_t{0x1E9B, version::v2_0},        __age_data_t{0x1E9C, version::v5_1},
    __age_data_t{0x1EA0, version::v1_1},        __age_data_t{0x1EFA, version::v5_1},
    __age_data_t{0x1F00, version::v1_1},        __age_data_t{0x1F16, version::unassigned},
    __age_data_t{0x1F18, version::v1_1},        __age_data_t{0x1F1E, version::unassigned},
    __age_data_t{0x1F20, version::v1_1},        __age_data_t{0x1F46, version::unassigned},
    __age_data_t{0x1F48, version::v1_1},        __age_data_t{0x1F4E, version::unassigned},
    __age_data_t{0x1F50, version::v1_1},        __age_data_t{0x1F58, version::unassigned},
    __age_data_t{0x1F59, version::v1_1},        __age_data_t{0x1F5A, version::unassigned},
    __age_data_t{0x1F5B, version::v1_1},        __age_data_t{0x1F5C, version::unassigned},
    __age_data_t{0x1F5D, version::v1_1},        __age_data_t{0x1F5E, version::unassigned},
    __age_data_t{0x1F5F, version::v1_1},        __age_data_t{0x1F7E, version::unassigned},
    __age_data_t{0x1F80, version::v1_1},        __age_data_t{0x1FB5, version::unassigned},
    __age_data_t{0x1FB6, version::v1_1},        __age_data_t{0x1FC5, version::unassigned},
    __age_data_t{0x1FC6, version::v1_1},        __age_data_t{0x1FD4, version::unassigned},
    __age_data_t{0x1FD6, version::v1_1},        __age_data_t{0x1FDC, version::unassigned},
    __age_data_t{0x1FDD, version::v1_1},        __age_data_t{0x1FF0, version::unassigned},
    __age_data_t{0x1FF2, version::v1_1},        __age_data_t{0x1FF5, version::unassigned},
    __age_data_t{0x1FF6, version::v1_1},        __age_data_t{0x1FFF, version::unassigned},
    __age_data_t{0x2000, version::v1_1},        __age_data_t{0x202F, version::v3_0},
    __age_data_t{0x2030, version::v1_1},        __age_data_t{0x2047, version::v3_2},
    __age_data_t{0x2048, version::v3_0},        __age_data_t{0x204E, version::v3_2},
    __age_data_t{0x2053, version::v4_0},        __age_data_t{0x2055, version::v4_1},
    __age_data_t{0x2057, version::v3_2},        __age_data_t{0x2058, version::v4_1},
    __age_data_t{0x205F, version::v3_2},        __age_data_t{0x2064, version::v5_1},
    __age_data_t{0x2065, version::unassigned},  __age_data_t{0x2066, version::v6_3},
    __age_data_t{0x206A, version::v1_1},        __age_data_t{0x2071, version::v3_2},
    __age_data_t{0x2072, version::unassigned},  __age_data_t{0x2074, version::v1_1},
    __age_data_t{0x208F, version::unassigned},  __age_data_t{0x2090, version::v4_1},
    __age_data_t{0x2095, version::v6_0},        __age_data_t{0x209D, version::unassigned},
    __age_data_t{0x20A0, version::v1_1},        __age_data_t{0x20AB, version::v2_0},
    __age_data_t{0x20AC, version::v2_1},        __age_data_t{0x20AD, version::v3_0},
    __age_data_t{0x20B0, version::v3_2},        __age_data_t{0x20B2, version::v4_1},
    __age_data_t{0x20B6, version::v5_2},        __age_data_t{0x20B9, version::v6_0},
    __age_data_t{0x20BA, version::v6_2},        __age_data_t{0x20BB, version::v7_0},
    __age_data_t{0x20BE, version::v8_0},        __age_data_t{0x20BF, version::v10_0},
    __age_data_t{0x20C0, version::unassigned},  __age_data_t{0x20D0, version::v1_1},
    __age_data_t{0x20E2, version::v3_0},        __age_data_t{0x20E4, version::v3_2},
    __age_data_t{0x20EB, version::v4_1},        __age_data_t{0x20EC, version::v5_0},
    __age_data_t{0x20F0, version::v5_1},        __age_data_t{0x20F1, version::unassigned},
    __age_data_t{0x2100, version::v1_1},        __age_data_t{0x2139, version::v3_0},
    __age_data_t{0x213B, version::v4_0},        __age_data_t{0x213C, version::v4_1},
    __age_data_t{0x213D, version::v3_2},        __age_data_t{0x214C, version::v4_1},
    __age_data_t{0x214D, version::v5_0},        __age_data_t{0x214F, version::v5_1},
    __age_data_t{0x2150, version::v5_2},        __age_data_t{0x2153, version::v1_1},
    __age_data_t{0x2183, version::v3_0},        __age_data_t{0x2184, version::v5_0},
    __age_data_t{0x2185, version::v5_1},        __age_data_t{0x2189, version::v5_2},
    __age_data_t{0x218A, version::v8_0},        __age_data_t{0x218C, version::unassigned},
    __age_data_t{0x2190, version::v1_1},        __age_data_t{0x21EB, version::v3_0},
    __age_data_t{0x21F4, version::v3_2},        __age_data_t{0x2200, version::v1_1},
    __age_data_t{0x22F2, version::v3_2},        __age_data_t{0x2300, version::v1_1},
    __age_data_t{0x2301, version::v3_0},        __age_data_t{0x2302, version::v1_1},
    __age_data_t{0x237B, version::v3_0},        __age_data_t{0x237C, version::v3_2},
    __age_data_t{0x237D, version::v3_0},        __age_data_t{0x239B, version::v3_2},
    __age_data_t{0x23CF, version::v4_0},        __age_data_t{0x23D1, version::v4_1},
    __age_data_t{0x23DC, version::v5_0},        __age_data_t{0x23E8, version::v5_2},
    __age_data_t{0x23E9, version::v6_0},        __age_data_t{0x23F4, version::v7_0},
    __age_data_t{0x23FB, version::v9_0},        __age_data_t{0x23FF, version::v10_0},
    __age_data_t{0x2400, version::v1_1},        __age_data_t{0x2425, version::v3_0},
    __age_data_t{0x2427, version::unassigned},  __age_data_t{0x2440, version::v1_1},
    __age_data_t{0x244B, version::unassigned},  __age_data_t{0x2460, version::v1_1},
    __age_data_t{0x24EB, version::v3_2},        __age_data_t{0x24FF, version::v4_0},
    __age_data_t{0x2500, version::v1_1},        __age_data_t{0x2596, version::v3_2},
    __age_data_t{0x25A0, version::v1_1},        __age_data_t{0x25F0, version::v3_0},
    __age_data_t{0x25F8, version::v3_2},        __age_data_t{0x2600, version::v1_1},
    __age_data_t{0x2614, version::v4_0},        __age_data_t{0x2616, version::v3_2},
    __age_data_t{0x2618, version::v4_1},        __age_data_t{0x2619, version::v3_0},
    __age_data_t{0x261A, version::v1_1},        __age_data_t{0x2670, version::v3_0},
    __age_data_t{0x2672, version::v3_2},        __age_data_t{0x267E, version::v4_1},
    __age_data_t{0x2680, version::v3_2},        __age_data_t{0x268A, version::v4_0},
    __age_data_t{0x2692, version::v4_1},        __age_data_t{0x269D, version::v5_1},
    __age_data_t{0x269E, version::v5_2},        __age_data_t{0x26A0, version::v4_0},
    __age_data_t{0x26A2, version::v4_1},        __age_data_t{0x26B2, version::v5_0},
    __age_data_t{0x26B3, version::v5_1},        __age_data_t{0x26BD, version::v5_2},
    __age_data_t{0x26C0, version::v5_1},        __age_data_t{0x26C4, version::v5_2},
    __age_data_t{0x26CE, version::v6_0},        __age_data_t{0x26CF, version::v5_2},
    __age_data_t{0x26E2, version::v6_0},        __age_data_t{0x26E3, version::v5_2},
    __age_data_t{0x26E4, version::v6_0},        __age_data_t{0x26E8, version::v5_2},
    __age_data_t{0x2700, version::v7_0},        __age_data_t{0x2701, version::v1_1},
    __age_data_t{0x2705, version::v6_0},        __age_data_t{0x2706, version::v1_1},
    __age_data_t{0x270A, version::v6_0},        __age_data_t{0x270C, version::v1_1},
    __age_data_t{0x2728, version::v6_0},        __age_data_t{0x2729, version::v1_1},
    __age_data_t{0x274C, version::v6_0},        __age_data_t{0x274D, version::v1_1},
    __age_data_t{0x274E, version::v6_0},        __age_data_t{0x274F, version::v1_1},
    __age_data_t{0x2753, version::v6_0},        __age_data_t{0x2756, version::v1_1},
    __age_data_t{0x2757, version::v5_2},        __age_data_t{0x2758, version::v1_1},
    __age_data_t{0x275F, version::v6_0},        __age_data_t{0x2761, version::v1_1},
    __age_data_t{0x2768, version::v3_2},        __age_data_t{0x2776, version::v1_1},
    __age_data_t{0x2795, version::v6_0},        __age_data_t{0x2798, version::v1_1},
    __age_data_t{0x27B0, version::v6_0},        __age_data_t{0x27B1, version::v1_1},
    __age_data_t{0x27BF, version::v6_0},        __age_data_t{0x27C0, version::v4_1},
    __age_data_t{0x27C7, version::v5_0},        __age_data_t{0x27CB, version::v6_1},
    __age_data_t{0x27CC, version::v5_1},        __age_data_t{0x27CD, version::v6_1},
    __age_data_t{0x27CE, version::v6_0},        __age_data_t{0x27D0, version::v3_2},
    __age_data_t{0x27EC, version::v5_1},        __age_data_t{0x27F0, version::v3_2},
    __age_data_t{0x2800, version::v3_0},        __age_data_t{0x2900, version::v3_2},
    __age_data_t{0x2B00, version::v4_0},        __age_data_t{0x2B0E, version::v4_1},
    __age_data_t{0x2B14, version::v5_0},        __age_data_t{0x2B1B, version::v5_1},
    __age_data_t{0x2B20, version::v5_0},        __age_data_t{0x2B24, version::v5_1},
    __age_data_t{0x2B4D, version::v7_0},        __age_data_t{0x2B50, version::v5_1},
    __age_data_t{0x2B55, version::v5_2},        __age_data_t{0x2B5A, version::v7_0},
    __age_data_t{0x2B74, version::unassigned},  __age_data_t{0x2B76, version::v7_0},
    __age_data_t{0x2B96, version::unassigned},  __age_data_t{0x2B98, version::v7_0},
    __age_data_t{0x2BBA, version::v11_0},       __age_data_t{0x2BBD, version::v7_0},
    __age_data_t{0x2BC9, version::v12_0},       __age_data_t{0x2BCA, version::v7_0},
    __age_data_t{0x2BD2, version::v10_0},       __age_data_t{0x2BD3, version::v11_0},
    __age_data_t{0x2BEC, version::v8_0},        __age_data_t{0x2BF0, version::v11_0},
    __age_data_t{0x2BFF, version::v12_0},       __age_data_t{0x2C00, version::v4_1},
    __age_data_t{0x2C2F, version::unassigned},  __age_data_t{0x2C30, version::v4_1},
    __age_data_t{0x2C5F, version::unassigned},  __age_data_t{0x2C60, version::v5_0},
    __age_data_t{0x2C6D, version::v5_1},        __age_data_t{0x2C70, version::v5_2},
    __age_data_t{0x2C71, version::v5_1},        __age_data_t{0x2C74, version::v5_0},
    __age_data_t{0x2C78, version::v5_1},        __age_data_t{0x2C7E, version::v5_2},
    __age_data_t{0x2C80, version::v4_1},        __age_data_t{0x2CEB, version::v5_2},
    __age_data_t{0x2CF2, version::v6_1},        __age_data_t{0x2CF4, version::unassigned},
    __age_data_t{0x2CF9, version::v4_1},        __age_data_t{0x2D26, version::unassigned},
    __age_data_t{0x2D27, version::v6_1},        __age_data_t{0x2D28, version::unassigned},
    __age_data_t{0x2D2D, version::v6_1},        __age_data_t{0x2D2E, version::unassigned},
    __age_data_t{0x2D30, version::v4_1},        __age_data_t{0x2D66, version::v6_1},
    __age_data_t{0x2D68, version::unassigned},  __age_data_t{0x2D6F, version::v4_1},
    __age_data_t{0x2D70, version::v6_0},        __age_data_t{0x2D71, version::unassigned},
    __age_data_t{0x2D7F, version::v6_0},        __age_data_t{0x2D80, version::v4_1},
    __age_data_t{0x2D97, version::unassigned},  __age_data_t{0x2DA0, version::v4_1},
    __age_data_t{0x2DA7, version::unassigned},  __age_data_t{0x2DA8, version::v4_1},
    __age_data_t{0x2DAF, version::unassigned},  __age_data_t{0x2DB0, version::v4_1},
    __age_data_t{0x2DB7, version::unassigned},  __age_data_t{0x2DB8, version::v4_1},
    __age_data_t{0x2DBF, version::unassigned},  __age_data_t{0x2DC0, version::v4_1},
    __age_data_t{0x2DC7, version::unassigned},  __age_data_t{0x2DC8, version::v4_1},
    __age_data_t{0x2DCF, version::unassigned},  __age_data_t{0x2DD0, version::v4_1},
    __age_data_t{0x2DD7, version::unassigned},  __age_data_t{0x2DD8, version::v4_1},
    __age_data_t{0x2DDF, version::unassigned},  __age_data_t{0x2DE0, version::v5_1},
    __age_data_t{0x2E00, version::v4_1},        __age_data_t{0x2E18, version::v5_1},
    __age_data_t{0x2E1C, version::v4_1},        __age_data_t{0x2E1E, version::v5_1},
    __age_data_t{0x2E31, version::v5_2},        __age_data_t{0x2E32, version::v6_1},
    __age_data_t{0x2E3C, version::v7_0},        __age_data_t{0x2E43, version::v9_0},
    __age_data_t{0x2E45, version::v10_0},       __age_data_t{0x2E4A, version::v11_0},
    __age_data_t{0x2E4F, version::v12_0},       __age_data_t{0x2E50, version::unassigned},
    __age_data_t{0x2E80, version::v3_0},        __age_data_t{0x2E9A, version::unassigned},
    __age_data_t{0x2E9B, version::v3_0},        __age_data_t{0x2EF4, version::unassigned},
    __age_data_t{0x2F00, version::v3_0},        __age_data_t{0x2FD6, version::unassigned},
    __age_data_t{0x2FF0, version::v3_0},        __age_data_t{0x2FFC, version::unassigned},
    __age_data_t{0x3000, version::v1_1},        __age_data_t{0x3038, version::v3_0},
    __age_data_t{0x303B, version::v3_2},        __age_data_t{0x303E, version::v3_0},
    __age_data_t{0x303F, version::v1_1},        __age_data_t{0x3040, version::unassigned},
    __age_data_t{0x3041, version::v1_1},        __age_data_t{0x3095, version::v3_2},
    __age_data_t{0x3097, version::unassigned},  __age_data_t{0x3099, version::v1_1},
    __age_data_t{0x309F, version::v3_2},        __age_data_t{0x30A1, version::v1_1},
    __age_data_t{0x30FF, version::v3_2},        __age_data_t{0x3100, version::unassigned},
    __age_data_t{0x3105, version::v1_1},        __age_data_t{0x312D, version::v5_1},
    __age_data_t{0x312E, version::v10_0},       __age_data_t{0x312F, version::v11_0},
    __age_data_t{0x3130, version::unassigned},  __age_data_t{0x3131, version::v1_1},
    __age_data_t{0x318F, version::unassigned},  __age_data_t{0x3190, version::v1_1},
    __age_data_t{0x31A0, version::v3_0},        __age_data_t{0x31B8, version::v6_0},
    __age_data_t{0x31BB, version::unassigned},  __age_data_t{0x31C0, version::v4_1},
    __age_data_t{0x31D0, version::v5_1},        __age_data_t{0x31E4, version::unassigned},
    __age_data_t{0x31F0, version::v3_2},        __age_data_t{0x3200, version::v1_1},
    __age_data_t{0x321D, version::v4_0},        __age_data_t{0x321F, version::unassigned},
    __age_data_t{0x3220, version::v1_1},        __age_data_t{0x3244, version::v5_2},
    __age_data_t{0x3250, version::v4_0},        __age_data_t{0x3251, version::v3_2},
    __age_data_t{0x3260, version::v1_1},        __age_data_t{0x327C, version::v4_0},
    __age_data_t{0x327E, version::v4_1},        __age_data_t{0x327F, version::v1_1},
    __age_data_t{0x32B1, version::v3_2},        __age_data_t{0x32C0, version::v1_1},
    __age_data_t{0x32CC, version::v4_0},        __age_data_t{0x32D0, version::v1_1},
    __age_data_t{0x32FF, version::unassigned},  __age_data_t{0x3300, version::v1_1},
    __age_data_t{0x3377, version::v4_0},        __age_data_t{0x337B, version::v1_1},
    __age_data_t{0x33DE, version::v4_0},        __age_data_t{0x33E0, version::v1_1},
    __age_data_t{0x33FF, version::v4_0},        __age_data_t{0x3400, version::unassigned},
    __age_data_t{0x3405, version::v3_0},        __age_data_t{0x3406, version::unassigned},
    __age_data_t{0x3483, version::v3_0},        __age_data_t{0x3484, version::unassigned},
    __age_data_t{0x382A, version::v3_0},        __age_data_t{0x382B, version::unassigned},
    __age_data_t{0x3B4D, version::v3_0},        __age_data_t{0x3B4E, version::unassigned},
    __age_data_t{0x4DC0, version::v4_0},        __age_data_t{0x4E00, version::v1_1},
    __age_data_t{0x4E01, version::unassigned},  __age_data_t{0x4E03, version::v1_1},
    __age_data_t{0x4E04, version::unassigned},  __age_data_t{0x4E07, version::v1_1},
    __age_data_t{0x4E0A, version::unassigned},  __age_data_t{0x4E5D, version::v1_1},
    __age_data_t{0x4E5E, version::unassigned},  __age_data_t{0x4E8C, version::v1_1},
    __age_data_t{0x4E8D, version::unassigned},  __age_data_t{0x4E94, version::v1_1},
    __age_data_t{0x4E97, version::unassigned},  __age_data_t{0x4EBF, version::v1_1},
    __age_data_t{0x4EC1, version::unassigned},  __age_data_t{0x4EDF, version::v1_1},
    __age_data_t{0x4EE0, version::unassigned},  __age_data_t{0x4EE8, version::v1_1},
    __age_data_t{0x4EE9, version::unassigned},  __age_data_t{0x4F0D, version::v1_1},
    __age_data_t{0x4F0E, version::unassigned},  __age_data_t{0x4F70, version::v1_1},
    __age_data_t{0x4F71, version::unassigned},  __age_data_t{0x5104, version::v1_1},
    __age_data_t{0x5105, version::unassigned},  __age_data_t{0x5146, version::v1_1},
    __age_data_t{0x5147, version::unassigned},  __age_data_t{0x5169, version::v1_1},
    __age_data_t{0x516E, version::unassigned},  __age_data_t{0x5341, version::v1_1},
    __age_data_t{0x5346, version::unassigned},  __age_data_t{0x534C, version::v1_1},
    __age_data_t{0x534D, version::unassigned},  __age_data_t{0x53C1, version::v1_1},
    __age_data_t{0x53C5, version::unassigned},  __age_data_t{0x56DB, version::v1_1},
    __age_data_t{0x56DC, version::unassigned},  __age_data_t{0x58F1, version::v1_1},
    __age_data_t{0x58F2, version::unassigned},  __age_data_t{0x58F9, version::v1_1},
    __age_data_t{0x58FA, version::unassigned},  __age_data_t{0x5E7A, version::v1_1},
    __age_data_t{0x5E7B, version::unassigned},  __age_data_t{0x5EFE, version::v1_1},
    __age_data_t{0x5F00, version::unassigned},  __age_data_t{0x5F0C, version::v1_1},
    __age_data_t{0x5F11, version::unassigned},  __age_data_t{0x62FE, version::v1_1},
    __age_data_t{0x62FF, version::unassigned},  __age_data_t{0x634C, version::v1_1},
    __age_data_t{0x634D, version::unassigned},  __age_data_t{0x67D2, version::v1_1},
    __age_data_t{0x67D3, version::unassigned},  __age_data_t{0x6F06, version::v1_1},
    __age_data_t{0x6F07, version::unassigned},  __age_data_t{0x7396, version::v1_1},
    __age_data_t{0x7397, version::unassigned},  __age_data_t{0x767E, version::v1_1},
    __age_data_t{0x767F, version::unassigned},  __age_data_t{0x8086, version::v1_1},
    __age_data_t{0x8087, version::unassigned},  __age_data_t{0x842C, version::v1_1},
    __age_data_t{0x842D, version::unassigned},  __age_data_t{0x8CAE, version::v1_1},
    __age_data_t{0x8CAF, version::unassigned},  __age_data_t{0x8CB3, version::v1_1},
    __age_data_t{0x8CB4, version::unassigned},  __age_data_t{0x8D30, version::v1_1},
    __age_data_t{0x8D31, version::unassigned},  __age_data_t{0x9621, version::v1_1},
    __age_data_t{0x9622, version::unassigned},  __age_data_t{0x9646, version::v1_1},
    __age_data_t{0x9647, version::unassigned},  __age_data_t{0x964C, version::v1_1},
    __age_data_t{0x964D, version::unassigned},  __age_data_t{0x9678, version::v1_1},
    __age_data_t{0x9679, version::unassigned},  __age_data_t{0x96F6, version::v1_1},
    __age_data_t{0x96F7, version::unassigned},  __age_data_t{0x9FCC, version::v6_1},
    __age_data_t{0x9FCD, version::unassigned},  __age_data_t{0xA000, version::v3_0},
    __age_data_t{0xA48D, version::unassigned},  __age_data_t{0xA490, version::v3_0},
    __age_data_t{0xA4A2, version::v3_2},        __age_data_t{0xA4A4, version::v3_0},
    __age_data_t{0xA4B4, version::v3_2},        __age_data_t{0xA4B5, version::v3_0},
    __age_data_t{0xA4C1, version::v3_2},        __age_data_t{0xA4C2, version::v3_0},
    __age_data_t{0xA4C5, version::v3_2},        __age_data_t{0xA4C6, version::v3_0},
    __age_data_t{0xA4C7, version::unassigned},  __age_data_t{0xA4D0, version::v5_2},
    __age_data_t{0xA500, version::v5_1},        __age_data_t{0xA62C, version::unassigned},
    __age_data_t{0xA640, version::v5_1},        __age_data_t{0xA660, version::v6_0},
    __age_data_t{0xA662, version::v5_1},        __age_data_t{0xA674, version::v6_1},
    __age_data_t{0xA67C, version::v5_1},        __age_data_t{0xA698, version::v7_0},
    __age_data_t{0xA69E, version::v8_0},        __age_data_t{0xA69F, version::v6_1},
    __age_data_t{0xA6A0, version::v5_2},        __age_data_t{0xA6F8, version::unassigned},
    __age_data_t{0xA700, version::v4_1},        __age_data_t{0xA717, version::v5_0},
    __age_data_t{0xA71B, version::v5_1},        __age_data_t{0xA720, version::v5_0},
    __age_data_t{0xA722, version::v5_1},        __age_data_t{0xA78D, version::v6_0},
    __age_data_t{0xA78F, version::v8_0},        __age_data_t{0xA790, version::v6_0},
    __age_data_t{0xA792, version::v6_1},        __age_data_t{0xA794, version::v7_0},
    __age_data_t{0xA7A0, version::v6_0},        __age_data_t{0xA7AA, version::v6_1},
    __age_data_t{0xA7AB, version::v7_0},        __age_data_t{0xA7AE, version::v9_0},
    __age_data_t{0xA7AF, version::v11_0},       __age_data_t{0xA7B0, version::v7_0},
    __age_data_t{0xA7B2, version::v8_0},        __age_data_t{0xA7B8, version::v11_0},
    __age_data_t{0xA7BA, version::v12_0},       __age_data_t{0xA7C0, version::unassigned},
    __age_data_t{0xA7C2, version::v12_0},       __age_data_t{0xA7C7, version::unassigned},
    __age_data_t{0xA7F7, version::v7_0},        __age_data_t{0xA7F8, version::v6_1},
    __age_data_t{0xA7FA, version::v6_0},        __age_data_t{0xA7FB, version::v5_1},
    __age_data_t{0xA800, version::v4_1},        __age_data_t{0xA82C, version::unassigned},
    __age_data_t{0xA830, version::v5_2},        __age_data_t{0xA83A, version::unassigned},
    __age_data_t{0xA840, version::v5_0},        __age_data_t{0xA878, version::unassigned},
    __age_data_t{0xA880, version::v5_1},        __age_data_t{0xA8C5, version::v9_0},
    __age_data_t{0xA8C6, version::unassigned},  __age_data_t{0xA8CE, version::v5_1},
    __age_data_t{0xA8DA, version::unassigned},  __age_data_t{0xA8E0, version::v5_2},
    __age_data_t{0xA8FC, version::v8_0},        __age_data_t{0xA8FE, version::v11_0},
    __age_data_t{0xA900, version::v5_1},        __age_data_t{0xA954, version::unassigned},
    __age_data_t{0xA95F, version::v5_1},        __age_data_t{0xA960, version::v5_2},
    __age_data_t{0xA97D, version::unassigned},  __age_data_t{0xA980, version::v5_2},
    __age_data_t{0xA9CE, version::unassigned},  __age_data_t{0xA9CF, version::v5_2},
    __age_data_t{0xA9DA, version::unassigned},  __age_data_t{0xA9DE, version::v5_2},
    __age_data_t{0xA9E0, version::v7_0},        __age_data_t{0xA9FF, version::unassigned},
    __age_data_t{0xAA00, version::v5_1},        __age_data_t{0xAA37, version::unassigned},
    __age_data_t{0xAA40, version::v5_1},        __age_data_t{0xAA4E, version::unassigned},
    __age_data_t{0xAA50, version::v5_1},        __age_data_t{0xAA5A, version::unassigned},
    __age_data_t{0xAA5C, version::v5_1},        __age_data_t{0xAA60, version::v5_2},
    __age_data_t{0xAA7C, version::v7_0},        __age_data_t{0xAA80, version::v5_2},
    __age_data_t{0xAAC3, version::unassigned},  __age_data_t{0xAADB, version::v5_2},
    __age_data_t{0xAAE0, version::v6_1},        __age_data_t{0xAAF7, version::unassigned},
    __age_data_t{0xAB01, version::v6_0},        __age_data_t{0xAB07, version::unassigned},
    __age_data_t{0xAB09, version::v6_0},        __age_data_t{0xAB0F, version::unassigned},
    __age_data_t{0xAB11, version::v6_0},        __age_data_t{0xAB17, version::unassigned},
    __age_data_t{0xAB20, version::v6_0},        __age_data_t{0xAB27, version::unassigned},
    __age_data_t{0xAB28, version::v6_0},        __age_data_t{0xAB2F, version::unassigned},
    __age_data_t{0xAB30, version::v7_0},        __age_data_t{0xAB60, version::v8_0},
    __age_data_t{0xAB64, version::v7_0},        __age_data_t{0xAB66, version::v12_0},
    __age_data_t{0xAB68, version::unassigned},  __age_data_t{0xAB70, version::v8_0},
    __age_data_t{0xABC0, version::v5_2},        __age_data_t{0xABEE, version::unassigned},
    __age_data_t{0xABF0, version::v5_2},        __age_data_t{0xABFA, version::unassigned},
    __age_data_t{0xAC00, version::v2_0},        __age_data_t{0xD7A4, version::unassigned},
    __age_data_t{0xD7B0, version::v5_2},        __age_data_t{0xD7C7, version::unassigned},
    __age_data_t{0xD7CB, version::v5_2},        __age_data_t{0xD7FC, version::unassigned},
    __age_data_t{0xF900, version::v1_1},        __age_data_t{0xFA2E, version::v6_1},
    __age_data_t{0xFA30, version::v3_2},        __age_data_t{0xFA6B, version::v5_2},
    __age_data_t{0xFA6E, version::unassigned},  __age_data_t{0xFA70, version::v4_1},
    __age_data_t{0xFADA, version::unassigned},  __age_data_t{0xFB00, version::v1_1},
    __age_data_t{0xFB07, version::unassigned},  __age_data_t{0xFB13, version::v1_1},
    __age_data_t{0xFB18, version::unassigned},  __age_data_t{0xFB1D, version::v3_0},
    __age_data_t{0xFB1E, version::v1_1},        __age_data_t{0xFB37, version::unassigned},
    __age_data_t{0xFB38, version::v1_1},        __age_data_t{0xFB3D, version::unassigned},
    __age_data_t{0xFB3E, version::v1_1},        __age_data_t{0xFB3F, version::unassigned},
    __age_data_t{0xFB40, version::v1_1},        __age_data_t{0xFB42, version::unassigned},
    __age_data_t{0xFB43, version::v1_1},        __age_data_t{0xFB45, version::unassigned},
    __age_data_t{0xFB46, version::v1_1},        __age_data_t{0xFBB2, version::v6_0},
    __age_data_t{0xFBC2, version::unassigned},  __age_data_t{0xFBD3, version::v1_1},
    __age_data_t{0xFD40, version::unassigned},  __age_data_t{0xFD50, version::v1_1},
    __age_data_t{0xFD90, version::unassigned},  __age_data_t{0xFD92, version::v1_1},
    __age_data_t{0xFDC8, version::unassigned},  __age_data_t{0xFDF0, version::v1_1},
    __age_data_t{0xFDFC, version::v3_2},        __age_data_t{0xFDFD, version::v4_0},
    __age_data_t{0xFDFE, version::unassigned},  __age_data_t{0xFE00, version::v3_2},
    __age_data_t{0xFE10, version::v4_1},        __age_data_t{0xFE1A, version::unassigned},
    __age_data_t{0xFE20, version::v1_1},        __age_data_t{0xFE24, version::v5_1},
    __age_data_t{0xFE27, version::v7_0},        __age_data_t{0xFE2E, version::v8_0},
    __age_data_t{0xFE30, version::v1_1},        __age_data_t{0xFE45, version::v3_2},
    __age_data_t{0xFE47, version::v4_0},        __age_data_t{0xFE49, version::v1_1},
    __age_data_t{0xFE53, version::unassigned},  __age_data_t{0xFE54, version::v1_1},
    __age_data_t{0xFE67, version::unassigned},  __age_data_t{0xFE68, version::v1_1},
    __age_data_t{0xFE6C, version::unassigned},  __age_data_t{0xFE70, version::v1_1},
    __age_data_t{0xFE73, version::v3_2},        __age_data_t{0xFE74, version::v1_1},
    __age_data_t{0xFE75, version::unassigned},  __age_data_t{0xFE76, version::v1_1},
    __age_data_t{0xFEFD, version::unassigned},  __age_data_t{0xFEFF, version::v1_1},
    __age_data_t{0xFF00, version::unassigned},  __age_data_t{0xFF01, version::v1_1},
    __age_data_t{0xFF5F, version::v3_2},        __age_data_t{0xFF61, version::v1_1},
    __age_data_t{0xFFBF, version::unassigned},  __age_data_t{0xFFC2, version::v1_1},
    __age_data_t{0xFFC8, version::unassigned},  __age_data_t{0xFFCA, version::v1_1},
    __age_data_t{0xFFD0, version::unassigned},  __age_data_t{0xFFD2, version::v1_1},
    __age_data_t{0xFFD8, version::unassigned},  __age_data_t{0xFFDA, version::v1_1},
    __age_data_t{0xFFDD, version::unassigned},  __age_data_t{0xFFE0, version::v1_1},
    __age_data_t{0xFFE7, version::unassigned},  __age_data_t{0xFFE8, version::v1_1},
    __age_data_t{0xFFEF, version::unassigned},  __age_data_t{0xFFF9, version::v3_0},
    __age_data_t{0xFFFC, version::v2_1},        __age_data_t{0xFFFD, version::v1_1},
    __age_data_t{0xFFFE, version::unassigned},  __age_data_t{0x10000, version::v4_0},
    __age_data_t{0x1000C, version::unassigned}, __age_data_t{0x1000D, version::v4_0},
    __age_data_t{0x10027, version::unassigned}, __age_data_t{0x10028, version::v4_0},
    __age_data_t{0x1003B, version::unassigned}, __age_data_t{0x1003C, version::v4_0},
    __age_data_t{0x1003E, version::unassigned}, __age_data_t{0x1003F, version::v4_0},
    __age_data_t{0x1004E, version::unassigned}, __age_data_t{0x10050, version::v4_0},
    __age_data_t{0x1005E, version::unassigned}, __age_data_t{0x10080, version::v4_0},
    __age_data_t{0x100FB, version::unassigned}, __age_data_t{0x10100, version::v4_0},
    __age_data_t{0x10103, version::unassigned}, __age_data_t{0x10107, version::v4_0},
    __age_data_t{0x10134, version::unassigned}, __age_data_t{0x10137, version::v4_0},
    __age_data_t{0x10140, version::v4_1},       __age_data_t{0x1018B, version::v7_0},
    __age_data_t{0x1018D, version::v9_0},       __age_data_t{0x1018F, version::unassigned},
    __age_data_t{0x10190, version::v5_1},       __age_data_t{0x1019C, version::unassigned},
    __age_data_t{0x101A0, version::v7_0},       __age_data_t{0x101A1, version::unassigned},
    __age_data_t{0x101D0, version::v5_1},       __age_data_t{0x101FE, version::unassigned},
    __age_data_t{0x10280, version::v5_1},       __age_data_t{0x1029D, version::unassigned},
    __age_data_t{0x102A0, version::v5_1},       __age_data_t{0x102D1, version::unassigned},
    __age_data_t{0x102E0, version::v7_0},       __age_data_t{0x102FC, version::unassigned},
    __age_data_t{0x10300, version::v3_1},       __age_data_t{0x1031F, version::v7_0},
    __age_data_t{0x10320, version::v3_1},       __age_data_t{0x10324, version::unassigned},
    __age_data_t{0x1032D, version::v10_0},      __age_data_t{0x10330, version::v3_1},
    __age_data_t{0x1034B, version::unassigned}, __age_data_t{0x10350, version::v7_0},
    __age_data_t{0x1037B, version::unassigned}, __age_data_t{0x10380, version::v4_0},
    __age_data_t{0x1039E, version::unassigned}, __age_data_t{0x1039F, version::v4_0},
    __age_data_t{0x103A0, version::v4_1},       __age_data_t{0x103C4, version::unassigned},
    __age_data_t{0x103C8, version::v4_1},       __age_data_t{0x103D6, version::unassigned},
    __age_data_t{0x10400, version::v3_1},       __age_data_t{0x10426, version::v4_0},
    __age_data_t{0x10428, version::v3_1},       __age_data_t{0x1044E, version::v4_0},
    __age_data_t{0x1049E, version::unassigned}, __age_data_t{0x104A0, version::v4_0},
    __age_data_t{0x104AA, version::unassigned}, __age_data_t{0x104B0, version::v9_0},
    __age_data_t{0x104D4, version::unassigned}, __age_data_t{0x104D8, version::v9_0},
    __age_data_t{0x104FC, version::unassigned}, __age_data_t{0x10500, version::v7_0},
    __age_data_t{0x10528, version::unassigned}, __age_data_t{0x10530, version::v7_0},
    __age_data_t{0x10564, version::unassigned}, __age_data_t{0x1056F, version::v7_0},
    __age_data_t{0x10570, version::unassigned}, __age_data_t{0x10600, version::v7_0},
    __age_data_t{0x10737, version::unassigned}, __age_data_t{0x10740, version::v7_0},
    __age_data_t{0x10756, version::unassigned}, __age_data_t{0x10760, version::v7_0},
    __age_data_t{0x10768, version::unassigned}, __age_data_t{0x10800, version::v4_0},
    __age_data_t{0x10806, version::unassigned}, __age_data_t{0x10808, version::v4_0},
    __age_data_t{0x10809, version::unassigned}, __age_data_t{0x1080A, version::v4_0},
    __age_data_t{0x10836, version::unassigned}, __age_data_t{0x10837, version::v4_0},
    __age_data_t{0x10839, version::unassigned}, __age_data_t{0x1083C, version::v4_0},
    __age_data_t{0x1083D, version::unassigned}, __age_data_t{0x1083F, version::v4_0},
    __age_data_t{0x10840, version::v5_2},       __age_data_t{0x10856, version::unassigned},
    __age_data_t{0x10857, version::v5_2},       __age_data_t{0x10860, version::v7_0},
    __age_data_t{0x1089F, version::unassigned}, __age_data_t{0x108A7, version::v7_0},
    __age_data_t{0x108B0, version::unassigned}, __age_data_t{0x108E0, version::v8_0},
    __age_data_t{0x108F3, version::unassigned}, __age_data_t{0x108F4, version::v8_0},
    __age_data_t{0x108F6, version::unassigned}, __age_data_t{0x108FB, version::v8_0},
    __age_data_t{0x10900, version::v5_0},       __age_data_t{0x1091A, version::v5_2},
    __age_data_t{0x1091C, version::unassigned}, __age_data_t{0x1091F, version::v5_0},
    __age_data_t{0x10920, version::v5_1},       __age_data_t{0x1093A, version::unassigned},
    __age_data_t{0x1093F, version::v5_1},       __age_data_t{0x10940, version::unassigned},
    __age_data_t{0x10980, version::v6_1},       __age_data_t{0x109B8, version::unassigned},
    __age_data_t{0x109BC, version::v8_0},       __age_data_t{0x109BE, version::v6_1},
    __age_data_t{0x109C0, version::v8_0},       __age_data_t{0x109D0, version::unassigned},
    __age_data_t{0x109D2, version::v8_0},       __age_data_t{0x10A00, version::v4_1},
    __age_data_t{0x10A04, version::unassigned}, __age_data_t{0x10A05, version::v4_1},
    __age_data_t{0x10A07, version::unassigned}, __age_data_t{0x10A0C, version::v4_1},
    __age_data_t{0x10A14, version::unassigned}, __age_data_t{0x10A15, version::v4_1},
    __age_data_t{0x10A18, version::unassigned}, __age_data_t{0x10A19, version::v4_1},
    __age_data_t{0x10A34, version::v11_0},      __age_data_t{0x10A36, version::unassigned},
    __age_data_t{0x10A38, version::v4_1},       __age_data_t{0x10A3B, version::unassigned},
    __age_data_t{0x10A3F, version::v4_1},       __age_data_t{0x10A48, version::v11_0},
    __age_data_t{0x10A49, version::unassigned}, __age_data_t{0x10A50, version::v4_1},
    __age_data_t{0x10A59, version::unassigned}, __age_data_t{0x10A60, version::v5_2},
    __age_data_t{0x10A80, version::v7_0},       __age_data_t{0x10AA0, version::unassigned},
    __age_data_t{0x10AC0, version::v7_0},       __age_data_t{0x10AE7, version::unassigned},
    __age_data_t{0x10AEB, version::v7_0},       __age_data_t{0x10AF7, version::unassigned},
    __age_data_t{0x10B00, version::v5_2},       __age_data_t{0x10B36, version::unassigned},
    __age_data_t{0x10B39, version::v5_2},       __age_data_t{0x10B56, version::unassigned},
    __age_data_t{0x10B58, version::v5_2},       __age_data_t{0x10B73, version::unassigned},
    __age_data_t{0x10B78, version::v5_2},       __age_data_t{0x10B80, version::v7_0},
    __age_data_t{0x10B92, version::unassigned}, __age_data_t{0x10B99, version::v7_0},
    __age_data_t{0x10B9D, version::unassigned}, __age_data_t{0x10BA9, version::v7_0},
    __age_data_t{0x10BB0, version::unassigned}, __age_data_t{0x10C00, version::v5_2},
    __age_data_t{0x10C49, version::unassigned}, __age_data_t{0x10C80, version::v8_0},
    __age_data_t{0x10CB3, version::unassigned}, __age_data_t{0x10CC0, version::v8_0},
    __age_data_t{0x10CF3, version::unassigned}, __age_data_t{0x10CFA, version::v8_0},
    __age_data_t{0x10D00, version::v11_0},      __age_data_t{0x10D28, version::unassigned},
    __age_data_t{0x10D30, version::v11_0},      __age_data_t{0x10D3A, version::unassigned},
    __age_data_t{0x10E60, version::v5_2},       __age_data_t{0x10E7F, version::unassigned},
    __age_data_t{0x10F00, version::v11_0},      __age_data_t{0x10F28, version::unassigned},
    __age_data_t{0x10F30, version::v11_0},      __age_data_t{0x10F5A, version::unassigned},
    __age_data_t{0x10FE0, version::v12_0},      __age_data_t{0x10FF7, version::unassigned},
    __age_data_t{0x11000, version::v6_0},       __age_data_t{0x1104E, version::unassigned},
    __age_data_t{0x11052, version::v6_0},       __age_data_t{0x11070, version::unassigned},
    __age_data_t{0x1107F, version::v7_0},       __age_data_t{0x11080, version::v5_2},
    __age_data_t{0x110C2, version::unassigned}, __age_data_t{0x110CD, version::v11_0},
    __age_data_t{0x110CE, version::unassigned}, __age_data_t{0x110D0, version::v6_1},
    __age_data_t{0x110E9, version::unassigned}, __age_data_t{0x110F0, version::v6_1},
    __age_data_t{0x110FA, version::unassigned}, __age_data_t{0x11100, version::v6_1},
    __age_data_t{0x11135, version::unassigned}, __age_data_t{0x11136, version::v6_1},
    __age_data_t{0x11144, version::v11_0},      __age_data_t{0x11147, version::unassigned},
    __age_data_t{0x11150, version::v7_0},       __age_data_t{0x11177, version::unassigned},
    __age_data_t{0x11180, version::v6_1},       __age_data_t{0x111C9, version::v8_0},
    __age_data_t{0x111CD, version::v7_0},       __age_data_t{0x111CE, version::unassigned},
    __age_data_t{0x111D0, version::v6_1},       __age_data_t{0x111DA, version::v7_0},
    __age_data_t{0x111DB, version::v8_0},       __age_data_t{0x111E0, version::unassigned},
    __age_data_t{0x111E1, version::v7_0},       __age_data_t{0x111F5, version::unassigned},
    __age_data_t{0x11200, version::v7_0},       __age_data_t{0x11212, version::unassigned},
    __age_data_t{0x11213, version::v7_0},       __age_data_t{0x1123E, version::v9_0},
    __age_data_t{0x1123F, version::unassigned}, __age_data_t{0x11280, version::v8_0},
    __age_data_t{0x11287, version::unassigned}, __age_data_t{0x11288, version::v8_0},
    __age_data_t{0x11289, version::unassigned}, __age_data_t{0x1128A, version::v8_0},
    __age_data_t{0x1128E, version::unassigned}, __age_data_t{0x1128F, version::v8_0},
    __age_data_t{0x1129E, version::unassigned}, __age_data_t{0x1129F, version::v8_0},
    __age_data_t{0x112AA, version::unassigned}, __age_data_t{0x112B0, version::v7_0},
    __age_data_t{0x112EB, version::unassigned}, __age_data_t{0x112F0, version::v7_0},
    __age_data_t{0x112FA, version::unassigned}, __age_data_t{0x11300, version::v8_0},
    __age_data_t{0x11301, version::v7_0},       __age_data_t{0x11304, version::unassigned},
    __age_data_t{0x11305, version::v7_0},       __age_data_t{0x1130D, version::unassigned},
    __age_data_t{0x1130F, version::v7_0},       __age_data_t{0x11311, version::unassigned},
    __age_data_t{0x11313, version::v7_0},       __age_data_t{0x11329, version::unassigned},
    __age_data_t{0x1132A, version::v7_0},       __age_data_t{0x11331, version::unassigned},
    __age_data_t{0x11332, version::v7_0},       __age_data_t{0x11334, version::unassigned},
    __age_data_t{0x11335, version::v7_0},       __age_data_t{0x1133A, version::unassigned},
    __age_data_t{0x1133B, version::v11_0},      __age_data_t{0x1133C, version::v7_0},
    __age_data_t{0x11345, version::unassigned}, __age_data_t{0x11347, version::v7_0},
    __age_data_t{0x11349, version::unassigned}, __age_data_t{0x1134B, version::v7_0},
    __age_data_t{0x1134E, version::unassigned}, __age_data_t{0x11350, version::v8_0},
    __age_data_t{0x11351, version::unassigned}, __age_data_t{0x11357, version::v7_0},
    __age_data_t{0x11358, version::unassigned}, __age_data_t{0x1135D, version::v7_0},
    __age_data_t{0x11364, version::unassigned}, __age_data_t{0x11366, version::v7_0},
    __age_data_t{0x1136D, version::unassigned}, __age_data_t{0x11370, version::v7_0},
    __age_data_t{0x11375, version::unassigned}, __age_data_t{0x11400, version::v9_0},
    __age_data_t{0x1145A, version::unassigned}, __age_data_t{0x1145B, version::v9_0},
    __age_data_t{0x1145C, version::unassigned}, __age_data_t{0x1145D, version::v9_0},
    __age_data_t{0x1145E, version::v11_0},      __age_data_t{0x1145F, version::v12_0},
    __age_data_t{0x11460, version::unassigned}, __age_data_t{0x11480, version::v7_0},
    __age_data_t{0x114C8, version::unassigned}, __age_data_t{0x114D0, version::v7_0},
    __age_data_t{0x114DA, version::unassigned}, __age_data_t{0x11580, version::v7_0},
    __age_data_t{0x115B6, version::unassigned}, __age_data_t{0x115B8, version::v7_0},
    __age_data_t{0x115CA, version::v8_0},       __age_data_t{0x115DE, version::unassigned},
    __age_data_t{0x11600, version::v7_0},       __age_data_t{0x11645, version::unassigned},
    __age_data_t{0x11650, version::v7_0},       __age_data_t{0x1165A, version::unassigned},
    __age_data_t{0x11660, version::v9_0},       __age_data_t{0x1166D, version::unassigned},
    __age_data_t{0x11680, version::v6_1},       __age_data_t{0x116B8, version::v12_0},
    __age_data_t{0x116B9, version::unassigned}, __age_data_t{0x116C0, version::v6_1},
    __age_data_t{0x116CA, version::unassigned}, __age_data_t{0x11700, version::v8_0},
    __age_data_t{0x1171A, version::v11_0},      __age_data_t{0x1171B, version::unassigned},
    __age_data_t{0x1171D, version::v8_0},       __age_data_t{0x1172C, version::unassigned},
    __age_data_t{0x11730, version::v8_0},       __age_data_t{0x11740, version::unassigned},
    __age_data_t{0x11800, version::v11_0},      __age_data_t{0x1183C, version::unassigned},
    __age_data_t{0x118A0, version::v7_0},       __age_data_t{0x118F3, version::unassigned},
    __age_data_t{0x118FF, version::v7_0},       __age_data_t{0x11900, version::unassigned},
    __age_data_t{0x119A0, version::v12_0},      __age_data_t{0x119A8, version::unassigned},
    __age_data_t{0x119AA, version::v12_0},      __age_data_t{0x119D8, version::unassigned},
    __age_data_t{0x119DA, version::v12_0},      __age_data_t{0x119E5, version::unassigned},
    __age_data_t{0x11A00, version::v10_0},      __age_data_t{0x11A48, version::unassigned},
    __age_data_t{0x11A50, version::v10_0},      __age_data_t{0x11A84, version::v12_0},
    __age_data_t{0x11A86, version::v10_0},      __age_data_t{0x11A9D, version::v11_0},
    __age_data_t{0x11A9E, version::v10_0},      __age_data_t{0x11AA3, version::unassigned},
    __age_data_t{0x11AC0, version::v7_0},       __age_data_t{0x11AF9, version::unassigned},
    __age_data_t{0x11C00, version::v9_0},       __age_data_t{0x11C09, version::unassigned},
    __age_data_t{0x11C0A, version::v9_0},       __age_data_t{0x11C37, version::unassigned},
    __age_data_t{0x11C38, version::v9_0},       __age_data_t{0x11C46, version::unassigned},
    __age_data_t{0x11C50, version::v9_0},       __age_data_t{0x11C6D, version::unassigned},
    __age_data_t{0x11C70, version::v9_0},       __age_data_t{0x11C90, version::unassigned},
    __age_data_t{0x11C92, version::v9_0},       __age_data_t{0x11CA8, version::unassigned},
    __age_data_t{0x11CA9, version::v9_0},       __age_data_t{0x11CB7, version::unassigned},
    __age_data_t{0x11D00, version::v10_0},      __age_data_t{0x11D07, version::unassigned},
    __age_data_t{0x11D08, version::v10_0},      __age_data_t{0x11D0A, version::unassigned},
    __age_data_t{0x11D0B, version::v10_0},      __age_data_t{0x11D37, version::unassigned},
    __age_data_t{0x11D3A, version::v10_0},      __age_data_t{0x11D3B, version::unassigned},
    __age_data_t{0x11D3C, version::v10_0},      __age_data_t{0x11D3E, version::unassigned},
    __age_data_t{0x11D3F, version::v10_0},      __age_data_t{0x11D48, version::unassigned},
    __age_data_t{0x11D50, version::v10_0},      __age_data_t{0x11D5A, version::unassigned},
    __age_data_t{0x11D60, version::v11_0},      __age_data_t{0x11D66, version::unassigned},
    __age_data_t{0x11D67, version::v11_0},      __age_data_t{0x11D69, version::unassigned},
    __age_data_t{0x11D6A, version::v11_0},      __age_data_t{0x11D8F, version::unassigned},
    __age_data_t{0x11D90, version::v11_0},      __age_data_t{0x11D92, version::unassigned},
    __age_data_t{0x11D93, version::v11_0},      __age_data_t{0x11D99, version::unassigned},
    __age_data_t{0x11DA0, version::v11_0},      __age_data_t{0x11DAA, version::unassigned},
    __age_data_t{0x11EE0, version::v11_0},      __age_data_t{0x11EF9, version::unassigned},
    __age_data_t{0x11FC0, version::v12_0},      __age_data_t{0x11FF2, version::unassigned},
    __age_data_t{0x11FFF, version::v12_0},      __age_data_t{0x12000, version::v5_0},
    __age_data_t{0x1236F, version::v7_0},       __age_data_t{0x12399, version::v8_0},
    __age_data_t{0x1239A, version::unassigned}, __age_data_t{0x12400, version::v5_0},
    __age_data_t{0x12463, version::v7_0},       __age_data_t{0x1246F, version::unassigned},
    __age_data_t{0x12470, version::v5_0},       __age_data_t{0x12474, version::v7_0},
    __age_data_t{0x12475, version::unassigned}, __age_data_t{0x12480, version::v8_0},
    __age_data_t{0x12544, version::unassigned}, __age_data_t{0x13000, version::v5_2},
    __age_data_t{0x1342F, version::unassigned}, __age_data_t{0x13430, version::v12_0},
    __age_data_t{0x13439, version::unassigned}, __age_data_t{0x14400, version::v8_0},
    __age_data_t{0x14647, version::unassigned}, __age_data_t{0x16800, version::v6_0},
    __age_data_t{0x16A39, version::unassigned}, __age_data_t{0x16A40, version::v7_0},
    __age_data_t{0x16A5F, version::unassigned}, __age_data_t{0x16A60, version::v7_0},
    __age_data_t{0x16A6A, version::unassigned}, __age_data_t{0x16A6E, version::v7_0},
    __age_data_t{0x16A70, version::unassigned}, __age_data_t{0x16AD0, version::v7_0},
    __age_data_t{0x16AEE, version::unassigned}, __age_data_t{0x16AF0, version::v7_0},
    __age_data_t{0x16AF6, version::unassigned}, __age_data_t{0x16B00, version::v7_0},
    __age_data_t{0x16B46, version::unassigned}, __age_data_t{0x16B50, version::v7_0},
    __age_data_t{0x16B5A, version::unassigned}, __age_data_t{0x16B5B, version::v7_0},
    __age_data_t{0x16B62, version::unassigned}, __age_data_t{0x16B63, version::v7_0},
    __age_data_t{0x16B78, version::unassigned}, __age_data_t{0x16B7D, version::v7_0},
    __age_data_t{0x16B90, version::unassigned}, __age_data_t{0x16E40, version::v11_0},
    __age_data_t{0x16E9B, version::unassigned}, __age_data_t{0x16F00, version::v6_1},
    __age_data_t{0x16F45, version::v12_0},      __age_data_t{0x16F4B, version::unassigned},
    __age_data_t{0x16F4F, version::v12_0},      __age_data_t{0x16F50, version::v6_1},
    __age_data_t{0x16F7F, version::v12_0},      __age_data_t{0x16F88, version::unassigned},
    __age_data_t{0x16F8F, version::v6_1},       __age_data_t{0x16FA0, version::unassigned},
    __age_data_t{0x16FE0, version::v9_0},       __age_data_t{0x16FE1, version::v10_0},
    __age_data_t{0x16FE2, version::v12_0},      __age_data_t{0x16FE4, version::unassigned},
    __age_data_t{0x17000, version::v9_0},       __age_data_t{0x187ED, version::v11_0},
    __age_data_t{0x187F2, version::v12_0},      __age_data_t{0x187F8, version::unassigned},
    __age_data_t{0x18800, version::v9_0},       __age_data_t{0x18AF3, version::unassigned},
    __age_data_t{0x1B000, version::v6_0},       __age_data_t{0x1B002, version::v10_0},
    __age_data_t{0x1B11F, version::unassigned}, __age_data_t{0x1B150, version::v12_0},
    __age_data_t{0x1B153, version::unassigned}, __age_data_t{0x1B164, version::v12_0},
    __age_data_t{0x1B168, version::unassigned}, __age_data_t{0x1B170, version::v10_0},
    __age_data_t{0x1B2FC, version::unassigned}, __age_data_t{0x1BC00, version::v7_0},
    __age_data_t{0x1BC6B, version::unassigned}, __age_data_t{0x1BC70, version::v7_0},
    __age_data_t{0x1BC7D, version::unassigned}, __age_data_t{0x1BC80, version::v7_0},
    __age_data_t{0x1BC89, version::unassigned}, __age_data_t{0x1BC90, version::v7_0},
    __age_data_t{0x1BC9A, version::unassigned}, __age_data_t{0x1BC9C, version::v7_0},
    __age_data_t{0x1BCA4, version::unassigned}, __age_data_t{0x1D000, version::v3_1},
    __age_data_t{0x1D0F6, version::unassigned}, __age_data_t{0x1D100, version::v3_1},
    __age_data_t{0x1D127, version::unassigned}, __age_data_t{0x1D129, version::v5_1},
    __age_data_t{0x1D12A, version::v3_1},       __age_data_t{0x1D1DE, version::v8_0},
    __age_data_t{0x1D1E9, version::unassigned}, __age_data_t{0x1D200, version::v4_1},
    __age_data_t{0x1D246, version::unassigned}, __age_data_t{0x1D2E0, version::v11_0},
    __age_data_t{0x1D2F4, version::unassigned}, __age_data_t{0x1D300, version::v4_0},
    __age_data_t{0x1D357, version::unassigned}, __age_data_t{0x1D360, version::v5_0},
    __age_data_t{0x1D372, version::v11_0},      __age_data_t{0x1D379, version::unassigned},
    __age_data_t{0x1D400, version::v3_1},       __age_data_t{0x1D455, version::unassigned},
    __age_data_t{0x1D456, version::v3_1},       __age_data_t{0x1D49D, version::unassigned},
    __age_data_t{0x1D49E, version::v3_1},       __age_data_t{0x1D4A0, version::unassigned},
    __age_data_t{0x1D4A2, version::v3_1},       __age_data_t{0x1D4A3, version::unassigned},
    __age_data_t{0x1D4A5, version::v3_1},       __age_data_t{0x1D4A7, version::unassigned},
    __age_data_t{0x1D4A9, version::v3_1},       __age_data_t{0x1D4AD, version::unassigned},
    __age_data_t{0x1D4AE, version::v3_1},       __age_data_t{0x1D4BA, version::unassigned},
    __age_data_t{0x1D4BB, version::v3_1},       __age_data_t{0x1D4BC, version::unassigned},
    __age_data_t{0x1D4BD, version::v3_1},       __age_data_t{0x1D4C1, version::v4_0},
    __age_data_t{0x1D4C2, version::v3_1},       __age_data_t{0x1D4C4, version::unassigned},
    __age_data_t{0x1D4C5, version::v3_1},       __age_data_t{0x1D506, version::unassigned},
    __age_data_t{0x1D507, version::v3_1},       __age_data_t{0x1D50B, version::unassigned},
    __age_data_t{0x1D50D, version::v3_1},       __age_data_t{0x1D515, version::unassigned},
    __age_data_t{0x1D516, version::v3_1},       __age_data_t{0x1D51D, version::unassigned},
    __age_data_t{0x1D51E, version::v3_1},       __age_data_t{0x1D53A, version::unassigned},
    __age_data_t{0x1D53B, version::v3_1},       __age_data_t{0x1D53F, version::unassigned},
    __age_data_t{0x1D540, version::v3_1},       __age_data_t{0x1D545, version::unassigned},
    __age_data_t{0x1D546, version::v3_1},       __age_data_t{0x1D547, version::unassigned},
    __age_data_t{0x1D54A, version::v3_1},       __age_data_t{0x1D551, version::unassigned},
    __age_data_t{0x1D552, version::v3_1},       __age_data_t{0x1D6A4, version::v4_1},
    __age_data_t{0x1D6A6, version::unassigned}, __age_data_t{0x1D6A8, version::v3_1},
    __age_data_t{0x1D7CA, version::v5_0},       __age_data_t{0x1D7CC, version::unassigned},
    __age_data_t{0x1D7CE, version::v3_1},       __age_data_t{0x1D800, version::v8_0},
    __age_data_t{0x1DA8C, version::unassigned}, __age_data_t{0x1DA9B, version::v8_0},
    __age_data_t{0x1DAA0, version::unassigned}, __age_data_t{0x1DAA1, version::v8_0},
    __age_data_t{0x1DAB0, version::unassigned}, __age_data_t{0x1E000, version::v9_0},
    __age_data_t{0x1E007, version::unassigned}, __age_data_t{0x1E008, version::v9_0},
    __age_data_t{0x1E019, version::unassigned}, __age_data_t{0x1E01B, version::v9_0},
    __age_data_t{0x1E022, version::unassigned}, __age_data_t{0x1E023, version::v9_0},
    __age_data_t{0x1E025, version::unassigned}, __age_data_t{0x1E026, version::v9_0},
    __age_data_t{0x1E02B, version::unassigned}, __age_data_t{0x1E100, version::v12_0},
    __age_data_t{0x1E12D, version::unassigned}, __age_data_t{0x1E130, version::v12_0},
    __age_data_t{0x1E13E, version::unassigned}, __age_data_t{0x1E140, version::v12_0},
    __age_data_t{0x1E14A, version::unassigned}, __age_data_t{0x1E14E, version::v12_0},
    __age_data_t{0x1E150, version::unassigned}, __age_data_t{0x1E2C0, version::v12_0},
    __age_data_t{0x1E2FA, version::unassigned}, __age_data_t{0x1E2FF, version::v12_0},
    __age_data_t{0x1E300, version::unassigned}, __age_data_t{0x1E800, version::v7_0},
    __age_data_t{0x1E8C5, version::unassigned}, __age_data_t{0x1E8C7, version::v7_0},
    __age_data_t{0x1E8D7, version::unassigned}, __age_data_t{0x1E900, version::v9_0},
    __age_data_t{0x1E94B, version::v12_0},      __age_data_t{0x1E94C, version::unassigned},
    __age_data_t{0x1E950, version::v9_0},       __age_data_t{0x1E95A, version::unassigned},
    __age_data_t{0x1E95E, version::v9_0},       __age_data_t{0x1E960, version::unassigned},
    __age_data_t{0x1EC71, version::v11_0},      __age_data_t{0x1ECB5, version::unassigned},
    __age_data_t{0x1ED01, version::v12_0},      __age_data_t{0x1ED3E, version::unassigned},
    __age_data_t{0x1EE00, version::v6_1},       __age_data_t{0x1EE04, version::unassigned},
    __age_data_t{0x1EE05, version::v6_1},       __age_data_t{0x1EE20, version::unassigned},
    __age_data_t{0x1EE21, version::v6_1},       __age_data_t{0x1EE23, version::unassigned},
    __age_data_t{0x1EE24, version::v6_1},       __age_data_t{0x1EE25, version::unassigned},
    __age_data_t{0x1EE27, version::v6_1},       __age_data_t{0x1EE28, version::unassigned},
    __age_data_t{0x1EE29, version::v6_1},       __age_data_t{0x1EE33, version::unassigned},
    __age_data_t{0x1EE34, version::v6_1},       __age_data_t{0x1EE38, version::unassigned},
    __age_data_t{0x1EE39, version::v6_1},       __age_data_t{0x1EE3A, version::unassigned},
    __age_data_t{0x1EE3B, version::v6_1},       __age_data_t{0x1EE3C, version::unassigned},
    __age_data_t{0x1EE42, version::v6_1},       __age_data_t{0x1EE43, version::unassigned},
    __age_data_t{0x1EE47, version::v6_1},       __age_data_t{0x1EE48, version::unassigned},
    __age_data_t{0x1EE49, version::v6_1},       __age_data_t{0x1EE4A, version::unassigned},
    __age_data_t{0x1EE4B, version::v6_1},       __age_data_t{0x1EE4C, version::unassigned},
    __age_data_t{0x1EE4D, version::v6_1},       __age_data_t{0x1EE50, version::unassigned},
    __age_data_t{0x1EE51, version::v6_1},       __age_data_t{0x1EE53, version::unassigned},
    __age_data_t{0x1EE54, version::v6_1},       __age_data_t{0x1EE55, version::unassigned},
    __age_data_t{0x1EE57, version::v6_1},       __age_data_t{0x1EE58, version::unassigned},
    __age_data_t{0x1EE59, version::v6_1},       __age_data_t{0x1EE5A, version::unassigned},
    __age_data_t{0x1EE5B, version::v6_1},       __age_data_t{0x1EE5C, version::unassigned},
    __age_data_t{0x1EE5D, version::v6_1},       __age_data_t{0x1EE5E, version::unassigned},
    __age_data_t{0x1EE5F, version::v6_1},       __age_data_t{0x1EE60, version::unassigned},
    __age_data_t{0x1EE61, version::v6_1},       __age_data_t{0x1EE63, version::unassigned},
    __age_data_t{0x1EE64, version::v6_1},       __age_data_t{0x1EE65, version::unassigned},
    __age_data_t{0x1EE67, version::v6_1},       __age_data_t{0x1EE6B, version::unassigned},
    __age_data_t{0x1EE6C, version::v6_1},       __age_data_t{0x1EE73, version::unassigned},
    __age_data_t{0x1EE74, version::v6_1},       __age_data_t{0x1EE78, version::unassigned},
    __age_data_t{0x1EE79, version::v6_1},       __age_data_t{0x1EE7D, version::unassigned},
    __age_data_t{0x1EE7E, version::v6_1},       __age_data_t{0x1EE7F, version::unassigned},
    __age_data_t{0x1EE80, version::v6_1},       __age_data_t{0x1EE8A, version::unassigned},
    __age_data_t{0x1EE8B, version::v6_1},       __age_data_t{0x1EE9C, version::unassigned},
    __age_data_t{0x1EEA1, version::v6_1},       __age_data_t{0x1EEA4, version::unassigned},
    __age_data_t{0x1EEA5, version::v6_1},       __age_data_t{0x1EEAA, version::unassigned},
    __age_data_t{0x1EEAB, version::v6_1},       __age_data_t{0x1EEBC, version::unassigned},
    __age_data_t{0x1EEF0, version::v6_1},       __age_data_t{0x1EEF2, version::unassigned},
    __age_data_t{0x1F000, version::v5_1},       __age_data_t{0x1F02C, version::unassigned},
    __age_data_t{0x1F030, version::v5_1},       __age_data_t{0x1F094, version::unassigned},
    __age_data_t{0x1F0A0, version::v6_0},       __age_data_t{0x1F0AF, version::unassigned},
    __age_data_t{0x1F0B1, version::v6_0},       __age_data_t{0x1F0BF, version::v7_0},
    __age_data_t{0x1F0C0, version::unassigned}, __age_data_t{0x1F0C1, version::v6_0},
    __age_data_t{0x1F0D0, version::unassigned}, __age_data_t{0x1F0D1, version::v6_0},
    __age_data_t{0x1F0E0, version::v7_0},       __age_data_t{0x1F0F6, version::unassigned},
    __age_data_t{0x1F100, version::v5_2},       __age_data_t{0x1F10B, version::v7_0},
    __age_data_t{0x1F10D, version::unassigned}, __age_data_t{0x1F110, version::v5_2},
    __age_data_t{0x1F12F, version::v11_0},      __age_data_t{0x1F130, version::v6_0},
    __age_data_t{0x1F131, version::v5_2},       __age_data_t{0x1F132, version::v6_0},
    __age_data_t{0x1F13D, version::v5_2},       __age_data_t{0x1F13E, version::v6_0},
    __age_data_t{0x1F13F, version::v5_2},       __age_data_t{0x1F140, version::v6_0},
    __age_data_t{0x1F142, version::v5_2},       __age_data_t{0x1F143, version::v6_0},
    __age_data_t{0x1F146, version::v5_2},       __age_data_t{0x1F147, version::v6_0},
    __age_data_t{0x1F14A, version::v5_2},       __age_data_t{0x1F14F, version::v6_0},
    __age_data_t{0x1F157, version::v5_2},       __age_data_t{0x1F158, version::v6_0},
    __age_data_t{0x1F15F, version::v5_2},       __age_data_t{0x1F160, version::v6_0},
    __age_data_t{0x1F16A, version::v6_1},       __age_data_t{0x1F16C, version::v12_0},
    __age_data_t{0x1F16D, version::unassigned}, __age_data_t{0x1F170, version::v6_0},
    __age_data_t{0x1F179, version::v5_2},       __age_data_t{0x1F17A, version::v6_0},
    __age_data_t{0x1F17B, version::v5_2},       __age_data_t{0x1F17D, version::v6_0},
    __age_data_t{0x1F17F, version::v5_2},       __age_data_t{0x1F180, version::v6_0},
    __age_data_t{0x1F18A, version::v5_2},       __age_data_t{0x1F18E, version::v6_0},
    __age_data_t{0x1F190, version::v5_2},       __age_data_t{0x1F191, version::v6_0},
    __age_data_t{0x1F19B, version::v9_0},       __age_data_t{0x1F1AD, version::unassigned},
    __age_data_t{0x1F1E6, version::v6_0},       __age_data_t{0x1F200, version::v5_2},
    __age_data_t{0x1F201, version::v6_0},       __age_data_t{0x1F203, version::unassigned},
    __age_data_t{0x1F210, version::v5_2},       __age_data_t{0x1F232, version::v6_0},
    __age_data_t{0x1F23B, version::v9_0},       __age_data_t{0x1F23C, version::unassigned},
    __age_data_t{0x1F240, version::v5_2},       __age_data_t{0x1F249, version::unassigned},
    __age_data_t{0x1F250, version::v6_0},       __age_data_t{0x1F252, version::unassigned},
    __age_data_t{0x1F260, version::v10_0},      __age_data_t{0x1F266, version::unassigned},
    __age_data_t{0x1F300, version::v6_0},       __age_data_t{0x1F321, version::v7_0},
    __age_data_t{0x1F32D, version::v8_0},       __age_data_t{0x1F330, version::v6_0},
    __age_data_t{0x1F336, version::v7_0},       __age_data_t{0x1F337, version::v6_0},
    __age_data_t{0x1F37D, version::v7_0},       __age_data_t{0x1F37E, version::v8_0},
    __age_data_t{0x1F380, version::v6_0},       __age_data_t{0x1F394, version::v7_0},
    __age_data_t{0x1F3A0, version::v6_0},       __age_data_t{0x1F3C5, version::v7_0},
    __age_data_t{0x1F3C6, version::v6_0},       __age_data_t{0x1F3CB, version::v7_0},
    __age_data_t{0x1F3CF, version::v8_0},       __age_data_t{0x1F3D4, version::v7_0},
    __age_data_t{0x1F3E0, version::v6_0},       __age_data_t{0x1F3F1, version::v7_0},
    __age_data_t{0x1F3F8, version::v8_0},       __age_data_t{0x1F400, version::v6_0},
    __age_data_t{0x1F43F, version::v7_0},       __age_data_t{0x1F440, version::v6_0},
    __age_data_t{0x1F441, version::v7_0},       __age_data_t{0x1F442, version::v6_0},
    __age_data_t{0x1F4F8, version::v7_0},       __age_data_t{0x1F4F9, version::v6_0},
    __age_data_t{0x1F4FD, version::v7_0},       __age_data_t{0x1F4FF, version::v8_0},
    __age_data_t{0x1F500, version::v6_0},       __age_data_t{0x1F53E, version::v7_0},
    __age_data_t{0x1F540, version::v6_1},       __age_data_t{0x1F544, version::v7_0},
    __age_data_t{0x1F54B, version::v8_0},       __age_data_t{0x1F550, version::v6_0},
    __age_data_t{0x1F568, version::v7_0},       __age_data_t{0x1F57A, version::v9_0},
    __age_data_t{0x1F57B, version::v7_0},       __age_data_t{0x1F5A4, version::v9_0},
    __age_data_t{0x1F5A5, version::v7_0},       __age_data_t{0x1F5FB, version::v6_0},
    __age_data_t{0x1F600, version::v6_1},       __age_data_t{0x1F601, version::v6_0},
    __age_data_t{0x1F611, version::v6_1},       __age_data_t{0x1F612, version::v6_0},
    __age_data_t{0x1F615, version::v6_1},       __age_data_t{0x1F616, version::v6_0},
    __age_data_t{0x1F617, version::v6_1},       __age_data_t{0x1F618, version::v6_0},
    __age_data_t{0x1F619, version::v6_1},       __age_data_t{0x1F61A, version::v6_0},
    __age_data_t{0x1F61B, version::v6_1},       __age_data_t{0x1F61C, version::v6_0},
    __age_data_t{0x1F61F, version::v6_1},       __age_data_t{0x1F620, version::v6_0},
    __age_data_t{0x1F626, version::v6_1},       __age_data_t{0x1F628, version::v6_0},
    __age_data_t{0x1F62C, version::v6_1},       __age_data_t{0x1F62D, version::v6_0},
    __age_data_t{0x1F62E, version::v6_1},       __age_data_t{0x1F630, version::v6_0},
    __age_data_t{0x1F634, version::v6_1},       __age_data_t{0x1F635, version::v6_0},
    __age_data_t{0x1F641, version::v7_0},       __age_data_t{0x1F643, version::v8_0},
    __age_data_t{0x1F645, version::v6_0},       __age_data_t{0x1F650, version::v7_0},
    __age_data_t{0x1F680, version::v6_0},       __age_data_t{0x1F6C6, version::v7_0},
    __age_data_t{0x1F6D0, version::v8_0},       __age_data_t{0x1F6D1, version::v9_0},
    __age_data_t{0x1F6D3, version::v10_0},      __age_data_t{0x1F6D5, version::v12_0},
    __age_data_t{0x1F6D6, version::unassigned}, __age_data_t{0x1F6E0, version::v7_0},
    __age_data_t{0x1F6ED, version::unassigned}, __age_data_t{0x1F6F0, version::v7_0},
    __age_data_t{0x1F6F4, version::v9_0},       __age_data_t{0x1F6F7, version::v10_0},
    __age_data_t{0x1F6F9, version::v11_0},      __age_data_t{0x1F6FA, version::v12_0},
    __age_data_t{0x1F6FB, version::unassigned}, __age_data_t{0x1F700, version::v6_0},
    __age_data_t{0x1F774, version::unassigned}, __age_data_t{0x1F780, version::v7_0},
    __age_data_t{0x1F7D5, version::v11_0},      __age_data_t{0x1F7D9, version::unassigned},
    __age_data_t{0x1F7E0, version::v12_0},      __age_data_t{0x1F7EC, version::unassigned},
    __age_data_t{0x1F800, version::v7_0},       __age_data_t{0x1F80C, version::unassigned},
    __age_data_t{0x1F810, version::v7_0},       __age_data_t{0x1F848, version::unassigned},
    __age_data_t{0x1F850, version::v7_0},       __age_data_t{0x1F85A, version::unassigned},
    __age_data_t{0x1F860, version::v7_0},       __age_data_t{0x1F888, version::unassigned},
    __age_data_t{0x1F890, version::v7_0},       __age_data_t{0x1F8AE, version::unassigned},
    __age_data_t{0x1F900, version::v10_0},      __age_data_t{0x1F90C, version::unassigned},
    __age_data_t{0x1F90D, version::v12_0},      __age_data_t{0x1F910, version::v8_0},
    __age_data_t{0x1F919, version::v9_0},       __age_data_t{0x1F91F, version::v10_0},
    __age_data_t{0x1F920, version::v9_0},       __age_data_t{0x1F928, version::v10_0},
    __age_data_t{0x1F930, version::v9_0},       __age_data_t{0x1F931, version::v10_0},
    __age_data_t{0x1F933, version::v9_0},       __age_data_t{0x1F93F, version::v12_0},
    __age_data_t{0x1F940, version::v9_0},       __age_data_t{0x1F94C, version::v10_0},
    __age_data_t{0x1F94D, version::v11_0},      __age_data_t{0x1F950, version::v9_0},
    __age_data_t{0x1F95F, version::v10_0},      __age_data_t{0x1F96C, version::v11_0},
    __age_data_t{0x1F971, version::v12_0},      __age_data_t{0x1F972, version::unassigned},
    __age_data_t{0x1F973, version::v11_0},      __age_data_t{0x1F977, version::unassigned},
    __age_data_t{0x1F97A, version::v11_0},      __age_data_t{0x1F97B, version::v12_0},
    __age_data_t{0x1F97C, version::v11_0},      __age_data_t{0x1F980, version::v8_0},
    __age_data_t{0x1F985, version::v9_0},       __age_data_t{0x1F992, version::v10_0},
    __age_data_t{0x1F998, version::v11_0},      __age_data_t{0x1F9A3, version::unassigned},
    __age_data_t{0x1F9A5, version::v12_0},      __age_data_t{0x1F9AB, version::unassigned},
    __age_data_t{0x1F9AE, version::v12_0},      __age_data_t{0x1F9B0, version::v11_0},
    __age_data_t{0x1F9BA, version::v12_0},      __age_data_t{0x1F9C0, version::v8_0},
    __age_data_t{0x1F9C1, version::v11_0},      __age_data_t{0x1F9C3, version::v12_0},
    __age_data_t{0x1F9CB, version::unassigned}, __age_data_t{0x1F9CD, version::v12_0},
    __age_data_t{0x1F9D0, version::v10_0},      __age_data_t{0x1F9E7, version::v11_0},
    __age_data_t{0x1FA00, version::v12_0},      __age_data_t{0x1FA54, version::unassigned},
    __age_data_t{0x1FA60, version::v11_0},      __age_data_t{0x1FA6E, version::unassigned},
    __age_data_t{0x1FA70, version::v12_0},      __age_data_t{0x1FA74, version::unassigned},
    __age_data_t{0x1FA78, version::v12_0},      __age_data_t{0x1FA7B, version::unassigned},
    __age_data_t{0x1FA80, version::v12_0},      __age_data_t{0x1FA83, version::unassigned},
    __age_data_t{0x1FA90, version::v12_0},      __age_data_t{0x1FA96, version::unassigned},
    __age_data_t{0x20000, version::v3_1},       __age_data_t{0x20002, version::unassigned},
    __age_data_t{0x20064, version::v3_1},       __age_data_t{0x20065, version::unassigned},
    __age_data_t{0x200E2, version::v3_1},       __age_data_t{0x200E3, version::unassigned},
    __age_data_t{0x20121, version::v3_1},       __age_data_t{0x20122, version::unassigned},
    __age_data_t{0x2092A, version::v3_1},       __age_data_t{0x2092B, version::unassigned},
    __age_data_t{0x20983, version::v3_1},       __age_data_t{0x20984, version::unassigned},
    __age_data_t{0x2098C, version::v3_1},       __age_data_t{0x2098D, version::unassigned},
    __age_data_t{0x2099C, version::v3_1},       __age_data_t{0x2099D, version::unassigned},
    __age_data_t{0x20AEA, version::v3_1},       __age_data_t{0x20AEB, version::unassigned},
    __age_data_t{0x20AFD, version::v3_1},       __age_data_t{0x20AFE, version::unassigned},
    __age_data_t{0x20B19, version::v3_1},       __age_data_t{0x20B1A, version::unassigned},
    __age_data_t{0x22390, version::v3_1},       __age_data_t{0x22391, version::unassigned},
    __age_data_t{0x22998, version::v3_1},       __age_data_t{0x22999, version::unassigned},
    __age_data_t{0x23B1B, version::v3_1},       __age_data_t{0x23B1C, version::unassigned},
    __age_data_t{0x2626D, version::v3_1},       __age_data_t{0x2626E, version::unassigned},
    __age_data_t{0x2F800, version::v3_1},       __age_data_t{0x2FA1E, version::unassigned},
    __age_data_t{0xE0001, version::v3_1},       __age_data_t{0xE0002, version::unassigned},
    __age_data_t{0xE0020, version::v3_1},       __age_data_t{0xE0080, version::unassigned},
    __age_data_t{0xE0100, version::v4_0},       __age_data_t{0xE01F0, version::unassigned},
    __age_data_t{0x110000, version::unassigned}};
enum class script {
    adlam,    // 0
    adlm = adlam,
    caucasian_albanian,    // 1
    aghb = caucasian_albanian,
    ahom,      // 2
    arabic,    // 3
    arab = arabic,
    imperial_aramaic,    // 4
    armi = imperial_aramaic,
    armenian,    // 5
    armn = armenian,
    avestan,    // 6
    avst = avestan,
    balinese,    // 7
    bali = balinese,
    bamum,    // 8
    bamu = bamum,
    bassa_vah,    // 9
    bass = bassa_vah,
    batak,    // 10
    batk = batak,
    bengali,    // 11
    beng = bengali,
    bhaiksuki,    // 12
    bhks = bhaiksuki,
    bopomofo,    // 13
    bopo = bopomofo,
    brahmi,    // 14
    brah = brahmi,
    braille,    // 15
    brai = braille,
    buginese,    // 16
    bugi = buginese,
    buhid,    // 17
    buhd = buhid,
    chakma,    // 18
    cakm = chakma,
    canadian_aboriginal,    // 19
    cans = canadian_aboriginal,
    carian,    // 20
    cari = carian,
    cham,        // 21
    cherokee,    // 22
    cher = cherokee,
    coptic,    // 23
    copt = coptic,
    cypriot,    // 24
    cprt = cypriot,
    cyrillic,    // 25
    cyrl = cyrillic,
    devanagari,    // 26
    deva = devanagari,
    dogra,    // 27
    dogr = dogra,
    deseret,    // 28
    dsrt = deseret,
    duployan,    // 29
    dupl = duployan,
    egyptian_hieroglyphs,    // 30
    egyp = egyptian_hieroglyphs,
    elbasan,    // 31
    elba = elbasan,
    elymaic,    // 32
    elym = elymaic,
    ethiopic,    // 33
    ethi = ethiopic,
    georgian,    // 34
    geor = georgian,
    glagolitic,    // 35
    glag = glagolitic,
    gunjala_gondi,    // 36
    gong = gunjala_gondi,
    masaram_gondi,    // 37
    gonm = masaram_gondi,
    gothic,    // 38
    goth = gothic,
    grantha,    // 39
    gran = grantha,
    greek,    // 40
    grek = greek,
    gujarati,    // 41
    gujr = gujarati,
    gurmukhi,    // 42
    guru = gurmukhi,
    hangul,    // 43
    hang = hangul,
    han,    // 44
    hani = han,
    hanunoo,    // 45
    hano = hanunoo,
    hatran,    // 46
    hatr = hatran,
    hebrew,    // 47
    hebr = hebrew,
    hiragana,    // 48
    hira = hiragana,
    anatolian_hieroglyphs,    // 49
    hluw = anatolian_hieroglyphs,
    pahawh_hmong,    // 50
    hmng = pahawh_hmong,
    nyiakeng_puachue_hmong,    // 51
    hmnp = nyiakeng_puachue_hmong,
    katakana_or_hiragana,    // 52
    hrkt = katakana_or_hiragana,
    old_hungarian,    // 53
    hung = old_hungarian,
    old_italic,    // 54
    ital = old_italic,
    javanese,    // 55
    java = javanese,
    kayah_li,    // 56
    kali = kayah_li,
    katakana,    // 57
    kana = katakana,
    kharoshthi,    // 58
    khar = kharoshthi,
    khmer,    // 59
    khmr = khmer,
    khojki,    // 60
    khoj = khojki,
    kannada,    // 61
    knda = kannada,
    kaithi,    // 62
    kthi = kaithi,
    tai_tham,    // 63
    lana = tai_tham,
    lao,    // 64
    laoo = lao,
    latin,    // 65
    latn = latin,
    lepcha,    // 66
    lepc = lepcha,
    limbu,    // 67
    limb = limbu,
    linear_a,    // 68
    lina = linear_a,
    linear_b,    // 69
    linb = linear_b,
    lisu,      // 70
    lycian,    // 71
    lyci = lycian,
    lydian,    // 72
    lydi = lydian,
    mahajani,    // 73
    mahj = mahajani,
    makasar,    // 74
    maka = makasar,
    mandaic,    // 75
    mand = mandaic,
    manichaean,    // 76
    mani = manichaean,
    marchen,    // 77
    marc = marchen,
    medefaidrin,    // 78
    medf = medefaidrin,
    mende_kikakui,    // 79
    mend = mende_kikakui,
    meroitic_cursive,    // 80
    merc = meroitic_cursive,
    meroitic_hieroglyphs,    // 81
    mero = meroitic_hieroglyphs,
    malayalam,    // 82
    mlym = malayalam,
    modi,         // 83
    mongolian,    // 84
    mong = mongolian,
    mro,    // 85
    mroo = mro,
    meetei_mayek,    // 86
    mtei = meetei_mayek,
    multani,    // 87
    mult = multani,
    myanmar,    // 88
    mymr = myanmar,
    nandinagari,    // 89
    nand = nandinagari,
    old_north_arabian,    // 90
    narb = old_north_arabian,
    nabataean,    // 91
    nbat = nabataean,
    newa,    // 92
    nko,     // 93
    nkoo = nko,
    nushu,    // 94
    nshu = nushu,
    ogham,    // 95
    ogam = ogham,
    ol_chiki,    // 96
    olck = ol_chiki,
    old_turkic,    // 97
    orkh = old_turkic,
    oriya,    // 98
    orya = oriya,
    osage,    // 99
    osge = osage,
    osmanya,    // 100
    osma = osmanya,
    palmyrene,    // 101
    palm = palmyrene,
    pau_cin_hau,    // 102
    pauc = pau_cin_hau,
    old_permic,    // 103
    perm = old_permic,
    phags_pa,    // 104
    phag = phags_pa,
    inscriptional_pahlavi,    // 105
    phli = inscriptional_pahlavi,
    psalter_pahlavi,    // 106
    phlp = psalter_pahlavi,
    phoenician,    // 107
    phnx = phoenician,
    miao,    // 108
    plrd = miao,
    inscriptional_parthian,    // 109
    prti = inscriptional_parthian,
    rejang,    // 110
    rjng = rejang,
    hanifi_rohingya,    // 111
    rohg = hanifi_rohingya,
    runic,    // 112
    runr = runic,
    samaritan,    // 113
    samr = samaritan,
    old_south_arabian,    // 114
    sarb = old_south_arabian,
    saurashtra,    // 115
    saur = saurashtra,
    signwriting,    // 116
    sgnw = signwriting,
    shavian,    // 117
    shaw = shavian,
    sharada,    // 118
    shrd = sharada,
    siddham,    // 119
    sidd = siddham,
    khudawadi,    // 120
    sind = khudawadi,
    sinhala,    // 121
    sinh = sinhala,
    sogdian,    // 122
    sogd = sogdian,
    old_sogdian,    // 123
    sogo = old_sogdian,
    sora_sompeng,    // 124
    sora = sora_sompeng,
    soyombo,    // 125
    soyo = soyombo,
    sundanese,    // 126
    sund = sundanese,
    syloti_nagri,    // 127
    sylo = syloti_nagri,
    syriac,    // 128
    syrc = syriac,
    tagbanwa,    // 129
    tagb = tagbanwa,
    takri,    // 130
    takr = takri,
    tai_le,    // 131
    tale = tai_le,
    new_tai_lue,    // 132
    talu = new_tai_lue,
    tamil,    // 133
    taml = tamil,
    tangut,    // 134
    tang = tangut,
    tai_viet,    // 135
    tavt = tai_viet,
    telugu,    // 136
    telu = telugu,
    tifinagh,    // 137
    tfng = tifinagh,
    tagalog,    // 138
    tglg = tagalog,
    thaana,    // 139
    thaa = thaana,
    thai,       // 140
    tibetan,    // 141
    tibt = tibetan,
    tirhuta,    // 142
    tirh = tirhuta,
    ugaritic,    // 143
    ugar = ugaritic,
    vai,    // 144
    vaii = vai,
    warang_citi,    // 145
    wara = warang_citi,
    wancho,    // 146
    wcho = wancho,
    old_persian,    // 147
    xpeo = old_persian,
    cuneiform,    // 148
    xsux = cuneiform,
    yi,    // 149
    yiii = yi,
    zanabazar_square,    // 150
    zanb = zanabazar_square,
    inherited,    // 151
    zinh = inherited,
    common,    // 152
    zyyy = common,
    unknown,    // 153
    zzzz = unknown,
    __max
};
static constexpr const std::array __scripts_names = {
    __string_with_idx{"adlam", 0},
    __string_with_idx{"adlm", 0},
    __string_with_idx{"aghb", 1},
    __string_with_idx{"ahom", 2},
    __string_with_idx{"anatolian_hieroglyphs", 49},
    __string_with_idx{"arab", 3},
    __string_with_idx{"arabic", 3},
    __string_with_idx{"armenian", 5},
    __string_with_idx{"armi", 4},
    __string_with_idx{"armn", 5},
    __string_with_idx{"avestan", 6},
    __string_with_idx{"avst", 6},
    __string_with_idx{"bali", 7},
    __string_with_idx{"balinese", 7},
    __string_with_idx{"bamu", 8},
    __string_with_idx{"bamum", 8},
    __string_with_idx{"bass", 9},
    __string_with_idx{"bassa_vah", 9},
    __string_with_idx{"batak", 10},
    __string_with_idx{"batk", 10},
    __string_with_idx{"beng", 11},
    __string_with_idx{"bengali", 11},
    __string_with_idx{"bhaiksuki", 12},
    __string_with_idx{"bhks", 12},
    __string_with_idx{"bopo", 13},
    __string_with_idx{"bopomofo", 13},
    __string_with_idx{"brah", 14},
    __string_with_idx{"brahmi", 14},
    __string_with_idx{"brai", 15},
    __string_with_idx{"braille", 15},
    __string_with_idx{"bugi", 16},
    __string_with_idx{"buginese", 16},
    __string_with_idx{"buhd", 17},
    __string_with_idx{"buhid", 17},
    __string_with_idx{"cakm", 18},
    __string_with_idx{"canadian_aboriginal", 19},
    __string_with_idx{"cans", 19},
    __string_with_idx{"cari", 20},
    __string_with_idx{"carian", 20},
    __string_with_idx{"caucasian_albanian", 1},
    __string_with_idx{"chakma", 18},
    __string_with_idx{"cham", 21},
    __string_with_idx{"cher", 22},
    __string_with_idx{"cherokee", 22},
    __string_with_idx{"common", 152},
    __string_with_idx{"copt", 23},
    __string_with_idx{"coptic", 23},
    __string_with_idx{"cprt", 24},
    __string_with_idx{"cuneiform", 148},
    __string_with_idx{"cypriot", 24},
    __string_with_idx{"cyrillic", 25},
    __string_with_idx{"cyrl", 25},
    __string_with_idx{"deseret", 28},
    __string_with_idx{"deva", 26},
    __string_with_idx{"devanagari", 26},
    __string_with_idx{"dogr", 27},
    __string_with_idx{"dogra", 27},
    __string_with_idx{"dsrt", 28},
    __string_with_idx{"dupl", 29},
    __string_with_idx{"duployan", 29},
    __string_with_idx{"egyp", 30},
    __string_with_idx{"egyptian_hieroglyphs", 30},
    __string_with_idx{"elba", 31},
    __string_with_idx{"elbasan", 31},
    __string_with_idx{"elym", 32},
    __string_with_idx{"elymaic", 32},
    __string_with_idx{"ethi", 33},
    __string_with_idx{"ethiopic", 33},
    __string_with_idx{"geor", 34},
    __string_with_idx{"georgian", 34},
    __string_with_idx{"glag", 35},
    __string_with_idx{"glagolitic", 35},
    __string_with_idx{"gong", 36},
    __string_with_idx{"gonm", 37},
    __string_with_idx{"goth", 38},
    __string_with_idx{"gothic", 38},
    __string_with_idx{"gran", 39},
    __string_with_idx{"grantha", 39},
    __string_with_idx{"greek", 40},
    __string_with_idx{"grek", 40},
    __string_with_idx{"gujarati", 41},
    __string_with_idx{"gujr", 41},
    __string_with_idx{"gunjala_gondi", 36},
    __string_with_idx{"gurmukhi", 42},
    __string_with_idx{"guru", 42},
    __string_with_idx{"han", 44},
    __string_with_idx{"hang", 43},
    __string_with_idx{"hangul", 43},
    __string_with_idx{"hani", 44},
    __string_with_idx{"hanifi_rohingya", 111},
    __string_with_idx{"hano", 45},
    __string_with_idx{"hanunoo", 45},
    __string_with_idx{"hatr", 46},
    __string_with_idx{"hatran", 46},
    __string_with_idx{"hebr", 47},
    __string_with_idx{"hebrew", 47},
    __string_with_idx{"hira", 48},
    __string_with_idx{"hiragana", 48},
    __string_with_idx{"hluw", 49},
    __string_with_idx{"hmng", 50},
    __string_with_idx{"hmnp", 51},
    __string_with_idx{"hrkt", 52},
    __string_with_idx{"hung", 53},
    __string_with_idx{"imperial_aramaic", 4},
    __string_with_idx{"inherited", 151},
    __string_with_idx{"inscriptional_pahlavi", 105},
    __string_with_idx{"inscriptional_parthian", 109},
    __string_with_idx{"ital", 54},
    __string_with_idx{"java", 55},
    __string_with_idx{"javanese", 55},
    __string_with_idx{"kaithi", 62},
    __string_with_idx{"kali", 56},
    __string_with_idx{"kana", 57},
    __string_with_idx{"kannada", 61},
    __string_with_idx{"katakana", 57},
    __string_with_idx{"katakana_or_hiragana", 52},
    __string_with_idx{"kayah_li", 56},
    __string_with_idx{"khar", 58},
    __string_with_idx{"kharoshthi", 58},
    __string_with_idx{"khmer", 59},
    __string_with_idx{"khmr", 59},
    __string_with_idx{"khoj", 60},
    __string_with_idx{"khojki", 60},
    __string_with_idx{"khudawadi", 120},
    __string_with_idx{"knda", 61},
    __string_with_idx{"kthi", 62},
    __string_with_idx{"lana", 63},
    __string_with_idx{"lao", 64},
    __string_with_idx{"laoo", 64},
    __string_with_idx{"latin", 65},
    __string_with_idx{"latn", 65},
    __string_with_idx{"lepc", 66},
    __string_with_idx{"lepcha", 66},
    __string_with_idx{"limb", 67},
    __string_with_idx{"limbu", 67},
    __string_with_idx{"lina", 68},
    __string_with_idx{"linb", 69},
    __string_with_idx{"linear_a", 68},
    __string_with_idx{"linear_b", 69},
    __string_with_idx{"lisu", 70},
    __string_with_idx{"lyci", 71},
    __string_with_idx{"lycian", 71},
    __string_with_idx{"lydi", 72},
    __string_with_idx{"lydian", 72},
    __string_with_idx{"mahajani", 73},
    __string_with_idx{"mahj", 73},
    __string_with_idx{"maka", 74},
    __string_with_idx{"makasar", 74},
    __string_with_idx{"malayalam", 82},
    __string_with_idx{"mand", 75},
    __string_with_idx{"mandaic", 75},
    __string_with_idx{"mani", 76},
    __string_with_idx{"manichaean", 76},
    __string_with_idx{"marc", 77},
    __string_with_idx{"marchen", 77},
    __string_with_idx{"masaram_gondi", 37},
    __string_with_idx{"medefaidrin", 78},
    __string_with_idx{"medf", 78},
    __string_with_idx{"meetei_mayek", 86},
    __string_with_idx{"mend", 79},
    __string_with_idx{"mende_kikakui", 79},
    __string_with_idx{"merc", 80},
    __string_with_idx{"mero", 81},
    __string_with_idx{"meroitic_cursive", 80},
    __string_with_idx{"meroitic_hieroglyphs", 81},
    __string_with_idx{"miao", 108},
    __string_with_idx{"mlym", 82},
    __string_with_idx{"modi", 83},
    __string_with_idx{"mong", 84},
    __string_with_idx{"mongolian", 84},
    __string_with_idx{"mro", 85},
    __string_with_idx{"mroo", 85},
    __string_with_idx{"mtei", 86},
    __string_with_idx{"mult", 87},
    __string_with_idx{"multani", 87},
    __string_with_idx{"myanmar", 88},
    __string_with_idx{"mymr", 88},
    __string_with_idx{"nabataean", 91},
    __string_with_idx{"nand", 89},
    __string_with_idx{"nandinagari", 89},
    __string_with_idx{"narb", 90},
    __string_with_idx{"nbat", 91},
    __string_with_idx{"new_tai_lue", 132},
    __string_with_idx{"newa", 92},
    __string_with_idx{"nko", 93},
    __string_with_idx{"nkoo", 93},
    __string_with_idx{"nshu", 94},
    __string_with_idx{"nushu", 94},
    __string_with_idx{"nyiakeng_puachue_hmong", 51},
    __string_with_idx{"ogam", 95},
    __string_with_idx{"ogham", 95},
    __string_with_idx{"ol_chiki", 96},
    __string_with_idx{"olck", 96},
    __string_with_idx{"old_hungarian", 53},
    __string_with_idx{"old_italic", 54},
    __string_with_idx{"old_north_arabian", 90},
    __string_with_idx{"old_permic", 103},
    __string_with_idx{"old_persian", 147},
    __string_with_idx{"old_sogdian", 123},
    __string_with_idx{"old_south_arabian", 114},
    __string_with_idx{"old_turkic", 97},
    __string_with_idx{"oriya", 98},
    __string_with_idx{"orkh", 97},
    __string_with_idx{"orya", 98},
    __string_with_idx{"osage", 99},
    __string_with_idx{"osge", 99},
    __string_with_idx{"osma", 100},
    __string_with_idx{"osmanya", 100},
    __string_with_idx{"pahawh_hmong", 50},
    __string_with_idx{"palm", 101},
    __string_with_idx{"palmyrene", 101},
    __string_with_idx{"pau_cin_hau", 102},
    __string_with_idx{"pauc", 102},
    __string_with_idx{"perm", 103},
    __string_with_idx{"phag", 104},
    __string_with_idx{"phags_pa", 104},
    __string_with_idx{"phli", 105},
    __string_with_idx{"phlp", 106},
    __string_with_idx{"phnx", 107},
    __string_with_idx{"phoenician", 107},
    __string_with_idx{"plrd", 108},
    __string_with_idx{"prti", 109},
    __string_with_idx{"psalter_pahlavi", 106},
    __string_with_idx{"rejang", 110},
    __string_with_idx{"rjng", 110},
    __string_with_idx{"rohg", 111},
    __string_with_idx{"runic", 112},
    __string_with_idx{"runr", 112},
    __string_with_idx{"samaritan", 113},
    __string_with_idx{"samr", 113},
    __string_with_idx{"sarb", 114},
    __string_with_idx{"saur", 115},
    __string_with_idx{"saurashtra", 115},
    __string_with_idx{"sgnw", 116},
    __string_with_idx{"sharada", 118},
    __string_with_idx{"shavian", 117},
    __string_with_idx{"shaw", 117},
    __string_with_idx{"shrd", 118},
    __string_with_idx{"sidd", 119},
    __string_with_idx{"siddham", 119},
    __string_with_idx{"signwriting", 116},
    __string_with_idx{"sind", 120},
    __string_with_idx{"sinh", 121},
    __string_with_idx{"sinhala", 121},
    __string_with_idx{"sogd", 122},
    __string_with_idx{"sogdian", 122},
    __string_with_idx{"sogo", 123},
    __string_with_idx{"sora", 124},
    __string_with_idx{"sora_sompeng", 124},
    __string_with_idx{"soyo", 125},
    __string_with_idx{"soyombo", 125},
    __string_with_idx{"sund", 126},
    __string_with_idx{"sundanese", 126},
    __string_with_idx{"sylo", 127},
    __string_with_idx{"syloti_nagri", 127},
    __string_with_idx{"syrc", 128},
    __string_with_idx{"syriac", 128},
    __string_with_idx{"tagalog", 138},
    __string_with_idx{"tagb", 129},
    __string_with_idx{"tagbanwa", 129},
    __string_with_idx{"tai_le", 131},
    __string_with_idx{"tai_tham", 63},
    __string_with_idx{"tai_viet", 135},
    __string_with_idx{"takr", 130},
    __string_with_idx{"takri", 130},
    __string_with_idx{"tale", 131},
    __string_with_idx{"talu", 132},
    __string_with_idx{"tamil", 133},
    __string_with_idx{"taml", 133},
    __string_with_idx{"tang", 134},
    __string_with_idx{"tangut", 134},
    __string_with_idx{"tavt", 135},
    __string_with_idx{"telu", 136},
    __string_with_idx{"telugu", 136},
    __string_with_idx{"tfng", 137},
    __string_with_idx{"tglg", 138},
    __string_with_idx{"thaa", 139},
    __string_with_idx{"thaana", 139},
    __string_with_idx{"thai", 140},
    __string_with_idx{"tibetan", 141},
    __string_with_idx{"tibt", 141},
    __string_with_idx{"tifinagh", 137},
    __string_with_idx{"tirh", 142},
    __string_with_idx{"tirhuta", 142},
    __string_with_idx{"ugar", 143},
    __string_with_idx{"ugaritic", 143},
    __string_with_idx{"unknown", 153},
    __string_with_idx{"vai", 144},
    __string_with_idx{"vaii", 144},
    __string_with_idx{"wancho", 146},
    __string_with_idx{"wara", 145},
    __string_with_idx{"warang_citi", 145},
    __string_with_idx{"wcho", 146},
    __string_with_idx{"xpeo", 147},
    __string_with_idx{"xsux", 148},
    __string_with_idx{"yi", 149},
    __string_with_idx{"yiii", 149},
    __string_with_idx{"zanabazar_square", 150},
    __string_with_idx{"zanb", 150},
    __string_with_idx{"zinh", 151},
    __string_with_idx{"zyyy", 152},
    __string_with_idx{"zzzz", 153}};
struct __script_data_t {
    char32_t first;
    script s;
};
template<auto N>
struct __script_data;
template<>
struct __script_data<0> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0000, script::zyyy},  __script_data_t{0x0041, script::latn},
        __script_data_t{0x005B, script::zyyy},  __script_data_t{0x0061, script::latn},
        __script_data_t{0x007B, script::zyyy},  __script_data_t{0x00AA, script::latn},
        __script_data_t{0x00AB, script::zyyy},  __script_data_t{0x00BA, script::latn},
        __script_data_t{0x00BB, script::zyyy},  __script_data_t{0x00C0, script::latn},
        __script_data_t{0x00D7, script::zyyy},  __script_data_t{0x00D8, script::latn},
        __script_data_t{0x00F7, script::zyyy},  __script_data_t{0x00F8, script::latn},
        __script_data_t{0x02B9, script::zyyy},  __script_data_t{0x02E0, script::latn},
        __script_data_t{0x02E5, script::zyyy},  __script_data_t{0x02EA, script::bopo},
        __script_data_t{0x02EC, script::zyyy},  __script_data_t{0x0300, script::zinh},
        __script_data_t{0x0370, script::grek},  __script_data_t{0x0374, script::zyyy},
        __script_data_t{0x0375, script::grek},  __script_data_t{0x0378, script::zzzz},
        __script_data_t{0x037A, script::grek},  __script_data_t{0x037E, script::zyyy},
        __script_data_t{0x037F, script::grek},  __script_data_t{0x0380, script::zzzz},
        __script_data_t{0x0384, script::grek},  __script_data_t{0x0385, script::zyyy},
        __script_data_t{0x0386, script::grek},  __script_data_t{0x0387, script::zyyy},
        __script_data_t{0x0388, script::grek},  __script_data_t{0x038B, script::zzzz},
        __script_data_t{0x038C, script::grek},  __script_data_t{0x038D, script::zzzz},
        __script_data_t{0x038E, script::grek},  __script_data_t{0x03A2, script::zzzz},
        __script_data_t{0x03A3, script::grek},  __script_data_t{0x03E2, script::copt},
        __script_data_t{0x03F0, script::grek},  __script_data_t{0x0400, script::cyrl},
        __script_data_t{0x0485, script::zinh},  __script_data_t{0x0487, script::cyrl},
        __script_data_t{0x0530, script::zzzz},  __script_data_t{0x0531, script::armn},
        __script_data_t{0x0557, script::zzzz},  __script_data_t{0x0559, script::armn},
        __script_data_t{0x0589, script::zyyy},  __script_data_t{0x058A, script::armn},
        __script_data_t{0x058B, script::zzzz},  __script_data_t{0x058D, script::armn},
        __script_data_t{0x0590, script::zzzz},  __script_data_t{0x0591, script::hebr},
        __script_data_t{0x05C8, script::zzzz},  __script_data_t{0x05D0, script::hebr},
        __script_data_t{0x05EB, script::zzzz},  __script_data_t{0x05EF, script::hebr},
        __script_data_t{0x05F5, script::zzzz},  __script_data_t{0x0600, script::arab},
        __script_data_t{0x0605, script::zyyy},  __script_data_t{0x0606, script::arab},
        __script_data_t{0x060C, script::zyyy},  __script_data_t{0x060D, script::arab},
        __script_data_t{0x061B, script::zyyy},  __script_data_t{0x061C, script::arab},
        __script_data_t{0x061D, script::zzzz},  __script_data_t{0x061E, script::arab},
        __script_data_t{0x061F, script::zyyy},  __script_data_t{0x0620, script::arab},
        __script_data_t{0x0640, script::zyyy},  __script_data_t{0x0641, script::arab},
        __script_data_t{0x064B, script::zinh},  __script_data_t{0x0656, script::arab},
        __script_data_t{0x0670, script::zinh},  __script_data_t{0x0671, script::arab},
        __script_data_t{0x06DD, script::zyyy},  __script_data_t{0x06DE, script::arab},
        __script_data_t{0x0700, script::syrc},  __script_data_t{0x070E, script::zzzz},
        __script_data_t{0x070F, script::syrc},  __script_data_t{0x074B, script::zzzz},
        __script_data_t{0x074D, script::syrc},  __script_data_t{0x0750, script::arab},
        __script_data_t{0x0780, script::thaa},  __script_data_t{0x07B2, script::zzzz},
        __script_data_t{0x07C0, script::nkoo},  __script_data_t{0x07FB, script::zzzz},
        __script_data_t{0x07FD, script::nkoo},  __script_data_t{0x0800, script::samr},
        __script_data_t{0x082E, script::zzzz},  __script_data_t{0x0830, script::samr},
        __script_data_t{0x083F, script::zzzz},  __script_data_t{0x0840, script::mand},
        __script_data_t{0x085C, script::zzzz},  __script_data_t{0x085E, script::mand},
        __script_data_t{0x085F, script::zzzz},  __script_data_t{0x0860, script::syrc},
        __script_data_t{0x086B, script::zzzz},  __script_data_t{0x08A0, script::arab},
        __script_data_t{0x08B5, script::zzzz},  __script_data_t{0x08B6, script::arab},
        __script_data_t{0x08BE, script::zzzz},  __script_data_t{0x08D3, script::arab},
        __script_data_t{0x08E2, script::zyyy},  __script_data_t{0x08E3, script::arab},
        __script_data_t{0x0900, script::deva},  __script_data_t{0x0951, script::zinh},
        __script_data_t{0x0955, script::deva},  __script_data_t{0x0964, script::zyyy},
        __script_data_t{0x0966, script::deva},  __script_data_t{0x0980, script::beng},
        __script_data_t{0x0984, script::zzzz},  __script_data_t{0x0985, script::beng},
        __script_data_t{0x098D, script::zzzz},  __script_data_t{0x098F, script::beng},
        __script_data_t{0x0991, script::zzzz},  __script_data_t{0x0993, script::beng},
        __script_data_t{0x09A9, script::zzzz},  __script_data_t{0x09AA, script::beng},
        __script_data_t{0x09B1, script::zzzz},  __script_data_t{0x09B2, script::beng},
        __script_data_t{0x09B3, script::zzzz},  __script_data_t{0x09B6, script::beng},
        __script_data_t{0x09BA, script::zzzz},  __script_data_t{0x09BC, script::beng},
        __script_data_t{0x09C5, script::zzzz},  __script_data_t{0x09C7, script::beng},
        __script_data_t{0x09C9, script::zzzz},  __script_data_t{0x09CB, script::beng},
        __script_data_t{0x09CF, script::zzzz},  __script_data_t{0x09D7, script::beng},
        __script_data_t{0x09D8, script::zzzz},  __script_data_t{0x09DC, script::beng},
        __script_data_t{0x09DE, script::zzzz},  __script_data_t{0x09DF, script::beng},
        __script_data_t{0x09E4, script::zzzz},  __script_data_t{0x09E6, script::beng},
        __script_data_t{0x09FF, script::zzzz},  __script_data_t{0x0A01, script::guru},
        __script_data_t{0x0A04, script::zzzz},  __script_data_t{0x0A05, script::guru},
        __script_data_t{0x0A0B, script::zzzz},  __script_data_t{0x0A0F, script::guru},
        __script_data_t{0x0A11, script::zzzz},  __script_data_t{0x0A13, script::guru},
        __script_data_t{0x0A29, script::zzzz},  __script_data_t{0x0A2A, script::guru},
        __script_data_t{0x0A31, script::zzzz},  __script_data_t{0x0A32, script::guru},
        __script_data_t{0x0A34, script::zzzz},  __script_data_t{0x0A35, script::guru},
        __script_data_t{0x0A37, script::zzzz},  __script_data_t{0x0A38, script::guru},
        __script_data_t{0x0A3A, script::zzzz},  __script_data_t{0x0A3C, script::guru},
        __script_data_t{0x0A3D, script::zzzz},  __script_data_t{0x0A3E, script::guru},
        __script_data_t{0x0A43, script::zzzz},  __script_data_t{0x0A47, script::guru},
        __script_data_t{0x0A49, script::zzzz},  __script_data_t{0x0A4B, script::guru},
        __script_data_t{0x0A4E, script::zzzz},  __script_data_t{0x0A51, script::guru},
        __script_data_t{0x0A52, script::zzzz},  __script_data_t{0x0A59, script::guru},
        __script_data_t{0x0A5D, script::zzzz},  __script_data_t{0x0A5E, script::guru},
        __script_data_t{0x0A5F, script::zzzz},  __script_data_t{0x0A66, script::guru},
        __script_data_t{0x0A77, script::zzzz},  __script_data_t{0x0A81, script::gujr},
        __script_data_t{0x0A84, script::zzzz},  __script_data_t{0x0A85, script::gujr},
        __script_data_t{0x0A8E, script::zzzz},  __script_data_t{0x0A8F, script::gujr},
        __script_data_t{0x0A92, script::zzzz},  __script_data_t{0x0A93, script::gujr},
        __script_data_t{0x0AA9, script::zzzz},  __script_data_t{0x0AAA, script::gujr},
        __script_data_t{0x0AB1, script::zzzz},  __script_data_t{0x0AB2, script::gujr},
        __script_data_t{0x0AB4, script::zzzz},  __script_data_t{0x0AB5, script::gujr},
        __script_data_t{0x0ABA, script::zzzz},  __script_data_t{0x0ABC, script::gujr},
        __script_data_t{0x0AC6, script::zzzz},  __script_data_t{0x0AC7, script::gujr},
        __script_data_t{0x0ACA, script::zzzz},  __script_data_t{0x0ACB, script::gujr},
        __script_data_t{0x0ACE, script::zzzz},  __script_data_t{0x0AD0, script::gujr},
        __script_data_t{0x0AD1, script::zzzz},  __script_data_t{0x0AE0, script::gujr},
        __script_data_t{0x0AE4, script::zzzz},  __script_data_t{0x0AE6, script::gujr},
        __script_data_t{0x0AF2, script::zzzz},  __script_data_t{0x0AF9, script::gujr},
        __script_data_t{0x0B00, script::zzzz},  __script_data_t{0x0B01, script::orya},
        __script_data_t{0x0B04, script::zzzz},  __script_data_t{0x0B05, script::orya},
        __script_data_t{0x0B0D, script::zzzz},  __script_data_t{0x0B0F, script::orya},
        __script_data_t{0x0B11, script::zzzz},  __script_data_t{0x0B13, script::orya},
        __script_data_t{0x0B29, script::zzzz},  __script_data_t{0x0B2A, script::orya},
        __script_data_t{0x0B31, script::zzzz},  __script_data_t{0x0B32, script::orya},
        __script_data_t{0x0B34, script::zzzz},  __script_data_t{0x0B35, script::orya},
        __script_data_t{0x0B3A, script::zzzz},  __script_data_t{0x0B3C, script::orya},
        __script_data_t{0x0B45, script::zzzz},  __script_data_t{0x0B47, script::orya},
        __script_data_t{0x0B49, script::zzzz},  __script_data_t{0x0B4B, script::orya},
        __script_data_t{0x0B4E, script::zzzz},  __script_data_t{0x0B56, script::orya},
        __script_data_t{0x0B58, script::zzzz},  __script_data_t{0x0B5C, script::orya},
        __script_data_t{0x0B5E, script::zzzz},  __script_data_t{0x0B5F, script::orya},
        __script_data_t{0x0B64, script::zzzz},  __script_data_t{0x0B66, script::orya},
        __script_data_t{0x0B78, script::zzzz},  __script_data_t{0x0B82, script::taml},
        __script_data_t{0x0B84, script::zzzz},  __script_data_t{0x0B85, script::taml},
        __script_data_t{0x0B8B, script::zzzz},  __script_data_t{0x0B8E, script::taml},
        __script_data_t{0x0B91, script::zzzz},  __script_data_t{0x0B92, script::taml},
        __script_data_t{0x0B96, script::zzzz},  __script_data_t{0x0B99, script::taml},
        __script_data_t{0x0B9B, script::zzzz},  __script_data_t{0x0B9C, script::taml},
        __script_data_t{0x0B9D, script::zzzz},  __script_data_t{0x0B9E, script::taml},
        __script_data_t{0x0BA0, script::zzzz},  __script_data_t{0x0BA3, script::taml},
        __script_data_t{0x0BA5, script::zzzz},  __script_data_t{0x0BA8, script::taml},
        __script_data_t{0x0BAB, script::zzzz},  __script_data_t{0x0BAE, script::taml},
        __script_data_t{0x0BBA, script::zzzz},  __script_data_t{0x0BBE, script::taml},
        __script_data_t{0x0BC3, script::zzzz},  __script_data_t{0x0BC6, script::taml},
        __script_data_t{0x0BC9, script::zzzz},  __script_data_t{0x0BCA, script::taml},
        __script_data_t{0x0BCE, script::zzzz},  __script_data_t{0x0BD0, script::taml},
        __script_data_t{0x0BD1, script::zzzz},  __script_data_t{0x0BD7, script::taml},
        __script_data_t{0x0BD8, script::zzzz},  __script_data_t{0x0BE6, script::taml},
        __script_data_t{0x0BFB, script::zzzz},  __script_data_t{0x0C00, script::telu},
        __script_data_t{0x0C0D, script::zzzz},  __script_data_t{0x0C0E, script::telu},
        __script_data_t{0x0C11, script::zzzz},  __script_data_t{0x0C12, script::telu},
        __script_data_t{0x0C29, script::zzzz},  __script_data_t{0x0C2A, script::telu},
        __script_data_t{0x0C3A, script::zzzz},  __script_data_t{0x0C3D, script::telu},
        __script_data_t{0x0C45, script::zzzz},  __script_data_t{0x0C46, script::telu},
        __script_data_t{0x0C49, script::zzzz},  __script_data_t{0x0C4A, script::telu},
        __script_data_t{0x0C4E, script::zzzz},  __script_data_t{0x0C55, script::telu},
        __script_data_t{0x0C57, script::zzzz},  __script_data_t{0x0C58, script::telu},
        __script_data_t{0x0C5B, script::zzzz},  __script_data_t{0x0C60, script::telu},
        __script_data_t{0x0C64, script::zzzz},  __script_data_t{0x0C66, script::telu},
        __script_data_t{0x0C70, script::zzzz},  __script_data_t{0x0C77, script::telu},
        __script_data_t{0x0C80, script::knda},  __script_data_t{0x0C8D, script::zzzz},
        __script_data_t{0x0C8E, script::knda},  __script_data_t{0x0C91, script::zzzz},
        __script_data_t{0x0C92, script::knda},  __script_data_t{0x0CA9, script::zzzz},
        __script_data_t{0x0CAA, script::knda},  __script_data_t{0x0CB4, script::zzzz},
        __script_data_t{0x0CB5, script::knda},  __script_data_t{0x0CBA, script::zzzz},
        __script_data_t{0x0CBC, script::knda},  __script_data_t{0x0CC5, script::zzzz},
        __script_data_t{0x0CC6, script::knda},  __script_data_t{0x0CC9, script::zzzz},
        __script_data_t{0x0CCA, script::knda},  __script_data_t{0x0CCE, script::zzzz},
        __script_data_t{0x0CD5, script::knda},  __script_data_t{0x0CD7, script::zzzz},
        __script_data_t{0x0CDE, script::knda},  __script_data_t{0x0CDF, script::zzzz},
        __script_data_t{0x0CE0, script::knda},  __script_data_t{0x0CE4, script::zzzz},
        __script_data_t{0x0CE6, script::knda},  __script_data_t{0x0CF0, script::zzzz},
        __script_data_t{0x0CF1, script::knda},  __script_data_t{0x0CF3, script::zzzz},
        __script_data_t{0x0D00, script::mlym},  __script_data_t{0x0D04, script::zzzz},
        __script_data_t{0x0D05, script::mlym},  __script_data_t{0x0D0D, script::zzzz},
        __script_data_t{0x0D0E, script::mlym},  __script_data_t{0x0D11, script::zzzz},
        __script_data_t{0x0D12, script::mlym},  __script_data_t{0x0D45, script::zzzz},
        __script_data_t{0x0D46, script::mlym},  __script_data_t{0x0D49, script::zzzz},
        __script_data_t{0x0D4A, script::mlym},  __script_data_t{0x0D50, script::zzzz},
        __script_data_t{0x0D54, script::mlym},  __script_data_t{0x0D64, script::zzzz},
        __script_data_t{0x0D66, script::mlym},  __script_data_t{0x0D80, script::zzzz},
        __script_data_t{0x0D82, script::sinh},  __script_data_t{0x0D84, script::zzzz},
        __script_data_t{0x0D85, script::sinh},  __script_data_t{0x0D97, script::zzzz},
        __script_data_t{0x0D9A, script::sinh},  __script_data_t{0x0DB2, script::zzzz},
        __script_data_t{0x0DB3, script::sinh},  __script_data_t{0x0DBC, script::zzzz},
        __script_data_t{0x0DBD, script::sinh},  __script_data_t{0x0DBE, script::zzzz},
        __script_data_t{0x0DC0, script::sinh},  __script_data_t{0x0DC7, script::zzzz},
        __script_data_t{0x0DCA, script::sinh},  __script_data_t{0x0DCB, script::zzzz},
        __script_data_t{0x0DCF, script::sinh},  __script_data_t{0x0DD5, script::zzzz},
        __script_data_t{0x0DD6, script::sinh},  __script_data_t{0x0DD7, script::zzzz},
        __script_data_t{0x0DD8, script::sinh},  __script_data_t{0x0DE0, script::zzzz},
        __script_data_t{0x0DE6, script::sinh},  __script_data_t{0x0DF0, script::zzzz},
        __script_data_t{0x0DF2, script::sinh},  __script_data_t{0x0DF5, script::zzzz},
        __script_data_t{0x0E01, script::thai},  __script_data_t{0x0E3B, script::zzzz},
        __script_data_t{0x0E3F, script::zyyy},  __script_data_t{0x0E40, script::thai},
        __script_data_t{0x0E5C, script::zzzz},  __script_data_t{0x0E81, script::laoo},
        __script_data_t{0x0E83, script::zzzz},  __script_data_t{0x0E84, script::laoo},
        __script_data_t{0x0E85, script::zzzz},  __script_data_t{0x0E86, script::laoo},
        __script_data_t{0x0E8B, script::zzzz},  __script_data_t{0x0E8C, script::laoo},
        __script_data_t{0x0EA4, script::zzzz},  __script_data_t{0x0EA5, script::laoo},
        __script_data_t{0x0EA6, script::zzzz},  __script_data_t{0x0EA7, script::laoo},
        __script_data_t{0x0EBE, script::zzzz},  __script_data_t{0x0EC0, script::laoo},
        __script_data_t{0x0EC5, script::zzzz},  __script_data_t{0x0EC6, script::laoo},
        __script_data_t{0x0EC7, script::zzzz},  __script_data_t{0x0EC8, script::laoo},
        __script_data_t{0x0ECE, script::zzzz},  __script_data_t{0x0ED0, script::laoo},
        __script_data_t{0x0EDA, script::zzzz},  __script_data_t{0x0EDC, script::laoo},
        __script_data_t{0x0EE0, script::zzzz},  __script_data_t{0x0F00, script::tibt},
        __script_data_t{0x0F48, script::zzzz},  __script_data_t{0x0F49, script::tibt},
        __script_data_t{0x0F6D, script::zzzz},  __script_data_t{0x0F71, script::tibt},
        __script_data_t{0x0F98, script::zzzz},  __script_data_t{0x0F99, script::tibt},
        __script_data_t{0x0FBD, script::zzzz},  __script_data_t{0x0FBE, script::tibt},
        __script_data_t{0x0FCD, script::zzzz},  __script_data_t{0x0FCE, script::tibt},
        __script_data_t{0x0FD5, script::zyyy},  __script_data_t{0x0FD9, script::tibt},
        __script_data_t{0x0FDB, script::zzzz},  __script_data_t{0x1000, script::mymr},
        __script_data_t{0x10A0, script::geor},  __script_data_t{0x10C6, script::zzzz},
        __script_data_t{0x10C7, script::geor},  __script_data_t{0x10C8, script::zzzz},
        __script_data_t{0x10CD, script::geor},  __script_data_t{0x10CE, script::zzzz},
        __script_data_t{0x10D0, script::geor},  __script_data_t{0x10FB, script::zyyy},
        __script_data_t{0x10FC, script::geor},  __script_data_t{0x1100, script::hang},
        __script_data_t{0x1200, script::ethi},  __script_data_t{0x1249, script::zzzz},
        __script_data_t{0x124A, script::ethi},  __script_data_t{0x124E, script::zzzz},
        __script_data_t{0x1250, script::ethi},  __script_data_t{0x1257, script::zzzz},
        __script_data_t{0x1258, script::ethi},  __script_data_t{0x1259, script::zzzz},
        __script_data_t{0x125A, script::ethi},  __script_data_t{0x125E, script::zzzz},
        __script_data_t{0x1260, script::ethi},  __script_data_t{0x1289, script::zzzz},
        __script_data_t{0x128A, script::ethi},  __script_data_t{0x128E, script::zzzz},
        __script_data_t{0x1290, script::ethi},  __script_data_t{0x12B1, script::zzzz},
        __script_data_t{0x12B2, script::ethi},  __script_data_t{0x12B6, script::zzzz},
        __script_data_t{0x12B8, script::ethi},  __script_data_t{0x12BF, script::zzzz},
        __script_data_t{0x12C0, script::ethi},  __script_data_t{0x12C1, script::zzzz},
        __script_data_t{0x12C2, script::ethi},  __script_data_t{0x12C6, script::zzzz},
        __script_data_t{0x12C8, script::ethi},  __script_data_t{0x12D7, script::zzzz},
        __script_data_t{0x12D8, script::ethi},  __script_data_t{0x1311, script::zzzz},
        __script_data_t{0x1312, script::ethi},  __script_data_t{0x1316, script::zzzz},
        __script_data_t{0x1318, script::ethi},  __script_data_t{0x135B, script::zzzz},
        __script_data_t{0x135D, script::ethi},  __script_data_t{0x137D, script::zzzz},
        __script_data_t{0x1380, script::ethi},  __script_data_t{0x139A, script::zzzz},
        __script_data_t{0x13A0, script::cher},  __script_data_t{0x13F6, script::zzzz},
        __script_data_t{0x13F8, script::cher},  __script_data_t{0x13FE, script::zzzz},
        __script_data_t{0x1400, script::cans},  __script_data_t{0x1680, script::ogam},
        __script_data_t{0x169D, script::zzzz},  __script_data_t{0x16A0, script::runr},
        __script_data_t{0x16EB, script::zyyy},  __script_data_t{0x16EE, script::runr},
        __script_data_t{0x16F9, script::zzzz},  __script_data_t{0x1700, script::tglg},
        __script_data_t{0x170D, script::zzzz},  __script_data_t{0x170E, script::tglg},
        __script_data_t{0x1715, script::zzzz},  __script_data_t{0x1720, script::hano},
        __script_data_t{0x1735, script::zyyy},  __script_data_t{0x1737, script::zzzz},
        __script_data_t{0x1740, script::buhd},  __script_data_t{0x1754, script::zzzz},
        __script_data_t{0x1760, script::tagb},  __script_data_t{0x176D, script::zzzz},
        __script_data_t{0x176E, script::tagb},  __script_data_t{0x1771, script::zzzz},
        __script_data_t{0x1772, script::tagb},  __script_data_t{0x1774, script::zzzz},
        __script_data_t{0x1780, script::khmr},  __script_data_t{0x17DE, script::zzzz},
        __script_data_t{0x17E0, script::khmr},  __script_data_t{0x17EA, script::zzzz},
        __script_data_t{0x17F0, script::khmr},  __script_data_t{0x17FA, script::zzzz},
        __script_data_t{0x1800, script::mong},  __script_data_t{0x1802, script::zyyy},
        __script_data_t{0x1804, script::mong},  __script_data_t{0x1805, script::zyyy},
        __script_data_t{0x1806, script::mong},  __script_data_t{0x180F, script::zzzz},
        __script_data_t{0x1810, script::mong},  __script_data_t{0x181A, script::zzzz},
        __script_data_t{0x1820, script::mong},  __script_data_t{0x1879, script::zzzz},
        __script_data_t{0x1880, script::mong},  __script_data_t{0x18AB, script::zzzz},
        __script_data_t{0x18B0, script::cans},  __script_data_t{0x18F6, script::zzzz},
        __script_data_t{0x1900, script::limb},  __script_data_t{0x191F, script::zzzz},
        __script_data_t{0x1920, script::limb},  __script_data_t{0x192C, script::zzzz},
        __script_data_t{0x1930, script::limb},  __script_data_t{0x193C, script::zzzz},
        __script_data_t{0x1940, script::limb},  __script_data_t{0x1941, script::zzzz},
        __script_data_t{0x1944, script::limb},  __script_data_t{0x1950, script::tale},
        __script_data_t{0x196E, script::zzzz},  __script_data_t{0x1970, script::tale},
        __script_data_t{0x1975, script::zzzz},  __script_data_t{0x1980, script::talu},
        __script_data_t{0x19AC, script::zzzz},  __script_data_t{0x19B0, script::talu},
        __script_data_t{0x19CA, script::zzzz},  __script_data_t{0x19D0, script::talu},
        __script_data_t{0x19DB, script::zzzz},  __script_data_t{0x19DE, script::talu},
        __script_data_t{0x19E0, script::khmr},  __script_data_t{0x1A00, script::bugi},
        __script_data_t{0x1A1C, script::zzzz},  __script_data_t{0x1A1E, script::bugi},
        __script_data_t{0x1A20, script::lana},  __script_data_t{0x1A5F, script::zzzz},
        __script_data_t{0x1A60, script::lana},  __script_data_t{0x1A7D, script::zzzz},
        __script_data_t{0x1A7F, script::lana},  __script_data_t{0x1A8A, script::zzzz},
        __script_data_t{0x1A90, script::lana},  __script_data_t{0x1A9A, script::zzzz},
        __script_data_t{0x1AA0, script::lana},  __script_data_t{0x1AAE, script::zzzz},
        __script_data_t{0x1AB0, script::zinh},  __script_data_t{0x1ABF, script::zzzz},
        __script_data_t{0x1B00, script::bali},  __script_data_t{0x1B4C, script::zzzz},
        __script_data_t{0x1B50, script::bali},  __script_data_t{0x1B7D, script::zzzz},
        __script_data_t{0x1B80, script::sund},  __script_data_t{0x1BC0, script::batk},
        __script_data_t{0x1BF4, script::zzzz},  __script_data_t{0x1BFC, script::batk},
        __script_data_t{0x1C00, script::lepc},  __script_data_t{0x1C38, script::zzzz},
        __script_data_t{0x1C3B, script::lepc},  __script_data_t{0x1C4A, script::zzzz},
        __script_data_t{0x1C4D, script::lepc},  __script_data_t{0x1C50, script::olck},
        __script_data_t{0x1C80, script::cyrl},  __script_data_t{0x1C89, script::zzzz},
        __script_data_t{0x1C90, script::geor},  __script_data_t{0x1CBB, script::zzzz},
        __script_data_t{0x1CBD, script::geor},  __script_data_t{0x1CC0, script::sund},
        __script_data_t{0x1CC8, script::zzzz},  __script_data_t{0x1CD0, script::zinh},
        __script_data_t{0x1CD3, script::zyyy},  __script_data_t{0x1CD4, script::zinh},
        __script_data_t{0x1CE1, script::zyyy},  __script_data_t{0x1CE2, script::zinh},
        __script_data_t{0x1CE9, script::zyyy},  __script_data_t{0x1CED, script::zinh},
        __script_data_t{0x1CEE, script::zyyy},  __script_data_t{0x1CF4, script::zinh},
        __script_data_t{0x1CF5, script::zyyy},  __script_data_t{0x1CF8, script::zinh},
        __script_data_t{0x1CFA, script::zyyy},  __script_data_t{0x1CFB, script::zzzz},
        __script_data_t{0x1D00, script::latn},  __script_data_t{0x1D26, script::grek},
        __script_data_t{0x1D2B, script::cyrl},  __script_data_t{0x1D2C, script::latn},
        __script_data_t{0x1D5D, script::grek},  __script_data_t{0x1D62, script::latn},
        __script_data_t{0x1D66, script::grek},  __script_data_t{0x1D6B, script::latn},
        __script_data_t{0x1D78, script::cyrl},  __script_data_t{0x1D79, script::latn},
        __script_data_t{0x1DBF, script::grek},  __script_data_t{0x1DC0, script::zinh},
        __script_data_t{0x1DFA, script::zzzz},  __script_data_t{0x1DFB, script::zinh},
        __script_data_t{0x1E00, script::latn},  __script_data_t{0x1F00, script::grek},
        __script_data_t{0x1F16, script::zzzz},  __script_data_t{0x1F18, script::grek},
        __script_data_t{0x1F1E, script::zzzz},  __script_data_t{0x1F20, script::grek},
        __script_data_t{0x1F46, script::zzzz},  __script_data_t{0x1F48, script::grek},
        __script_data_t{0x1F4E, script::zzzz},  __script_data_t{0x1F50, script::grek},
        __script_data_t{0x1F58, script::zzzz},  __script_data_t{0x1F59, script::grek},
        __script_data_t{0x1F5A, script::zzzz},  __script_data_t{0x1F5B, script::grek},
        __script_data_t{0x1F5C, script::zzzz},  __script_data_t{0x1F5D, script::grek},
        __script_data_t{0x1F5E, script::zzzz},  __script_data_t{0x1F5F, script::grek},
        __script_data_t{0x1F7E, script::zzzz},  __script_data_t{0x1F80, script::grek},
        __script_data_t{0x1FB5, script::zzzz},  __script_data_t{0x1FB6, script::grek},
        __script_data_t{0x1FC5, script::zzzz},  __script_data_t{0x1FC6, script::grek},
        __script_data_t{0x1FD4, script::zzzz},  __script_data_t{0x1FD6, script::grek},
        __script_data_t{0x1FDC, script::zzzz},  __script_data_t{0x1FDD, script::grek},
        __script_data_t{0x1FF0, script::zzzz},  __script_data_t{0x1FF2, script::grek},
        __script_data_t{0x1FF5, script::zzzz},  __script_data_t{0x1FF6, script::grek},
        __script_data_t{0x1FFF, script::zzzz},  __script_data_t{0x2000, script::zyyy},
        __script_data_t{0x200C, script::zinh},  __script_data_t{0x200E, script::zyyy},
        __script_data_t{0x2065, script::zzzz},  __script_data_t{0x2066, script::zyyy},
        __script_data_t{0x2071, script::latn},  __script_data_t{0x2072, script::zzzz},
        __script_data_t{0x2074, script::zyyy},  __script_data_t{0x207F, script::latn},
        __script_data_t{0x2080, script::zyyy},  __script_data_t{0x208F, script::zzzz},
        __script_data_t{0x2090, script::latn},  __script_data_t{0x209D, script::zzzz},
        __script_data_t{0x20A0, script::zyyy},  __script_data_t{0x20C0, script::zzzz},
        __script_data_t{0x20D0, script::zinh},  __script_data_t{0x20F1, script::zzzz},
        __script_data_t{0x2100, script::zyyy},  __script_data_t{0x2126, script::grek},
        __script_data_t{0x2127, script::zyyy},  __script_data_t{0x212A, script::latn},
        __script_data_t{0x212C, script::zyyy},  __script_data_t{0x2132, script::latn},
        __script_data_t{0x2133, script::zyyy},  __script_data_t{0x214E, script::latn},
        __script_data_t{0x214F, script::zyyy},  __script_data_t{0x2160, script::latn},
        __script_data_t{0x2189, script::zyyy},  __script_data_t{0x218C, script::zzzz},
        __script_data_t{0x2190, script::zyyy},  __script_data_t{0x2427, script::zzzz},
        __script_data_t{0x2440, script::zyyy},  __script_data_t{0x244B, script::zzzz},
        __script_data_t{0x2460, script::zyyy},  __script_data_t{0x2800, script::brai},
        __script_data_t{0x2900, script::zyyy},  __script_data_t{0x2B74, script::zzzz},
        __script_data_t{0x2B76, script::zyyy},  __script_data_t{0x2B96, script::zzzz},
        __script_data_t{0x2B98, script::zyyy},  __script_data_t{0x2C00, script::glag},
        __script_data_t{0x2C2F, script::zzzz},  __script_data_t{0x2C30, script::glag},
        __script_data_t{0x2C5F, script::zzzz},  __script_data_t{0x2C60, script::latn},
        __script_data_t{0x2C80, script::copt},  __script_data_t{0x2CF4, script::zzzz},
        __script_data_t{0x2CF9, script::copt},  __script_data_t{0x2D00, script::geor},
        __script_data_t{0x2D26, script::zzzz},  __script_data_t{0x2D27, script::geor},
        __script_data_t{0x2D28, script::zzzz},  __script_data_t{0x2D2D, script::geor},
        __script_data_t{0x2D2E, script::zzzz},  __script_data_t{0x2D30, script::tfng},
        __script_data_t{0x2D68, script::zzzz},  __script_data_t{0x2D6F, script::tfng},
        __script_data_t{0x2D71, script::zzzz},  __script_data_t{0x2D7F, script::tfng},
        __script_data_t{0x2D80, script::ethi},  __script_data_t{0x2D97, script::zzzz},
        __script_data_t{0x2DA0, script::ethi},  __script_data_t{0x2DA7, script::zzzz},
        __script_data_t{0x2DA8, script::ethi},  __script_data_t{0x2DAF, script::zzzz},
        __script_data_t{0x2DB0, script::ethi},  __script_data_t{0x2DB7, script::zzzz},
        __script_data_t{0x2DB8, script::ethi},  __script_data_t{0x2DBF, script::zzzz},
        __script_data_t{0x2DC0, script::ethi},  __script_data_t{0x2DC7, script::zzzz},
        __script_data_t{0x2DC8, script::ethi},  __script_data_t{0x2DCF, script::zzzz},
        __script_data_t{0x2DD0, script::ethi},  __script_data_t{0x2DD7, script::zzzz},
        __script_data_t{0x2DD8, script::ethi},  __script_data_t{0x2DDF, script::zzzz},
        __script_data_t{0x2DE0, script::cyrl},  __script_data_t{0x2E00, script::zyyy},
        __script_data_t{0x2E50, script::zzzz},  __script_data_t{0x2E80, script::hani},
        __script_data_t{0x2E9A, script::zzzz},  __script_data_t{0x2E9B, script::hani},
        __script_data_t{0x2EF4, script::zzzz},  __script_data_t{0x2F00, script::hani},
        __script_data_t{0x2FD6, script::zzzz},  __script_data_t{0x2FF0, script::zyyy},
        __script_data_t{0x2FFC, script::zzzz},  __script_data_t{0x3000, script::zyyy},
        __script_data_t{0x3005, script::hani},  __script_data_t{0x3006, script::zyyy},
        __script_data_t{0x3007, script::hani},  __script_data_t{0x3008, script::zyyy},
        __script_data_t{0x3021, script::hani},  __script_data_t{0x302A, script::zinh},
        __script_data_t{0x302E, script::hang},  __script_data_t{0x3030, script::zyyy},
        __script_data_t{0x3038, script::hani},  __script_data_t{0x303C, script::zyyy},
        __script_data_t{0x3040, script::zzzz},  __script_data_t{0x3041, script::hira},
        __script_data_t{0x3097, script::zzzz},  __script_data_t{0x3099, script::zinh},
        __script_data_t{0x309B, script::zyyy},  __script_data_t{0x309D, script::hira},
        __script_data_t{0x30A0, script::zyyy},  __script_data_t{0x30A1, script::kana},
        __script_data_t{0x30FB, script::zyyy},  __script_data_t{0x30FD, script::kana},
        __script_data_t{0x3100, script::zzzz},  __script_data_t{0x3105, script::bopo},
        __script_data_t{0x3130, script::zzzz},  __script_data_t{0x3131, script::hang},
        __script_data_t{0x318F, script::zzzz},  __script_data_t{0x3190, script::zyyy},
        __script_data_t{0x31A0, script::bopo},  __script_data_t{0x31BB, script::zzzz},
        __script_data_t{0x31C0, script::zyyy},  __script_data_t{0x31E4, script::zzzz},
        __script_data_t{0x31F0, script::kana},  __script_data_t{0x3200, script::hang},
        __script_data_t{0x321F, script::zzzz},  __script_data_t{0x3220, script::zyyy},
        __script_data_t{0x3260, script::hang},  __script_data_t{0x327F, script::zyyy},
        __script_data_t{0x32D0, script::kana},  __script_data_t{0x32FF, script::zzzz},
        __script_data_t{0x3300, script::kana},  __script_data_t{0x3358, script::zyyy},
        __script_data_t{0x3400, script::zzzz},  __script_data_t{0x3405, script::hani},
        __script_data_t{0x3406, script::zzzz},  __script_data_t{0x3483, script::hani},
        __script_data_t{0x3484, script::zzzz},  __script_data_t{0x382A, script::hani},
        __script_data_t{0x382B, script::zzzz},  __script_data_t{0x3B4D, script::hani},
        __script_data_t{0x3B4E, script::zzzz},  __script_data_t{0x4DC0, script::zyyy},
        __script_data_t{0x4E00, script::hani},  __script_data_t{0x4E01, script::zzzz},
        __script_data_t{0x4E03, script::hani},  __script_data_t{0x4E04, script::zzzz},
        __script_data_t{0x4E07, script::hani},  __script_data_t{0x4E0A, script::zzzz},
        __script_data_t{0x4E5D, script::hani},  __script_data_t{0x4E5E, script::zzzz},
        __script_data_t{0x4E8C, script::hani},  __script_data_t{0x4E8D, script::zzzz},
        __script_data_t{0x4E94, script::hani},  __script_data_t{0x4E97, script::zzzz},
        __script_data_t{0x4EBF, script::hani},  __script_data_t{0x4EC1, script::zzzz},
        __script_data_t{0x4EDF, script::hani},  __script_data_t{0x4EE0, script::zzzz},
        __script_data_t{0x4EE8, script::hani},  __script_data_t{0x4EE9, script::zzzz},
        __script_data_t{0x4F0D, script::hani},  __script_data_t{0x4F0E, script::zzzz},
        __script_data_t{0x4F70, script::hani},  __script_data_t{0x4F71, script::zzzz},
        __script_data_t{0x5104, script::hani},  __script_data_t{0x5105, script::zzzz},
        __script_data_t{0x5146, script::hani},  __script_data_t{0x5147, script::zzzz},
        __script_data_t{0x5169, script::hani},  __script_data_t{0x516E, script::zzzz},
        __script_data_t{0x5341, script::hani},  __script_data_t{0x5346, script::zzzz},
        __script_data_t{0x534C, script::hani},  __script_data_t{0x534D, script::zzzz},
        __script_data_t{0x53C1, script::hani},  __script_data_t{0x53C5, script::zzzz},
        __script_data_t{0x56DB, script::hani},  __script_data_t{0x56DC, script::zzzz},
        __script_data_t{0x58F1, script::hani},  __script_data_t{0x58F2, script::zzzz},
        __script_data_t{0x58F9, script::hani},  __script_data_t{0x58FA, script::zzzz},
        __script_data_t{0x5E7A, script::hani},  __script_data_t{0x5E7B, script::zzzz},
        __script_data_t{0x5EFE, script::hani},  __script_data_t{0x5F00, script::zzzz},
        __script_data_t{0x5F0C, script::hani},  __script_data_t{0x5F11, script::zzzz},
        __script_data_t{0x62FE, script::hani},  __script_data_t{0x62FF, script::zzzz},
        __script_data_t{0x634C, script::hani},  __script_data_t{0x634D, script::zzzz},
        __script_data_t{0x67D2, script::hani},  __script_data_t{0x67D3, script::zzzz},
        __script_data_t{0x6F06, script::hani},  __script_data_t{0x6F07, script::zzzz},
        __script_data_t{0x7396, script::hani},  __script_data_t{0x7397, script::zzzz},
        __script_data_t{0x767E, script::hani},  __script_data_t{0x767F, script::zzzz},
        __script_data_t{0x8086, script::hani},  __script_data_t{0x8087, script::zzzz},
        __script_data_t{0x842C, script::hani},  __script_data_t{0x842D, script::zzzz},
        __script_data_t{0x8CAE, script::hani},  __script_data_t{0x8CAF, script::zzzz},
        __script_data_t{0x8CB3, script::hani},  __script_data_t{0x8CB4, script::zzzz},
        __script_data_t{0x8D30, script::hani},  __script_data_t{0x8D31, script::zzzz},
        __script_data_t{0x9621, script::hani},  __script_data_t{0x9622, script::zzzz},
        __script_data_t{0x9646, script::hani},  __script_data_t{0x9647, script::zzzz},
        __script_data_t{0x964C, script::hani},  __script_data_t{0x964D, script::zzzz},
        __script_data_t{0x9678, script::hani},  __script_data_t{0x9679, script::zzzz},
        __script_data_t{0x96F6, script::hani},  __script_data_t{0x96F7, script::zzzz},
        __script_data_t{0x9FCC, script::hani},  __script_data_t{0x9FCD, script::zzzz},
        __script_data_t{0xA000, script::yiii},  __script_data_t{0xA48D, script::zzzz},
        __script_data_t{0xA490, script::yiii},  __script_data_t{0xA4C7, script::zzzz},
        __script_data_t{0xA4D0, script::lisu},  __script_data_t{0xA500, script::vaii},
        __script_data_t{0xA62C, script::zzzz},  __script_data_t{0xA640, script::cyrl},
        __script_data_t{0xA6A0, script::bamu},  __script_data_t{0xA6F8, script::zzzz},
        __script_data_t{0xA700, script::zyyy},  __script_data_t{0xA722, script::latn},
        __script_data_t{0xA788, script::zyyy},  __script_data_t{0xA78B, script::latn},
        __script_data_t{0xA7C0, script::zzzz},  __script_data_t{0xA7C2, script::latn},
        __script_data_t{0xA7C7, script::zzzz},  __script_data_t{0xA7F7, script::latn},
        __script_data_t{0xA800, script::sylo},  __script_data_t{0xA82C, script::zzzz},
        __script_data_t{0xA830, script::zyyy},  __script_data_t{0xA83A, script::zzzz},
        __script_data_t{0xA840, script::phag},  __script_data_t{0xA878, script::zzzz},
        __script_data_t{0xA880, script::saur},  __script_data_t{0xA8C6, script::zzzz},
        __script_data_t{0xA8CE, script::saur},  __script_data_t{0xA8DA, script::zzzz},
        __script_data_t{0xA8E0, script::deva},  __script_data_t{0xA900, script::kali},
        __script_data_t{0xA92E, script::zyyy},  __script_data_t{0xA92F, script::kali},
        __script_data_t{0xA930, script::rjng},  __script_data_t{0xA954, script::zzzz},
        __script_data_t{0xA95F, script::rjng},  __script_data_t{0xA960, script::hang},
        __script_data_t{0xA97D, script::zzzz},  __script_data_t{0xA980, script::java},
        __script_data_t{0xA9CE, script::zzzz},  __script_data_t{0xA9CF, script::zyyy},
        __script_data_t{0xA9D0, script::java},  __script_data_t{0xA9DA, script::zzzz},
        __script_data_t{0xA9DE, script::java},  __script_data_t{0xA9E0, script::mymr},
        __script_data_t{0xA9FF, script::zzzz},  __script_data_t{0xAA00, script::cham},
        __script_data_t{0xAA37, script::zzzz},  __script_data_t{0xAA40, script::cham},
        __script_data_t{0xAA4E, script::zzzz},  __script_data_t{0xAA50, script::cham},
        __script_data_t{0xAA5A, script::zzzz},  __script_data_t{0xAA5C, script::cham},
        __script_data_t{0xAA60, script::mymr},  __script_data_t{0xAA80, script::tavt},
        __script_data_t{0xAAC3, script::zzzz},  __script_data_t{0xAADB, script::tavt},
        __script_data_t{0xAAE0, script::mtei},  __script_data_t{0xAAF7, script::zzzz},
        __script_data_t{0xAB01, script::ethi},  __script_data_t{0xAB07, script::zzzz},
        __script_data_t{0xAB09, script::ethi},  __script_data_t{0xAB0F, script::zzzz},
        __script_data_t{0xAB11, script::ethi},  __script_data_t{0xAB17, script::zzzz},
        __script_data_t{0xAB20, script::ethi},  __script_data_t{0xAB27, script::zzzz},
        __script_data_t{0xAB28, script::ethi},  __script_data_t{0xAB2F, script::zzzz},
        __script_data_t{0xAB30, script::latn},  __script_data_t{0xAB5B, script::zyyy},
        __script_data_t{0xAB5C, script::latn},  __script_data_t{0xAB65, script::grek},
        __script_data_t{0xAB66, script::latn},  __script_data_t{0xAB68, script::zzzz},
        __script_data_t{0xAB70, script::cher},  __script_data_t{0xABC0, script::mtei},
        __script_data_t{0xABEE, script::zzzz},  __script_data_t{0xABF0, script::mtei},
        __script_data_t{0xABFA, script::zzzz},  __script_data_t{0xAC00, script::hang},
        __script_data_t{0xD7A4, script::zzzz},  __script_data_t{0xD7B0, script::hang},
        __script_data_t{0xD7C7, script::zzzz},  __script_data_t{0xD7CB, script::hang},
        __script_data_t{0xD7FC, script::zzzz},  __script_data_t{0xF900, script::hani},
        __script_data_t{0xFA6E, script::zzzz},  __script_data_t{0xFA70, script::hani},
        __script_data_t{0xFADA, script::zzzz},  __script_data_t{0xFB00, script::latn},
        __script_data_t{0xFB07, script::zzzz},  __script_data_t{0xFB13, script::armn},
        __script_data_t{0xFB18, script::zzzz},  __script_data_t{0xFB1D, script::hebr},
        __script_data_t{0xFB37, script::zzzz},  __script_data_t{0xFB38, script::hebr},
        __script_data_t{0xFB3D, script::zzzz},  __script_data_t{0xFB3E, script::hebr},
        __script_data_t{0xFB3F, script::zzzz},  __script_data_t{0xFB40, script::hebr},
        __script_data_t{0xFB42, script::zzzz},  __script_data_t{0xFB43, script::hebr},
        __script_data_t{0xFB45, script::zzzz},  __script_data_t{0xFB46, script::hebr},
        __script_data_t{0xFB50, script::arab},  __script_data_t{0xFBC2, script::zzzz},
        __script_data_t{0xFBD3, script::arab},  __script_data_t{0xFD3E, script::zyyy},
        __script_data_t{0xFD40, script::zzzz},  __script_data_t{0xFD50, script::arab},
        __script_data_t{0xFD90, script::zzzz},  __script_data_t{0xFD92, script::arab},
        __script_data_t{0xFDC8, script::zzzz},  __script_data_t{0xFDF0, script::arab},
        __script_data_t{0xFDFE, script::zzzz},  __script_data_t{0xFE00, script::zinh},
        __script_data_t{0xFE10, script::zyyy},  __script_data_t{0xFE1A, script::zzzz},
        __script_data_t{0xFE20, script::zinh},  __script_data_t{0xFE2E, script::cyrl},
        __script_data_t{0xFE30, script::zyyy},  __script_data_t{0xFE53, script::zzzz},
        __script_data_t{0xFE54, script::zyyy},  __script_data_t{0xFE67, script::zzzz},
        __script_data_t{0xFE68, script::zyyy},  __script_data_t{0xFE6C, script::zzzz},
        __script_data_t{0xFE70, script::arab},  __script_data_t{0xFE75, script::zzzz},
        __script_data_t{0xFE76, script::arab},  __script_data_t{0xFEFD, script::zzzz},
        __script_data_t{0xFEFF, script::zyyy},  __script_data_t{0xFF00, script::zzzz},
        __script_data_t{0xFF01, script::zyyy},  __script_data_t{0xFF21, script::latn},
        __script_data_t{0xFF3B, script::zyyy},  __script_data_t{0xFF41, script::latn},
        __script_data_t{0xFF5B, script::zyyy},  __script_data_t{0xFF66, script::kana},
        __script_data_t{0xFF70, script::zyyy},  __script_data_t{0xFF71, script::kana},
        __script_data_t{0xFF9E, script::zyyy},  __script_data_t{0xFFA0, script::hang},
        __script_data_t{0xFFBF, script::zzzz},  __script_data_t{0xFFC2, script::hang},
        __script_data_t{0xFFC8, script::zzzz},  __script_data_t{0xFFCA, script::hang},
        __script_data_t{0xFFD0, script::zzzz},  __script_data_t{0xFFD2, script::hang},
        __script_data_t{0xFFD8, script::zzzz},  __script_data_t{0xFFDA, script::hang},
        __script_data_t{0xFFDD, script::zzzz},  __script_data_t{0xFFE0, script::zyyy},
        __script_data_t{0xFFE7, script::zzzz},  __script_data_t{0xFFE8, script::zyyy},
        __script_data_t{0xFFEF, script::zzzz},  __script_data_t{0xFFF9, script::zyyy},
        __script_data_t{0xFFFE, script::zzzz},  __script_data_t{0x10000, script::linb},
        __script_data_t{0x1000C, script::zzzz}, __script_data_t{0x1000D, script::linb},
        __script_data_t{0x10027, script::zzzz}, __script_data_t{0x10028, script::linb},
        __script_data_t{0x1003B, script::zzzz}, __script_data_t{0x1003C, script::linb},
        __script_data_t{0x1003E, script::zzzz}, __script_data_t{0x1003F, script::linb},
        __script_data_t{0x1004E, script::zzzz}, __script_data_t{0x10050, script::linb},
        __script_data_t{0x1005E, script::zzzz}, __script_data_t{0x10080, script::linb},
        __script_data_t{0x100FB, script::zzzz}, __script_data_t{0x10100, script::zyyy},
        __script_data_t{0x10103, script::zzzz}, __script_data_t{0x10107, script::zyyy},
        __script_data_t{0x10134, script::zzzz}, __script_data_t{0x10137, script::zyyy},
        __script_data_t{0x10140, script::grek}, __script_data_t{0x1018F, script::zzzz},
        __script_data_t{0x10190, script::zyyy}, __script_data_t{0x1019C, script::zzzz},
        __script_data_t{0x101A0, script::grek}, __script_data_t{0x101A1, script::zzzz},
        __script_data_t{0x101D0, script::zyyy}, __script_data_t{0x101FD, script::zinh},
        __script_data_t{0x101FE, script::zzzz}, __script_data_t{0x10280, script::lyci},
        __script_data_t{0x1029D, script::zzzz}, __script_data_t{0x102A0, script::cari},
        __script_data_t{0x102D1, script::zzzz}, __script_data_t{0x102E0, script::zinh},
        __script_data_t{0x102E1, script::zyyy}, __script_data_t{0x102FC, script::zzzz},
        __script_data_t{0x10300, script::ital}, __script_data_t{0x10324, script::zzzz},
        __script_data_t{0x1032D, script::ital}, __script_data_t{0x10330, script::goth},
        __script_data_t{0x1034B, script::zzzz}, __script_data_t{0x10350, script::perm},
        __script_data_t{0x1037B, script::zzzz}, __script_data_t{0x10380, script::ugar},
        __script_data_t{0x1039E, script::zzzz}, __script_data_t{0x1039F, script::ugar},
        __script_data_t{0x103A0, script::xpeo}, __script_data_t{0x103C4, script::zzzz},
        __script_data_t{0x103C8, script::xpeo}, __script_data_t{0x103D6, script::zzzz},
        __script_data_t{0x10400, script::dsrt}, __script_data_t{0x10450, script::shaw},
        __script_data_t{0x10480, script::osma}, __script_data_t{0x1049E, script::zzzz},
        __script_data_t{0x104A0, script::osma}, __script_data_t{0x104AA, script::zzzz},
        __script_data_t{0x104B0, script::osge}, __script_data_t{0x104D4, script::zzzz},
        __script_data_t{0x104D8, script::osge}, __script_data_t{0x104FC, script::zzzz},
        __script_data_t{0x10500, script::elba}, __script_data_t{0x10528, script::zzzz},
        __script_data_t{0x10530, script::aghb}, __script_data_t{0x10564, script::zzzz},
        __script_data_t{0x1056F, script::aghb}, __script_data_t{0x10570, script::zzzz},
        __script_data_t{0x10600, script::lina}, __script_data_t{0x10737, script::zzzz},
        __script_data_t{0x10740, script::lina}, __script_data_t{0x10756, script::zzzz},
        __script_data_t{0x10760, script::lina}, __script_data_t{0x10768, script::zzzz},
        __script_data_t{0x10800, script::cprt}, __script_data_t{0x10806, script::zzzz},
        __script_data_t{0x10808, script::cprt}, __script_data_t{0x10809, script::zzzz},
        __script_data_t{0x1080A, script::cprt}, __script_data_t{0x10836, script::zzzz},
        __script_data_t{0x10837, script::cprt}, __script_data_t{0x10839, script::zzzz},
        __script_data_t{0x1083C, script::cprt}, __script_data_t{0x1083D, script::zzzz},
        __script_data_t{0x1083F, script::cprt}, __script_data_t{0x10840, script::armi},
        __script_data_t{0x10856, script::zzzz}, __script_data_t{0x10857, script::armi},
        __script_data_t{0x10860, script::palm}, __script_data_t{0x10880, script::nbat},
        __script_data_t{0x1089F, script::zzzz}, __script_data_t{0x108A7, script::nbat},
        __script_data_t{0x108B0, script::zzzz}, __script_data_t{0x108E0, script::hatr},
        __script_data_t{0x108F3, script::zzzz}, __script_data_t{0x108F4, script::hatr},
        __script_data_t{0x108F6, script::zzzz}, __script_data_t{0x108FB, script::hatr},
        __script_data_t{0x10900, script::phnx}, __script_data_t{0x1091C, script::zzzz},
        __script_data_t{0x1091F, script::phnx}, __script_data_t{0x10920, script::lydi},
        __script_data_t{0x1093A, script::zzzz}, __script_data_t{0x1093F, script::lydi},
        __script_data_t{0x10940, script::zzzz}, __script_data_t{0x10980, script::mero},
        __script_data_t{0x109A0, script::merc}, __script_data_t{0x109B8, script::zzzz},
        __script_data_t{0x109BC, script::merc}, __script_data_t{0x109D0, script::zzzz},
        __script_data_t{0x109D2, script::merc}, __script_data_t{0x10A00, script::khar},
        __script_data_t{0x10A04, script::zzzz}, __script_data_t{0x10A05, script::khar},
        __script_data_t{0x10A07, script::zzzz}, __script_data_t{0x10A0C, script::khar},
        __script_data_t{0x10A14, script::zzzz}, __script_data_t{0x10A15, script::khar},
        __script_data_t{0x10A18, script::zzzz}, __script_data_t{0x10A19, script::khar},
        __script_data_t{0x10A36, script::zzzz}, __script_data_t{0x10A38, script::khar},
        __script_data_t{0x10A3B, script::zzzz}, __script_data_t{0x10A3F, script::khar},
        __script_data_t{0x10A49, script::zzzz}, __script_data_t{0x10A50, script::khar},
        __script_data_t{0x10A59, script::zzzz}, __script_data_t{0x10A60, script::sarb},
        __script_data_t{0x10A80, script::narb}, __script_data_t{0x10AA0, script::zzzz},
        __script_data_t{0x10AC0, script::mani}, __script_data_t{0x10AE7, script::zzzz},
        __script_data_t{0x10AEB, script::mani}, __script_data_t{0x10AF7, script::zzzz},
        __script_data_t{0x10B00, script::avst}, __script_data_t{0x10B36, script::zzzz},
        __script_data_t{0x10B39, script::avst}, __script_data_t{0x10B40, script::prti},
        __script_data_t{0x10B56, script::zzzz}, __script_data_t{0x10B58, script::prti},
        __script_data_t{0x10B60, script::phli}, __script_data_t{0x10B73, script::zzzz},
        __script_data_t{0x10B78, script::phli}, __script_data_t{0x10B80, script::phlp},
        __script_data_t{0x10B92, script::zzzz}, __script_data_t{0x10B99, script::phlp},
        __script_data_t{0x10B9D, script::zzzz}, __script_data_t{0x10BA9, script::phlp},
        __script_data_t{0x10BB0, script::zzzz}, __script_data_t{0x10C00, script::orkh},
        __script_data_t{0x10C49, script::zzzz}, __script_data_t{0x10C80, script::hung},
        __script_data_t{0x10CB3, script::zzzz}, __script_data_t{0x10CC0, script::hung},
        __script_data_t{0x10CF3, script::zzzz}, __script_data_t{0x10CFA, script::hung},
        __script_data_t{0x10D00, script::rohg}, __script_data_t{0x10D28, script::zzzz},
        __script_data_t{0x10D30, script::rohg}, __script_data_t{0x10D3A, script::zzzz},
        __script_data_t{0x10E60, script::arab}, __script_data_t{0x10E7F, script::zzzz},
        __script_data_t{0x10F00, script::sogo}, __script_data_t{0x10F28, script::zzzz},
        __script_data_t{0x10F30, script::sogd}, __script_data_t{0x10F5A, script::zzzz},
        __script_data_t{0x10FE0, script::elym}, __script_data_t{0x10FF7, script::zzzz},
        __script_data_t{0x11000, script::brah}, __script_data_t{0x1104E, script::zzzz},
        __script_data_t{0x11052, script::brah}, __script_data_t{0x11070, script::zzzz},
        __script_data_t{0x1107F, script::brah}, __script_data_t{0x11080, script::kthi},
        __script_data_t{0x110C2, script::zzzz}, __script_data_t{0x110CD, script::kthi},
        __script_data_t{0x110CE, script::zzzz}, __script_data_t{0x110D0, script::sora},
        __script_data_t{0x110E9, script::zzzz}, __script_data_t{0x110F0, script::sora},
        __script_data_t{0x110FA, script::zzzz}, __script_data_t{0x11100, script::cakm},
        __script_data_t{0x11135, script::zzzz}, __script_data_t{0x11136, script::cakm},
        __script_data_t{0x11147, script::zzzz}, __script_data_t{0x11150, script::mahj},
        __script_data_t{0x11177, script::zzzz}, __script_data_t{0x11180, script::shrd},
        __script_data_t{0x111CE, script::zzzz}, __script_data_t{0x111D0, script::shrd},
        __script_data_t{0x111E0, script::zzzz}, __script_data_t{0x111E1, script::sinh},
        __script_data_t{0x111F5, script::zzzz}, __script_data_t{0x11200, script::khoj},
        __script_data_t{0x11212, script::zzzz}, __script_data_t{0x11213, script::khoj},
        __script_data_t{0x1123F, script::zzzz}, __script_data_t{0x11280, script::mult},
        __script_data_t{0x11287, script::zzzz}, __script_data_t{0x11288, script::mult},
        __script_data_t{0x11289, script::zzzz}, __script_data_t{0x1128A, script::mult},
        __script_data_t{0x1128E, script::zzzz}, __script_data_t{0x1128F, script::mult},
        __script_data_t{0x1129E, script::zzzz}, __script_data_t{0x1129F, script::mult},
        __script_data_t{0x112AA, script::zzzz}, __script_data_t{0x112B0, script::sind},
        __script_data_t{0x112EB, script::zzzz}, __script_data_t{0x112F0, script::sind},
        __script_data_t{0x112FA, script::zzzz}, __script_data_t{0x11300, script::gran},
        __script_data_t{0x11304, script::zzzz}, __script_data_t{0x11305, script::gran},
        __script_data_t{0x1130D, script::zzzz}, __script_data_t{0x1130F, script::gran},
        __script_data_t{0x11311, script::zzzz}, __script_data_t{0x11313, script::gran},
        __script_data_t{0x11329, script::zzzz}, __script_data_t{0x1132A, script::gran},
        __script_data_t{0x11331, script::zzzz}, __script_data_t{0x11332, script::gran},
        __script_data_t{0x11334, script::zzzz}, __script_data_t{0x11335, script::gran},
        __script_data_t{0x1133A, script::zzzz}, __script_data_t{0x1133B, script::zinh},
        __script_data_t{0x1133C, script::gran}, __script_data_t{0x11345, script::zzzz},
        __script_data_t{0x11347, script::gran}, __script_data_t{0x11349, script::zzzz},
        __script_data_t{0x1134B, script::gran}, __script_data_t{0x1134E, script::zzzz},
        __script_data_t{0x11350, script::gran}, __script_data_t{0x11351, script::zzzz},
        __script_data_t{0x11357, script::gran}, __script_data_t{0x11358, script::zzzz},
        __script_data_t{0x1135D, script::gran}, __script_data_t{0x11364, script::zzzz},
        __script_data_t{0x11366, script::gran}, __script_data_t{0x1136D, script::zzzz},
        __script_data_t{0x11370, script::gran}, __script_data_t{0x11375, script::zzzz},
        __script_data_t{0x11400, script::newa}, __script_data_t{0x1145A, script::zzzz},
        __script_data_t{0x1145B, script::newa}, __script_data_t{0x1145C, script::zzzz},
        __script_data_t{0x1145D, script::newa}, __script_data_t{0x11460, script::zzzz},
        __script_data_t{0x11480, script::tirh}, __script_data_t{0x114C8, script::zzzz},
        __script_data_t{0x114D0, script::tirh}, __script_data_t{0x114DA, script::zzzz},
        __script_data_t{0x11580, script::sidd}, __script_data_t{0x115B6, script::zzzz},
        __script_data_t{0x115B8, script::sidd}, __script_data_t{0x115DE, script::zzzz},
        __script_data_t{0x11600, script::modi}, __script_data_t{0x11645, script::zzzz},
        __script_data_t{0x11650, script::modi}, __script_data_t{0x1165A, script::zzzz},
        __script_data_t{0x11660, script::mong}, __script_data_t{0x1166D, script::zzzz},
        __script_data_t{0x11680, script::takr}, __script_data_t{0x116B9, script::zzzz},
        __script_data_t{0x116C0, script::takr}, __script_data_t{0x116CA, script::zzzz},
        __script_data_t{0x11700, script::ahom}, __script_data_t{0x1171B, script::zzzz},
        __script_data_t{0x1171D, script::ahom}, __script_data_t{0x1172C, script::zzzz},
        __script_data_t{0x11730, script::ahom}, __script_data_t{0x11740, script::zzzz},
        __script_data_t{0x11800, script::dogr}, __script_data_t{0x1183C, script::zzzz},
        __script_data_t{0x118A0, script::wara}, __script_data_t{0x118F3, script::zzzz},
        __script_data_t{0x118FF, script::wara}, __script_data_t{0x11900, script::zzzz},
        __script_data_t{0x119A0, script::nand}, __script_data_t{0x119A8, script::zzzz},
        __script_data_t{0x119AA, script::nand}, __script_data_t{0x119D8, script::zzzz},
        __script_data_t{0x119DA, script::nand}, __script_data_t{0x119E5, script::zzzz},
        __script_data_t{0x11A00, script::zanb}, __script_data_t{0x11A48, script::zzzz},
        __script_data_t{0x11A50, script::soyo}, __script_data_t{0x11AA3, script::zzzz},
        __script_data_t{0x11AC0, script::pauc}, __script_data_t{0x11AF9, script::zzzz},
        __script_data_t{0x11C00, script::bhks}, __script_data_t{0x11C09, script::zzzz},
        __script_data_t{0x11C0A, script::bhks}, __script_data_t{0x11C37, script::zzzz},
        __script_data_t{0x11C38, script::bhks}, __script_data_t{0x11C46, script::zzzz},
        __script_data_t{0x11C50, script::bhks}, __script_data_t{0x11C6D, script::zzzz},
        __script_data_t{0x11C70, script::marc}, __script_data_t{0x11C90, script::zzzz},
        __script_data_t{0x11C92, script::marc}, __script_data_t{0x11CA8, script::zzzz},
        __script_data_t{0x11CA9, script::marc}, __script_data_t{0x11CB7, script::zzzz},
        __script_data_t{0x11D00, script::gonm}, __script_data_t{0x11D07, script::zzzz},
        __script_data_t{0x11D08, script::gonm}, __script_data_t{0x11D0A, script::zzzz},
        __script_data_t{0x11D0B, script::gonm}, __script_data_t{0x11D37, script::zzzz},
        __script_data_t{0x11D3A, script::gonm}, __script_data_t{0x11D3B, script::zzzz},
        __script_data_t{0x11D3C, script::gonm}, __script_data_t{0x11D3E, script::zzzz},
        __script_data_t{0x11D3F, script::gonm}, __script_data_t{0x11D48, script::zzzz},
        __script_data_t{0x11D50, script::gonm}, __script_data_t{0x11D5A, script::zzzz},
        __script_data_t{0x11D60, script::gong}, __script_data_t{0x11D66, script::zzzz},
        __script_data_t{0x11D67, script::gong}, __script_data_t{0x11D69, script::zzzz},
        __script_data_t{0x11D6A, script::gong}, __script_data_t{0x11D8F, script::zzzz},
        __script_data_t{0x11D90, script::gong}, __script_data_t{0x11D92, script::zzzz},
        __script_data_t{0x11D93, script::gong}, __script_data_t{0x11D99, script::zzzz},
        __script_data_t{0x11DA0, script::gong}, __script_data_t{0x11DAA, script::zzzz},
        __script_data_t{0x11EE0, script::maka}, __script_data_t{0x11EF9, script::zzzz},
        __script_data_t{0x11FC0, script::taml}, __script_data_t{0x11FF2, script::zzzz},
        __script_data_t{0x11FFF, script::taml}, __script_data_t{0x12000, script::xsux},
        __script_data_t{0x1239A, script::zzzz}, __script_data_t{0x12400, script::xsux},
        __script_data_t{0x1246F, script::zzzz}, __script_data_t{0x12470, script::xsux},
        __script_data_t{0x12475, script::zzzz}, __script_data_t{0x12480, script::xsux},
        __script_data_t{0x12544, script::zzzz}, __script_data_t{0x13000, script::egyp},
        __script_data_t{0x1342F, script::zzzz}, __script_data_t{0x13430, script::egyp},
        __script_data_t{0x13439, script::zzzz}, __script_data_t{0x14400, script::hluw},
        __script_data_t{0x14647, script::zzzz}, __script_data_t{0x16800, script::bamu},
        __script_data_t{0x16A39, script::zzzz}, __script_data_t{0x16A40, script::mroo},
        __script_data_t{0x16A5F, script::zzzz}, __script_data_t{0x16A60, script::mroo},
        __script_data_t{0x16A6A, script::zzzz}, __script_data_t{0x16A6E, script::mroo},
        __script_data_t{0x16A70, script::zzzz}, __script_data_t{0x16AD0, script::bass},
        __script_data_t{0x16AEE, script::zzzz}, __script_data_t{0x16AF0, script::bass},
        __script_data_t{0x16AF6, script::zzzz}, __script_data_t{0x16B00, script::hmng},
        __script_data_t{0x16B46, script::zzzz}, __script_data_t{0x16B50, script::hmng},
        __script_data_t{0x16B5A, script::zzzz}, __script_data_t{0x16B5B, script::hmng},
        __script_data_t{0x16B62, script::zzzz}, __script_data_t{0x16B63, script::hmng},
        __script_data_t{0x16B78, script::zzzz}, __script_data_t{0x16B7D, script::hmng},
        __script_data_t{0x16B90, script::zzzz}, __script_data_t{0x16E40, script::medf},
        __script_data_t{0x16E9B, script::zzzz}, __script_data_t{0x16F00, script::plrd},
        __script_data_t{0x16F4B, script::zzzz}, __script_data_t{0x16F4F, script::plrd},
        __script_data_t{0x16F88, script::zzzz}, __script_data_t{0x16F8F, script::plrd},
        __script_data_t{0x16FA0, script::zzzz}, __script_data_t{0x16FE0, script::tang},
        __script_data_t{0x16FE1, script::nshu}, __script_data_t{0x16FE2, script::zyyy},
        __script_data_t{0x16FE4, script::zzzz}, __script_data_t{0x17000, script::tang},
        __script_data_t{0x187F8, script::zzzz}, __script_data_t{0x18800, script::tang},
        __script_data_t{0x18AF3, script::zzzz}, __script_data_t{0x1B000, script::kana},
        __script_data_t{0x1B001, script::hira}, __script_data_t{0x1B11F, script::zzzz},
        __script_data_t{0x1B150, script::hira}, __script_data_t{0x1B153, script::zzzz},
        __script_data_t{0x1B164, script::kana}, __script_data_t{0x1B168, script::zzzz},
        __script_data_t{0x1B170, script::nshu}, __script_data_t{0x1B2FC, script::zzzz},
        __script_data_t{0x1BC00, script::dupl}, __script_data_t{0x1BC6B, script::zzzz},
        __script_data_t{0x1BC70, script::dupl}, __script_data_t{0x1BC7D, script::zzzz},
        __script_data_t{0x1BC80, script::dupl}, __script_data_t{0x1BC89, script::zzzz},
        __script_data_t{0x1BC90, script::dupl}, __script_data_t{0x1BC9A, script::zzzz},
        __script_data_t{0x1BC9C, script::dupl}, __script_data_t{0x1BCA0, script::zyyy},
        __script_data_t{0x1BCA4, script::zzzz}, __script_data_t{0x1D000, script::zyyy},
        __script_data_t{0x1D0F6, script::zzzz}, __script_data_t{0x1D100, script::zyyy},
        __script_data_t{0x1D127, script::zzzz}, __script_data_t{0x1D129, script::zyyy},
        __script_data_t{0x1D167, script::zinh}, __script_data_t{0x1D16A, script::zyyy},
        __script_data_t{0x1D17B, script::zinh}, __script_data_t{0x1D183, script::zyyy},
        __script_data_t{0x1D185, script::zinh}, __script_data_t{0x1D18C, script::zyyy},
        __script_data_t{0x1D1AA, script::zinh}, __script_data_t{0x1D1AE, script::zyyy},
        __script_data_t{0x1D1E9, script::zzzz}, __script_data_t{0x1D200, script::grek},
        __script_data_t{0x1D246, script::zzzz}, __script_data_t{0x1D2E0, script::zyyy},
        __script_data_t{0x1D2F4, script::zzzz}, __script_data_t{0x1D300, script::zyyy},
        __script_data_t{0x1D357, script::zzzz}, __script_data_t{0x1D360, script::zyyy},
        __script_data_t{0x1D379, script::zzzz}, __script_data_t{0x1D400, script::zyyy},
        __script_data_t{0x1D455, script::zzzz}, __script_data_t{0x1D456, script::zyyy},
        __script_data_t{0x1D49D, script::zzzz}, __script_data_t{0x1D49E, script::zyyy},
        __script_data_t{0x1D4A0, script::zzzz}, __script_data_t{0x1D4A2, script::zyyy},
        __script_data_t{0x1D4A3, script::zzzz}, __script_data_t{0x1D4A5, script::zyyy},
        __script_data_t{0x1D4A7, script::zzzz}, __script_data_t{0x1D4A9, script::zyyy},
        __script_data_t{0x1D4AD, script::zzzz}, __script_data_t{0x1D4AE, script::zyyy},
        __script_data_t{0x1D4BA, script::zzzz}, __script_data_t{0x1D4BB, script::zyyy},
        __script_data_t{0x1D4BC, script::zzzz}, __script_data_t{0x1D4BD, script::zyyy},
        __script_data_t{0x1D4C4, script::zzzz}, __script_data_t{0x1D4C5, script::zyyy},
        __script_data_t{0x1D506, script::zzzz}, __script_data_t{0x1D507, script::zyyy},
        __script_data_t{0x1D50B, script::zzzz}, __script_data_t{0x1D50D, script::zyyy},
        __script_data_t{0x1D515, script::zzzz}, __script_data_t{0x1D516, script::zyyy},
        __script_data_t{0x1D51D, script::zzzz}, __script_data_t{0x1D51E, script::zyyy},
        __script_data_t{0x1D53A, script::zzzz}, __script_data_t{0x1D53B, script::zyyy},
        __script_data_t{0x1D53F, script::zzzz}, __script_data_t{0x1D540, script::zyyy},
        __script_data_t{0x1D545, script::zzzz}, __script_data_t{0x1D546, script::zyyy},
        __script_data_t{0x1D547, script::zzzz}, __script_data_t{0x1D54A, script::zyyy},
        __script_data_t{0x1D551, script::zzzz}, __script_data_t{0x1D552, script::zyyy},
        __script_data_t{0x1D6A6, script::zzzz}, __script_data_t{0x1D6A8, script::zyyy},
        __script_data_t{0x1D7CC, script::zzzz}, __script_data_t{0x1D7CE, script::zyyy},
        __script_data_t{0x1D800, script::sgnw}, __script_data_t{0x1DA8C, script::zzzz},
        __script_data_t{0x1DA9B, script::sgnw}, __script_data_t{0x1DAA0, script::zzzz},
        __script_data_t{0x1DAA1, script::sgnw}, __script_data_t{0x1DAB0, script::zzzz},
        __script_data_t{0x1E000, script::glag}, __script_data_t{0x1E007, script::zzzz},
        __script_data_t{0x1E008, script::glag}, __script_data_t{0x1E019, script::zzzz},
        __script_data_t{0x1E01B, script::glag}, __script_data_t{0x1E022, script::zzzz},
        __script_data_t{0x1E023, script::glag}, __script_data_t{0x1E025, script::zzzz},
        __script_data_t{0x1E026, script::glag}, __script_data_t{0x1E02B, script::zzzz},
        __script_data_t{0x1E100, script::hmnp}, __script_data_t{0x1E12D, script::zzzz},
        __script_data_t{0x1E130, script::hmnp}, __script_data_t{0x1E13E, script::zzzz},
        __script_data_t{0x1E140, script::hmnp}, __script_data_t{0x1E14A, script::zzzz},
        __script_data_t{0x1E14E, script::hmnp}, __script_data_t{0x1E150, script::zzzz},
        __script_data_t{0x1E2C0, script::wcho}, __script_data_t{0x1E2FA, script::zzzz},
        __script_data_t{0x1E2FF, script::wcho}, __script_data_t{0x1E300, script::zzzz},
        __script_data_t{0x1E800, script::mend}, __script_data_t{0x1E8C5, script::zzzz},
        __script_data_t{0x1E8C7, script::mend}, __script_data_t{0x1E8D7, script::zzzz},
        __script_data_t{0x1E900, script::adlm}, __script_data_t{0x1E94C, script::zzzz},
        __script_data_t{0x1E950, script::adlm}, __script_data_t{0x1E95A, script::zzzz},
        __script_data_t{0x1E95E, script::adlm}, __script_data_t{0x1E960, script::zzzz},
        __script_data_t{0x1EC71, script::zyyy}, __script_data_t{0x1ECB5, script::zzzz},
        __script_data_t{0x1ED01, script::zyyy}, __script_data_t{0x1ED3E, script::zzzz},
        __script_data_t{0x1EE00, script::arab}, __script_data_t{0x1EE04, script::zzzz},
        __script_data_t{0x1EE05, script::arab}, __script_data_t{0x1EE20, script::zzzz},
        __script_data_t{0x1EE21, script::arab}, __script_data_t{0x1EE23, script::zzzz},
        __script_data_t{0x1EE24, script::arab}, __script_data_t{0x1EE25, script::zzzz},
        __script_data_t{0x1EE27, script::arab}, __script_data_t{0x1EE28, script::zzzz},
        __script_data_t{0x1EE29, script::arab}, __script_data_t{0x1EE33, script::zzzz},
        __script_data_t{0x1EE34, script::arab}, __script_data_t{0x1EE38, script::zzzz},
        __script_data_t{0x1EE39, script::arab}, __script_data_t{0x1EE3A, script::zzzz},
        __script_data_t{0x1EE3B, script::arab}, __script_data_t{0x1EE3C, script::zzzz},
        __script_data_t{0x1EE42, script::arab}, __script_data_t{0x1EE43, script::zzzz},
        __script_data_t{0x1EE47, script::arab}, __script_data_t{0x1EE48, script::zzzz},
        __script_data_t{0x1EE49, script::arab}, __script_data_t{0x1EE4A, script::zzzz},
        __script_data_t{0x1EE4B, script::arab}, __script_data_t{0x1EE4C, script::zzzz},
        __script_data_t{0x1EE4D, script::arab}, __script_data_t{0x1EE50, script::zzzz},
        __script_data_t{0x1EE51, script::arab}, __script_data_t{0x1EE53, script::zzzz},
        __script_data_t{0x1EE54, script::arab}, __script_data_t{0x1EE55, script::zzzz},
        __script_data_t{0x1EE57, script::arab}, __script_data_t{0x1EE58, script::zzzz},
        __script_data_t{0x1EE59, script::arab}, __script_data_t{0x1EE5A, script::zzzz},
        __script_data_t{0x1EE5B, script::arab}, __script_data_t{0x1EE5C, script::zzzz},
        __script_data_t{0x1EE5D, script::arab}, __script_data_t{0x1EE5E, script::zzzz},
        __script_data_t{0x1EE5F, script::arab}, __script_data_t{0x1EE60, script::zzzz},
        __script_data_t{0x1EE61, script::arab}, __script_data_t{0x1EE63, script::zzzz},
        __script_data_t{0x1EE64, script::arab}, __script_data_t{0x1EE65, script::zzzz},
        __script_data_t{0x1EE67, script::arab}, __script_data_t{0x1EE6B, script::zzzz},
        __script_data_t{0x1EE6C, script::arab}, __script_data_t{0x1EE73, script::zzzz},
        __script_data_t{0x1EE74, script::arab}, __script_data_t{0x1EE78, script::zzzz},
        __script_data_t{0x1EE79, script::arab}, __script_data_t{0x1EE7D, script::zzzz},
        __script_data_t{0x1EE7E, script::arab}, __script_data_t{0x1EE7F, script::zzzz},
        __script_data_t{0x1EE80, script::arab}, __script_data_t{0x1EE8A, script::zzzz},
        __script_data_t{0x1EE8B, script::arab}, __script_data_t{0x1EE9C, script::zzzz},
        __script_data_t{0x1EEA1, script::arab}, __script_data_t{0x1EEA4, script::zzzz},
        __script_data_t{0x1EEA5, script::arab}, __script_data_t{0x1EEAA, script::zzzz},
        __script_data_t{0x1EEAB, script::arab}, __script_data_t{0x1EEBC, script::zzzz},
        __script_data_t{0x1EEF0, script::arab}, __script_data_t{0x1EEF2, script::zzzz},
        __script_data_t{0x1F000, script::zyyy}, __script_data_t{0x1F02C, script::zzzz},
        __script_data_t{0x1F030, script::zyyy}, __script_data_t{0x1F094, script::zzzz},
        __script_data_t{0x1F0A0, script::zyyy}, __script_data_t{0x1F0AF, script::zzzz},
        __script_data_t{0x1F0B1, script::zyyy}, __script_data_t{0x1F0C0, script::zzzz},
        __script_data_t{0x1F0C1, script::zyyy}, __script_data_t{0x1F0D0, script::zzzz},
        __script_data_t{0x1F0D1, script::zyyy}, __script_data_t{0x1F0F6, script::zzzz},
        __script_data_t{0x1F100, script::zyyy}, __script_data_t{0x1F10D, script::zzzz},
        __script_data_t{0x1F110, script::zyyy}, __script_data_t{0x1F16D, script::zzzz},
        __script_data_t{0x1F170, script::zyyy}, __script_data_t{0x1F1AD, script::zzzz},
        __script_data_t{0x1F1E6, script::zyyy}, __script_data_t{0x1F200, script::hira},
        __script_data_t{0x1F201, script::zyyy}, __script_data_t{0x1F203, script::zzzz},
        __script_data_t{0x1F210, script::zyyy}, __script_data_t{0x1F23C, script::zzzz},
        __script_data_t{0x1F240, script::zyyy}, __script_data_t{0x1F249, script::zzzz},
        __script_data_t{0x1F250, script::zyyy}, __script_data_t{0x1F252, script::zzzz},
        __script_data_t{0x1F260, script::zyyy}, __script_data_t{0x1F266, script::zzzz},
        __script_data_t{0x1F300, script::zyyy}, __script_data_t{0x1F6D6, script::zzzz},
        __script_data_t{0x1F6E0, script::zyyy}, __script_data_t{0x1F6ED, script::zzzz},
        __script_data_t{0x1F6F0, script::zyyy}, __script_data_t{0x1F6FB, script::zzzz},
        __script_data_t{0x1F700, script::zyyy}, __script_data_t{0x1F774, script::zzzz},
        __script_data_t{0x1F780, script::zyyy}, __script_data_t{0x1F7D9, script::zzzz},
        __script_data_t{0x1F7E0, script::zyyy}, __script_data_t{0x1F7EC, script::zzzz},
        __script_data_t{0x1F800, script::zyyy}, __script_data_t{0x1F80C, script::zzzz},
        __script_data_t{0x1F810, script::zyyy}, __script_data_t{0x1F848, script::zzzz},
        __script_data_t{0x1F850, script::zyyy}, __script_data_t{0x1F85A, script::zzzz},
        __script_data_t{0x1F860, script::zyyy}, __script_data_t{0x1F888, script::zzzz},
        __script_data_t{0x1F890, script::zyyy}, __script_data_t{0x1F8AE, script::zzzz},
        __script_data_t{0x1F900, script::zyyy}, __script_data_t{0x1F90C, script::zzzz},
        __script_data_t{0x1F90D, script::zyyy}, __script_data_t{0x1F972, script::zzzz},
        __script_data_t{0x1F973, script::zyyy}, __script_data_t{0x1F977, script::zzzz},
        __script_data_t{0x1F97A, script::zyyy}, __script_data_t{0x1F9A3, script::zzzz},
        __script_data_t{0x1F9A5, script::zyyy}, __script_data_t{0x1F9AB, script::zzzz},
        __script_data_t{0x1F9AE, script::zyyy}, __script_data_t{0x1F9CB, script::zzzz},
        __script_data_t{0x1F9CD, script::zyyy}, __script_data_t{0x1FA54, script::zzzz},
        __script_data_t{0x1FA60, script::zyyy}, __script_data_t{0x1FA6E, script::zzzz},
        __script_data_t{0x1FA70, script::zyyy}, __script_data_t{0x1FA74, script::zzzz},
        __script_data_t{0x1FA78, script::zyyy}, __script_data_t{0x1FA7B, script::zzzz},
        __script_data_t{0x1FA80, script::zyyy}, __script_data_t{0x1FA83, script::zzzz},
        __script_data_t{0x1FA90, script::zyyy}, __script_data_t{0x1FA96, script::zzzz},
        __script_data_t{0x20000, script::hani}, __script_data_t{0x20002, script::zzzz},
        __script_data_t{0x20064, script::hani}, __script_data_t{0x20065, script::zzzz},
        __script_data_t{0x200E2, script::hani}, __script_data_t{0x200E3, script::zzzz},
        __script_data_t{0x20121, script::hani}, __script_data_t{0x20122, script::zzzz},
        __script_data_t{0x2092A, script::hani}, __script_data_t{0x2092B, script::zzzz},
        __script_data_t{0x20983, script::hani}, __script_data_t{0x20984, script::zzzz},
        __script_data_t{0x2098C, script::hani}, __script_data_t{0x2098D, script::zzzz},
        __script_data_t{0x2099C, script::hani}, __script_data_t{0x2099D, script::zzzz},
        __script_data_t{0x20AEA, script::hani}, __script_data_t{0x20AEB, script::zzzz},
        __script_data_t{0x20AFD, script::hani}, __script_data_t{0x20AFE, script::zzzz},
        __script_data_t{0x20B19, script::hani}, __script_data_t{0x20B1A, script::zzzz},
        __script_data_t{0x22390, script::hani}, __script_data_t{0x22391, script::zzzz},
        __script_data_t{0x22998, script::hani}, __script_data_t{0x22999, script::zzzz},
        __script_data_t{0x23B1B, script::hani}, __script_data_t{0x23B1C, script::zzzz},
        __script_data_t{0x2626D, script::hani}, __script_data_t{0x2626E, script::zzzz},
        __script_data_t{0x2F800, script::hani}, __script_data_t{0x2FA1E, script::zzzz},
        __script_data_t{0xE0001, script::zyyy}, __script_data_t{0xE0002, script::zzzz},
        __script_data_t{0xE0020, script::zyyy}, __script_data_t{0xE0080, script::zzzz},
        __script_data_t{0xE0100, script::zinh}, __script_data_t{0xE01F0, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2387, script::deva},
        std::pair<char32_t, script>{2388, script::deva},
        std::pair<char32_t, script>{3721, script::zzzz},
        std::pair<char32_t, script>{3736, script::zzzz},
        std::pair<char32_t, script>{3744, script::zzzz},
        std::pair<char32_t, script>{3756, script::zzzz},
        std::pair<char32_t, script>{3770, script::zzzz},
        std::pair<char32_t, script>{11209, script::zzzz},
        std::pair<char32_t, script>{11263, script::zzzz},
        std::pair<char32_t, script>{129343, script::zzzz},
        std::pair<char32_t, script>{129403, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1376, script::zzzz},
        std::pair<char32_t, script>{1416, script::zzzz},
        std::pair<char32_t, script>{3076, script::zzzz},
        std::pair<char32_t, script>{3204, script::zzzz},
        std::pair<char32_t, script>{12591, script::zzzz},
        std::pair<char32_t, script>{42927, script::zzzz},
        std::pair<char32_t, script>{72349, script::zzzz},
        std::pair<char32_t, script>{127279, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<1> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0342, script::grek},  __script_data_t{0x0343, script::zzzz},
        __script_data_t{0x0345, script::grek},  __script_data_t{0x0346, script::zzzz},
        __script_data_t{0x0363, script::latn},  __script_data_t{0x0370, script::zzzz},
        __script_data_t{0x0483, script::cyrl},  __script_data_t{0x0488, script::zzzz},
        __script_data_t{0x0589, script::armn},  __script_data_t{0x058A, script::zzzz},
        __script_data_t{0x060C, script::arab},  __script_data_t{0x060D, script::zzzz},
        __script_data_t{0x061B, script::arab},  __script_data_t{0x061D, script::zzzz},
        __script_data_t{0x061F, script::arab},  __script_data_t{0x0620, script::zzzz},
        __script_data_t{0x0640, script::adlm},  __script_data_t{0x0641, script::zzzz},
        __script_data_t{0x064B, script::arab},  __script_data_t{0x0656, script::zzzz},
        __script_data_t{0x0660, script::arab},  __script_data_t{0x066A, script::zzzz},
        __script_data_t{0x0670, script::arab},  __script_data_t{0x0671, script::zzzz},
        __script_data_t{0x06D4, script::arab},  __script_data_t{0x06D5, script::zzzz},
        __script_data_t{0x0951, script::beng},  __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::beng},  __script_data_t{0x0966, script::deva},
        __script_data_t{0x0970, script::zzzz},  __script_data_t{0x09E6, script::beng},
        __script_data_t{0x09F0, script::zzzz},  __script_data_t{0x0A66, script::guru},
        __script_data_t{0x0A70, script::zzzz},  __script_data_t{0x0AE6, script::gujr},
        __script_data_t{0x0AF0, script::zzzz},  __script_data_t{0x0BE6, script::gran},
        __script_data_t{0x0BF4, script::zzzz},  __script_data_t{0x0CE6, script::knda},
        __script_data_t{0x0CF0, script::zzzz},  __script_data_t{0x1040, script::cakm},
        __script_data_t{0x104A, script::zzzz},  __script_data_t{0x10FB, script::geor},
        __script_data_t{0x10FC, script::zzzz},  __script_data_t{0x1735, script::buhd},
        __script_data_t{0x1737, script::zzzz},  __script_data_t{0x1802, script::mong},
        __script_data_t{0x1804, script::zzzz},  __script_data_t{0x1805, script::mong},
        __script_data_t{0x1806, script::zzzz},  __script_data_t{0x1CD0, script::beng},
        __script_data_t{0x1CD1, script::deva},  __script_data_t{0x1CD2, script::beng},
        __script_data_t{0x1CD3, script::deva},  __script_data_t{0x1CD5, script::beng},
        __script_data_t{0x1CD7, script::deva},  __script_data_t{0x1CD8, script::beng},
        __script_data_t{0x1CD9, script::deva},  __script_data_t{0x1CE1, script::beng},
        __script_data_t{0x1CE2, script::deva},  __script_data_t{0x1CEA, script::beng},
        __script_data_t{0x1CEB, script::deva},  __script_data_t{0x1CED, script::beng},
        __script_data_t{0x1CEE, script::deva},  __script_data_t{0x1CF2, script::beng},
        __script_data_t{0x1CF3, script::deva},  __script_data_t{0x1CF5, script::beng},
        __script_data_t{0x1CF8, script::deva},  __script_data_t{0x1CFA, script::nand},
        __script_data_t{0x1CFB, script::zzzz},  __script_data_t{0x1DC0, script::grek},
        __script_data_t{0x1DC2, script::zzzz},  __script_data_t{0x202F, script::latn},
        __script_data_t{0x2030, script::zzzz},  __script_data_t{0x20F0, script::deva},
        __script_data_t{0x20F1, script::zzzz},  __script_data_t{0x2E43, script::cyrl},
        __script_data_t{0x2E44, script::zzzz},  __script_data_t{0x3001, script::bopo},
        __script_data_t{0x3004, script::zzzz},  __script_data_t{0x3006, script::hani},
        __script_data_t{0x3007, script::zzzz},  __script_data_t{0x3008, script::bopo},
        __script_data_t{0x3012, script::zzzz},  __script_data_t{0x3013, script::bopo},
        __script_data_t{0x3020, script::zzzz},  __script_data_t{0x302A, script::bopo},
        __script_data_t{0x302E, script::zzzz},  __script_data_t{0x3030, script::bopo},
        __script_data_t{0x3031, script::hira},  __script_data_t{0x3036, script::zzzz},
        __script_data_t{0x3037, script::bopo},  __script_data_t{0x3038, script::zzzz},
        __script_data_t{0x303C, script::hani},  __script_data_t{0x3040, script::zzzz},
        __script_data_t{0x3099, script::hira},  __script_data_t{0x309D, script::zzzz},
        __script_data_t{0x30A0, script::hira},  __script_data_t{0x30A1, script::zzzz},
        __script_data_t{0x30FB, script::bopo},  __script_data_t{0x30FC, script::hira},
        __script_data_t{0x30FD, script::zzzz},  __script_data_t{0x3190, script::hani},
        __script_data_t{0x31A0, script::zzzz},  __script_data_t{0x31C0, script::hani},
        __script_data_t{0x31E4, script::zzzz},  __script_data_t{0x3220, script::hani},
        __script_data_t{0x3248, script::zzzz},  __script_data_t{0x3280, script::hani},
        __script_data_t{0x32B1, script::zzzz},  __script_data_t{0x32C0, script::hani},
        __script_data_t{0x32CC, script::zzzz},  __script_data_t{0x3358, script::hani},
        __script_data_t{0x3371, script::zzzz},  __script_data_t{0x337B, script::hani},
        __script_data_t{0x3380, script::zzzz},  __script_data_t{0x33E0, script::hani},
        __script_data_t{0x33FF, script::zzzz},  __script_data_t{0xA66F, script::cyrl},
        __script_data_t{0xA670, script::zzzz},  __script_data_t{0xA830, script::deva},
        __script_data_t{0xA83A, script::zzzz},  __script_data_t{0xA8F1, script::beng},
        __script_data_t{0xA8F2, script::zzzz},  __script_data_t{0xA8F3, script::deva},
        __script_data_t{0xA8F4, script::zzzz},  __script_data_t{0xA92E, script::kali},
        __script_data_t{0xA92F, script::zzzz},  __script_data_t{0xA9CF, script::bugi},
        __script_data_t{0xA9D0, script::zzzz},  __script_data_t{0xFDF2, script::arab},
        __script_data_t{0xFDF3, script::zzzz},  __script_data_t{0xFDFD, script::arab},
        __script_data_t{0xFDFE, script::zzzz},  __script_data_t{0xFE45, script::bopo},
        __script_data_t{0xFE47, script::zzzz},  __script_data_t{0xFF61, script::bopo},
        __script_data_t{0xFF66, script::zzzz},  __script_data_t{0xFF70, script::hira},
        __script_data_t{0xFF71, script::zzzz},  __script_data_t{0xFF9E, script::hira},
        __script_data_t{0xFFA0, script::zzzz},  __script_data_t{0x10100, script::cprt},
        __script_data_t{0x10103, script::zzzz}, __script_data_t{0x10107, script::cprt},
        __script_data_t{0x10134, script::zzzz}, __script_data_t{0x10137, script::cprt},
        __script_data_t{0x10140, script::zzzz}, __script_data_t{0x102E0, script::arab},
        __script_data_t{0x102FC, script::zzzz}, __script_data_t{0x11301, script::gran},
        __script_data_t{0x11302, script::zzzz}, __script_data_t{0x11303, script::gran},
        __script_data_t{0x11304, script::zzzz}, __script_data_t{0x1133B, script::gran},
        __script_data_t{0x1133D, script::zzzz}, __script_data_t{0x11FD0, script::gran},
        __script_data_t{0x11FD2, script::zzzz}, __script_data_t{0x11FD3, script::gran},
        __script_data_t{0x11FD4, script::zzzz}, __script_data_t{0x1BCA0, script::dupl},
        __script_data_t{0x1BCA4, script::zzzz}, __script_data_t{0x1D360, script::hani},
        __script_data_t{0x1D372, script::zzzz}, __script_data_t{0x1F250, script::hani},
        __script_data_t{0x1F252, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{3302, script::zzzz},
        std::pair<char32_t, script>{3303, script::zzzz},
        std::pair<char32_t, script>{3304, script::zzzz},
        std::pair<char32_t, script>{3305, script::zzzz},
        std::pair<char32_t, script>{3306, script::zzzz},
        std::pair<char32_t, script>{3307, script::zzzz},
        std::pair<char32_t, script>{3308, script::zzzz},
        std::pair<char32_t, script>{3309, script::zzzz},
        std::pair<char32_t, script>{3310, script::zzzz},
        std::pair<char32_t, script>{3311, script::zzzz},
        std::pair<char32_t, script>{7410, script::deva},
        std::pair<char32_t, script>{8239, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1748, script::zzzz},
        std::pair<char32_t, script>{2986, script::gran},
        std::pair<char32_t, script>{2997, script::gran},
        std::pair<char32_t, script>{3059, script::zzzz},
        std::pair<char32_t, script>{7376, script::deva},
        std::pair<char32_t, script>{7378, script::deva},
        std::pair<char32_t, script>{7381, script::deva},
        std::pair<char32_t, script>{7382, script::deva},
        std::pair<char32_t, script>{7384, script::deva},
        std::pair<char32_t, script>{7393, script::deva},
        std::pair<char32_t, script>{7402, script::deva},
        std::pair<char32_t, script>{7405, script::deva},
        std::pair<char32_t, script>{7413, script::deva},
        std::pair<char32_t, script>{7414, script::deva}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<2> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0483, script::perm},  __script_data_t{0x0484, script::glag},
        __script_data_t{0x0485, script::latn},  __script_data_t{0x0487, script::glag},
        __script_data_t{0x0488, script::zzzz},  __script_data_t{0x0589, script::geor},
        __script_data_t{0x058A, script::zzzz},  __script_data_t{0x060C, script::rohg},
        __script_data_t{0x060D, script::zzzz},  __script_data_t{0x061B, script::rohg},
        __script_data_t{0x061C, script::syrc},  __script_data_t{0x061D, script::zzzz},
        __script_data_t{0x061F, script::rohg},  __script_data_t{0x0620, script::zzzz},
        __script_data_t{0x0640, script::arab},  __script_data_t{0x0641, script::zzzz},
        __script_data_t{0x064B, script::syrc},  __script_data_t{0x0656, script::zzzz},
        __script_data_t{0x0660, script::thaa},  __script_data_t{0x066A, script::zzzz},
        __script_data_t{0x0670, script::syrc},  __script_data_t{0x0671, script::zzzz},
        __script_data_t{0x06D4, script::rohg},  __script_data_t{0x06D5, script::zzzz},
        __script_data_t{0x0951, script::deva},  __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::deva},  __script_data_t{0x0966, script::dogr},
        __script_data_t{0x0970, script::zzzz},  __script_data_t{0x09E6, script::cakm},
        __script_data_t{0x09F0, script::zzzz},  __script_data_t{0x0A66, script::mult},
        __script_data_t{0x0A70, script::zzzz},  __script_data_t{0x0AE6, script::khoj},
        __script_data_t{0x0AF0, script::zzzz},  __script_data_t{0x0BE6, script::taml},
        __script_data_t{0x0BF4, script::zzzz},  __script_data_t{0x0CE6, script::nand},
        __script_data_t{0x0CF0, script::zzzz},  __script_data_t{0x1040, script::mymr},
        __script_data_t{0x104A, script::zzzz},  __script_data_t{0x10FB, script::latn},
        __script_data_t{0x10FC, script::zzzz},  __script_data_t{0x1735, script::hano},
        __script_data_t{0x1737, script::zzzz},  __script_data_t{0x1802, script::phag},
        __script_data_t{0x1804, script::zzzz},  __script_data_t{0x1805, script::phag},
        __script_data_t{0x1806, script::zzzz},  __script_data_t{0x1CD0, script::deva},
        __script_data_t{0x1CD1, script::zzzz},  __script_data_t{0x1CD2, script::deva},
        __script_data_t{0x1CD3, script::gran},  __script_data_t{0x1CD4, script::zzzz},
        __script_data_t{0x1CD5, script::deva},  __script_data_t{0x1CD7, script::shrd},
        __script_data_t{0x1CD8, script::deva},  __script_data_t{0x1CD9, script::shrd},
        __script_data_t{0x1CDA, script::knda},  __script_data_t{0x1CDB, script::zzzz},
        __script_data_t{0x1CDC, script::shrd},  __script_data_t{0x1CDE, script::zzzz},
        __script_data_t{0x1CE0, script::shrd},  __script_data_t{0x1CE1, script::deva},
        __script_data_t{0x1CE2, script::zzzz},  __script_data_t{0x1CE9, script::nand},
        __script_data_t{0x1CEA, script::deva},  __script_data_t{0x1CEB, script::zzzz},
        __script_data_t{0x1CED, script::deva},  __script_data_t{0x1CEE, script::zzzz},
        __script_data_t{0x1CF2, script::deva},  __script_data_t{0x1CF3, script::gran},
        __script_data_t{0x1CF5, script::deva},  __script_data_t{0x1CF7, script::zzzz},
        __script_data_t{0x1CF8, script::gran},  __script_data_t{0x1CFA, script::zzzz},
        __script_data_t{0x202F, script::mong},  __script_data_t{0x2030, script::zzzz},
        __script_data_t{0x20F0, script::gran},  __script_data_t{0x20F1, script::zzzz},
        __script_data_t{0x2E43, script::glag},  __script_data_t{0x2E44, script::zzzz},
        __script_data_t{0x3001, script::hang},  __script_data_t{0x3004, script::zzzz},
        __script_data_t{0x3008, script::hang},  __script_data_t{0x3012, script::zzzz},
        __script_data_t{0x3013, script::hang},  __script_data_t{0x3020, script::zzzz},
        __script_data_t{0x302A, script::hani},  __script_data_t{0x302E, script::zzzz},
        __script_data_t{0x3030, script::hang},  __script_data_t{0x3031, script::kana},
        __script_data_t{0x3036, script::zzzz},  __script_data_t{0x3037, script::hang},
        __script_data_t{0x3038, script::zzzz},  __script_data_t{0x303C, script::hira},
        __script_data_t{0x303E, script::zzzz},  __script_data_t{0x3099, script::kana},
        __script_data_t{0x309D, script::zzzz},  __script_data_t{0x30A0, script::kana},
        __script_data_t{0x30A1, script::zzzz},  __script_data_t{0x30FB, script::hang},
        __script_data_t{0x30FC, script::kana},  __script_data_t{0x30FD, script::zzzz},
        __script_data_t{0xA66F, script::glag},  __script_data_t{0xA670, script::zzzz},
        __script_data_t{0xA830, script::dogr},  __script_data_t{0xA83A, script::zzzz},
        __script_data_t{0xA8F1, script::deva},  __script_data_t{0xA8F2, script::zzzz},
        __script_data_t{0xA8F3, script::taml},  __script_data_t{0xA8F4, script::zzzz},
        __script_data_t{0xA92E, script::latn},  __script_data_t{0xA92F, script::zzzz},
        __script_data_t{0xA9CF, script::java},  __script_data_t{0xA9D0, script::zzzz},
        __script_data_t{0xFDF2, script::thaa},  __script_data_t{0xFDF3, script::zzzz},
        __script_data_t{0xFDFD, script::thaa},  __script_data_t{0xFDFE, script::zzzz},
        __script_data_t{0xFE45, script::hang},  __script_data_t{0xFE47, script::zzzz},
        __script_data_t{0xFF61, script::hang},  __script_data_t{0xFF66, script::zzzz},
        __script_data_t{0xFF70, script::kana},  __script_data_t{0xFF71, script::zzzz},
        __script_data_t{0xFF9E, script::kana},  __script_data_t{0xFFA0, script::zzzz},
        __script_data_t{0x10100, script::linb}, __script_data_t{0x10103, script::zzzz},
        __script_data_t{0x10107, script::lina}, __script_data_t{0x10134, script::zzzz},
        __script_data_t{0x10137, script::linb}, __script_data_t{0x10140, script::zzzz},
        __script_data_t{0x102E0, script::copt}, __script_data_t{0x102FC, script::zzzz},
        __script_data_t{0x11301, script::taml}, __script_data_t{0x11302, script::zzzz},
        __script_data_t{0x11303, script::taml}, __script_data_t{0x11304, script::zzzz},
        __script_data_t{0x1133B, script::taml}, __script_data_t{0x1133D, script::zzzz},
        __script_data_t{0x11FD0, script::taml}, __script_data_t{0x11FD2, script::zzzz},
        __script_data_t{0x11FD3, script::taml}, __script_data_t{0x11FD4, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{3302, script::zzzz},
        std::pair<char32_t, script>{3303, script::zzzz},
        std::pair<char32_t, script>{3304, script::zzzz},
        std::pair<char32_t, script>{3305, script::zzzz},
        std::pair<char32_t, script>{3306, script::zzzz},
        std::pair<char32_t, script>{3307, script::zzzz},
        std::pair<char32_t, script>{3308, script::zzzz},
        std::pair<char32_t, script>{3309, script::zzzz},
        std::pair<char32_t, script>{3310, script::zzzz},
        std::pair<char32_t, script>{3311, script::zzzz},
        std::pair<char32_t, script>{7401, script::zzzz},
        std::pair<char32_t, script>{7410, script::gran},
        std::pair<char32_t, script>{8239, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1548, script::syrc},
        std::pair<char32_t, script>{1563, script::syrc},
        std::pair<char32_t, script>{1567, script::syrc},
        std::pair<char32_t, script>{1748, script::zzzz},
        std::pair<char32_t, script>{2406, script::kthi},
        std::pair<char32_t, script>{2407, script::kthi},
        std::pair<char32_t, script>{2408, script::kthi},
        std::pair<char32_t, script>{2409, script::kthi},
        std::pair<char32_t, script>{2410, script::kthi},
        std::pair<char32_t, script>{2411, script::kthi},
        std::pair<char32_t, script>{2412, script::kthi},
        std::pair<char32_t, script>{2413, script::kthi},
        std::pair<char32_t, script>{2414, script::kthi},
        std::pair<char32_t, script>{2415, script::kthi},
        std::pair<char32_t, script>{2986, script::taml},
        std::pair<char32_t, script>{2997, script::taml},
        std::pair<char32_t, script>{3059, script::zzzz},
        std::pair<char32_t, script>{7376, script::gran},
        std::pair<char32_t, script>{7378, script::gran},
        std::pair<char32_t, script>{7381, script::zzzz},
        std::pair<char32_t, script>{7382, script::zzzz},
        std::pair<char32_t, script>{7384, script::zzzz},
        std::pair<char32_t, script>{7393, script::zzzz},
        std::pair<char32_t, script>{7402, script::zzzz},
        std::pair<char32_t, script>{7405, script::zzzz},
        std::pair<char32_t, script>{7413, script::knda},
        std::pair<char32_t, script>{7414, script::zzzz},
        std::pair<char32_t, script>{43056, script::gujr},
        std::pair<char32_t, script>{43057, script::gujr},
        std::pair<char32_t, script>{43058, script::gujr},
        std::pair<char32_t, script>{43059, script::gujr},
        std::pair<char32_t, script>{43060, script::gujr},
        std::pair<char32_t, script>{43061, script::gujr},
        std::pair<char32_t, script>{43062, script::gujr},
        std::pair<char32_t, script>{43063, script::gujr},
        std::pair<char32_t, script>{43064, script::gujr},
        std::pair<char32_t, script>{43065, script::gujr}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<3> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x060C, script::syrc},  __script_data_t{0x060D, script::zzzz},
        __script_data_t{0x061B, script::syrc},  __script_data_t{0x061C, script::thaa},
        __script_data_t{0x061D, script::zzzz},  __script_data_t{0x061F, script::syrc},
        __script_data_t{0x0620, script::zzzz},  __script_data_t{0x0640, script::mand},
        __script_data_t{0x0641, script::zzzz},  __script_data_t{0x0951, script::gran},
        __script_data_t{0x0953, script::zzzz},  __script_data_t{0x0964, script::dogr},
        __script_data_t{0x0966, script::kthi},  __script_data_t{0x0970, script::zzzz},
        __script_data_t{0x09E6, script::sylo},  __script_data_t{0x09F0, script::zzzz},
        __script_data_t{0x1040, script::tale},  __script_data_t{0x104A, script::zzzz},
        __script_data_t{0x1735, script::tagb},  __script_data_t{0x1737, script::zzzz},
        __script_data_t{0x1CD0, script::gran},  __script_data_t{0x1CD1, script::zzzz},
        __script_data_t{0x1CD2, script::gran},  __script_data_t{0x1CD3, script::zzzz},
        __script_data_t{0x1CDA, script::mlym},  __script_data_t{0x1CDB, script::zzzz},
        __script_data_t{0x1CF2, script::gran},  __script_data_t{0x1CF3, script::zzzz},
        __script_data_t{0x1CF4, script::knda},  __script_data_t{0x1CF5, script::zzzz},
        __script_data_t{0x20F0, script::latn},  __script_data_t{0x20F1, script::zzzz},
        __script_data_t{0x3001, script::hani},  __script_data_t{0x3004, script::zzzz},
        __script_data_t{0x3008, script::hani},  __script_data_t{0x3012, script::zzzz},
        __script_data_t{0x3013, script::hani},  __script_data_t{0x3020, script::zzzz},
        __script_data_t{0x3030, script::hani},  __script_data_t{0x3031, script::zzzz},
        __script_data_t{0x3037, script::hani},  __script_data_t{0x3038, script::zzzz},
        __script_data_t{0x303C, script::kana},  __script_data_t{0x303E, script::zzzz},
        __script_data_t{0x30FB, script::hani},  __script_data_t{0x30FC, script::zzzz},
        __script_data_t{0xA830, script::gujr},  __script_data_t{0xA83A, script::zzzz},
        __script_data_t{0xA92E, script::mymr},  __script_data_t{0xA92F, script::zzzz},
        __script_data_t{0xFE45, script::hani},  __script_data_t{0xFE47, script::zzzz},
        __script_data_t{0xFF61, script::hani},  __script_data_t{0xFF66, script::zzzz},
        __script_data_t{0x10107, script::linb}, __script_data_t{0x10134, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{7410, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1548, script::thaa},
        std::pair<char32_t, script>{1563, script::thaa},
        std::pair<char32_t, script>{1567, script::thaa},
        std::pair<char32_t, script>{2404, script::gran},
        std::pair<char32_t, script>{2405, script::gran},
        std::pair<char32_t, script>{2406, script::mahj},
        std::pair<char32_t, script>{2407, script::mahj},
        std::pair<char32_t, script>{2408, script::mahj},
        std::pair<char32_t, script>{2409, script::mahj},
        std::pair<char32_t, script>{2410, script::mahj},
        std::pair<char32_t, script>{2411, script::mahj},
        std::pair<char32_t, script>{2412, script::mahj},
        std::pair<char32_t, script>{2413, script::mahj},
        std::pair<char32_t, script>{2414, script::mahj},
        std::pair<char32_t, script>{2415, script::mahj},
        std::pair<char32_t, script>{7376, script::zzzz},
        std::pair<char32_t, script>{7378, script::zzzz},
        std::pair<char32_t, script>{7412, script::zzzz},
        std::pair<char32_t, script>{43056, script::guru},
        std::pair<char32_t, script>{43057, script::guru},
        std::pair<char32_t, script>{43058, script::guru},
        std::pair<char32_t, script>{43059, script::guru},
        std::pair<char32_t, script>{43060, script::guru},
        std::pair<char32_t, script>{43061, script::guru},
        std::pair<char32_t, script>{43062, script::guru},
        std::pair<char32_t, script>{43063, script::guru},
        std::pair<char32_t, script>{43064, script::guru},
        std::pair<char32_t, script>{43065, script::guru}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<4> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x060C, script::thaa}, __script_data_t{0x060D, script::zzzz},
        __script_data_t{0x061B, script::thaa}, __script_data_t{0x061C, script::zzzz},
        __script_data_t{0x061F, script::thaa}, __script_data_t{0x0620, script::zzzz},
        __script_data_t{0x0640, script::mani}, __script_data_t{0x0641, script::zzzz},
        __script_data_t{0x0951, script::gujr}, __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::gong}, __script_data_t{0x0966, script::mahj},
        __script_data_t{0x0970, script::zzzz}, __script_data_t{0x1735, script::tglg},
        __script_data_t{0x1737, script::zzzz}, __script_data_t{0x1CD0, script::knda},
        __script_data_t{0x1CD1, script::zzzz}, __script_data_t{0x1CD2, script::knda},
        __script_data_t{0x1CD3, script::zzzz}, __script_data_t{0x1CDA, script::orya},
        __script_data_t{0x1CDB, script::zzzz}, __script_data_t{0x1CF2, script::knda},
        __script_data_t{0x1CF3, script::zzzz}, __script_data_t{0x3001, script::hira},
        __script_data_t{0x3004, script::zzzz}, __script_data_t{0x3008, script::hira},
        __script_data_t{0x3012, script::zzzz}, __script_data_t{0x3013, script::hira},
        __script_data_t{0x3020, script::zzzz}, __script_data_t{0x3030, script::hira},
        __script_data_t{0x3031, script::zzzz}, __script_data_t{0x3037, script::hira},
        __script_data_t{0x3038, script::zzzz}, __script_data_t{0x30FB, script::hira},
        __script_data_t{0x30FC, script::zzzz}, __script_data_t{0xA830, script::guru},
        __script_data_t{0xA83A, script::zzzz}, __script_data_t{0xFE45, script::hira},
        __script_data_t{0xFE47, script::zzzz}, __script_data_t{0xFF61, script::hira},
        __script_data_t{0xFF66, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{7410, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1548, script::zzzz},
        std::pair<char32_t, script>{1563, script::zzzz},
        std::pair<char32_t, script>{1567, script::zzzz},
        std::pair<char32_t, script>{2404, script::gujr},
        std::pair<char32_t, script>{2405, script::gujr},
        std::pair<char32_t, script>{2406, script::zzzz},
        std::pair<char32_t, script>{2407, script::zzzz},
        std::pair<char32_t, script>{2408, script::zzzz},
        std::pair<char32_t, script>{2409, script::zzzz},
        std::pair<char32_t, script>{2410, script::zzzz},
        std::pair<char32_t, script>{2411, script::zzzz},
        std::pair<char32_t, script>{2412, script::zzzz},
        std::pair<char32_t, script>{2413, script::zzzz},
        std::pair<char32_t, script>{2414, script::zzzz},
        std::pair<char32_t, script>{2415, script::zzzz},
        std::pair<char32_t, script>{7376, script::zzzz},
        std::pair<char32_t, script>{7378, script::zzzz},
        std::pair<char32_t, script>{7386, script::taml},
        std::pair<char32_t, script>{43056, script::knda},
        std::pair<char32_t, script>{43057, script::knda},
        std::pair<char32_t, script>{43058, script::knda},
        std::pair<char32_t, script>{43059, script::knda},
        std::pair<char32_t, script>{43060, script::knda},
        std::pair<char32_t, script>{43061, script::knda},
        std::pair<char32_t, script>{43062, script::kthi},
        std::pair<char32_t, script>{43063, script::kthi},
        std::pair<char32_t, script>{43064, script::kthi},
        std::pair<char32_t, script>{43065, script::kthi}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<5> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0640, script::phlp},  __script_data_t{0x0641, script::zzzz},
        __script_data_t{0x0951, script::guru},  __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::gonm},  __script_data_t{0x0966, script::zzzz},
        __script_data_t{0x1CDA, script::taml},  __script_data_t{0x1CDB, script::zzzz},
        __script_data_t{0x1CF2, script::nand},  __script_data_t{0x1CF3, script::zzzz},
        __script_data_t{0x3001, script::kana},  __script_data_t{0x3004, script::zzzz},
        __script_data_t{0x3008, script::kana},  __script_data_t{0x3012, script::zzzz},
        __script_data_t{0x3013, script::kana},  __script_data_t{0x3020, script::zzzz},
        __script_data_t{0x3030, script::kana},  __script_data_t{0x3031, script::zzzz},
        __script_data_t{0x3037, script::kana},  __script_data_t{0x3038, script::zzzz},
        __script_data_t{0x30FB, script::kana},  __script_data_t{0x30FC, script::zzzz},
        __script_data_t{0xA830, script::khoj},  __script_data_t{0xA83A, script::zzzz},
        __script_data_t{0xFE45, script::kana},  __script_data_t{0xFE47, script::zzzz},
        __script_data_t{0xFF61, script::kana},  __script_data_t{0xFF66, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::gran},
        std::pair<char32_t, script>{2405, script::gran},
        std::pair<char32_t, script>{7410, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::guru},
        std::pair<char32_t, script>{2405, script::guru},
        std::pair<char32_t, script>{7386, script::telu},
        std::pair<char32_t, script>{43056, script::kthi},
        std::pair<char32_t, script>{43057, script::kthi},
        std::pair<char32_t, script>{43058, script::kthi},
        std::pair<char32_t, script>{43059, script::kthi},
        std::pair<char32_t, script>{43060, script::kthi},
        std::pair<char32_t, script>{43061, script::kthi},
        std::pair<char32_t, script>{43062, script::mahj},
        std::pair<char32_t, script>{43063, script::mahj},
        std::pair<char32_t, script>{43064, script::mahj},
        std::pair<char32_t, script>{43065, script::mahj}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<6> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0640, script::rohg}, __script_data_t{0x0641, script::zzzz},
        __script_data_t{0x0951, script::knda}, __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::gran}, __script_data_t{0x0966, script::zzzz},
        __script_data_t{0x1CDA, script::telu}, __script_data_t{0x1CDB, script::zzzz},
        __script_data_t{0x1CF2, script::orya}, __script_data_t{0x1CF3, script::zzzz},
        __script_data_t{0x3001, script::yiii}, __script_data_t{0x3003, script::zzzz},
        __script_data_t{0x3008, script::yiii}, __script_data_t{0x3012, script::zzzz},
        __script_data_t{0x3014, script::yiii}, __script_data_t{0x301C, script::zzzz},
        __script_data_t{0x30FB, script::yiii}, __script_data_t{0x30FC, script::zzzz},
        __script_data_t{0xA830, script::knda}, __script_data_t{0xA836, script::kthi},
        __script_data_t{0xA83A, script::zzzz}, __script_data_t{0xFF61, script::yiii},
        __script_data_t{0xFF66, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::gujr},
        std::pair<char32_t, script>{2405, script::gujr},
        std::pair<char32_t, script>{7410, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1600, script::syrc},
        std::pair<char32_t, script>{2404, script::knda},
        std::pair<char32_t, script>{2405, script::knda},
        std::pair<char32_t, script>{7386, script::zzzz},
        std::pair<char32_t, script>{43056, script::mahj},
        std::pair<char32_t, script>{43057, script::mahj},
        std::pair<char32_t, script>{43058, script::mahj},
        std::pair<char32_t, script>{43059, script::mahj},
        std::pair<char32_t, script>{43060, script::mahj},
        std::pair<char32_t, script>{43061, script::mahj},
        std::pair<char32_t, script>{43062, script::modi},
        std::pair<char32_t, script>{43063, script::modi},
        std::pair<char32_t, script>{43064, script::modi},
        std::pair<char32_t, script>{43065, script::modi}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<7> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0640, script::sogd}, __script_data_t{0x0641, script::zzzz},
        __script_data_t{0x0951, script::latn}, __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::gujr}, __script_data_t{0x0966, script::zzzz},
        __script_data_t{0x1CF2, script::telu}, __script_data_t{0x1CF3, script::zzzz},
        __script_data_t{0xA830, script::kthi}, __script_data_t{0xA836, script::mahj},
        __script_data_t{0xA83A, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::guru},
        std::pair<char32_t, script>{2405, script::guru},
        std::pair<char32_t, script>{7410, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1600, script::zzzz},
        std::pair<char32_t, script>{2404, script::mahj},
        std::pair<char32_t, script>{2405, script::limb},
        std::pair<char32_t, script>{43056, script::modi},
        std::pair<char32_t, script>{43057, script::modi},
        std::pair<char32_t, script>{43058, script::modi},
        std::pair<char32_t, script>{43059, script::modi},
        std::pair<char32_t, script>{43060, script::modi},
        std::pair<char32_t, script>{43061, script::modi},
        std::pair<char32_t, script>{43062, script::sind},
        std::pair<char32_t, script>{43063, script::sind},
        std::pair<char32_t, script>{43064, script::sind},
        std::pair<char32_t, script>{43065, script::sind}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<8> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0640, script::syrc}, __script_data_t{0x0641, script::zzzz},
        __script_data_t{0x0951, script::mlym}, __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::guru}, __script_data_t{0x0966, script::zzzz},
        __script_data_t{0x1CF2, script::tirh}, __script_data_t{0x1CF3, script::zzzz},
        __script_data_t{0xA830, script::mahj}, __script_data_t{0xA836, script::modi},
        __script_data_t{0xA83A, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::knda},
        std::pair<char32_t, script>{2405, script::knda},
        std::pair<char32_t, script>{7410, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{1600, script::zzzz},
        std::pair<char32_t, script>{2404, script::mlym},
        std::pair<char32_t, script>{2405, script::mahj},
        std::pair<char32_t, script>{43056, script::sind},
        std::pair<char32_t, script>{43057, script::sind},
        std::pair<char32_t, script>{43058, script::sind},
        std::pair<char32_t, script>{43059, script::sind},
        std::pair<char32_t, script>{43060, script::sind},
        std::pair<char32_t, script>{43061, script::sind},
        std::pair<char32_t, script>{43062, script::takr},
        std::pair<char32_t, script>{43063, script::takr},
        std::pair<char32_t, script>{43064, script::takr},
        std::pair<char32_t, script>{43065, script::takr}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<9> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0951, script::orya},  __script_data_t{0x0953, script::zzzz},
        __script_data_t{0x0964, script::knda},  __script_data_t{0x0966, script::zzzz},
        __script_data_t{0xA830, script::mlym},  __script_data_t{0xA833, script::modi},
        __script_data_t{0xA836, script::sind},  __script_data_t{0xA83A, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::mahj},
        std::pair<char32_t, script>{2405, script::limb}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::orya},
        std::pair<char32_t, script>{2405, script::mlym},
        std::pair<char32_t, script>{43056, script::takr},
        std::pair<char32_t, script>{43057, script::takr},
        std::pair<char32_t, script>{43058, script::takr},
        std::pair<char32_t, script>{43059, script::takr},
        std::pair<char32_t, script>{43060, script::takr},
        std::pair<char32_t, script>{43061, script::takr},
        std::pair<char32_t, script>{43062, script::tirh},
        std::pair<char32_t, script>{43063, script::tirh},
        std::pair<char32_t, script>{43064, script::tirh},
        std::pair<char32_t, script>{43065, script::tirh}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<10> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0951, script::shrd},  __script_data_t{0x0952, script::taml},
        __script_data_t{0x0953, script::zzzz},  __script_data_t{0x0964, script::mahj},
        __script_data_t{0x0965, script::limb},  __script_data_t{0x0966, script::zzzz},
        __script_data_t{0xA830, script::modi},  __script_data_t{0xA833, script::nand},
        __script_data_t{0xA836, script::takr},  __script_data_t{0xA83A, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::mlym},
        std::pair<char32_t, script>{2405, script::mahj},
        std::pair<char32_t, script>{43059, script::sind},
        std::pair<char32_t, script>{43060, script::sind},
        std::pair<char32_t, script>{43061, script::sind}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::sind},
        std::pair<char32_t, script>{2405, script::orya},
        std::pair<char32_t, script>{43056, script::tirh},
        std::pair<char32_t, script>{43057, script::tirh},
        std::pair<char32_t, script>{43058, script::tirh},
        std::pair<char32_t, script>{43059, script::tirh},
        std::pair<char32_t, script>{43060, script::tirh},
        std::pair<char32_t, script>{43061, script::tirh},
        std::pair<char32_t, script>{43062, script::zzzz},
        std::pair<char32_t, script>{43063, script::zzzz},
        std::pair<char32_t, script>{43064, script::zzzz},
        std::pair<char32_t, script>{43065, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<11> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0951, script::taml},  __script_data_t{0x0952, script::telu},
        __script_data_t{0x0953, script::zzzz},  __script_data_t{0x0964, script::mlym},
        __script_data_t{0x0965, script::mahj},  __script_data_t{0x0966, script::zzzz},
        __script_data_t{0xA830, script::nand},  __script_data_t{0xA833, script::sind},
        __script_data_t{0xA836, script::tirh},  __script_data_t{0xA83A, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::orya},
        std::pair<char32_t, script>{2405, script::mlym},
        std::pair<char32_t, script>{43056, script::sind},
        std::pair<char32_t, script>{43057, script::sind},
        std::pair<char32_t, script>{43058, script::sind},
        std::pair<char32_t, script>{43059, script::takr},
        std::pair<char32_t, script>{43060, script::takr},
        std::pair<char32_t, script>{43061, script::takr}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::sinh},
        std::pair<char32_t, script>{2405, script::sind},
        std::pair<char32_t, script>{43056, script::zzzz},
        std::pair<char32_t, script>{43057, script::zzzz},
        std::pair<char32_t, script>{43058, script::zzzz},
        std::pair<char32_t, script>{43059, script::zzzz},
        std::pair<char32_t, script>{43060, script::zzzz},
        std::pair<char32_t, script>{43061, script::zzzz},
        std::pair<char32_t, script>{43062, script::zzzz},
        std::pair<char32_t, script>{43063, script::zzzz},
        std::pair<char32_t, script>{43064, script::zzzz},
        std::pair<char32_t, script>{43065, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<12> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0951, script::telu}, __script_data_t{0x0952, script::tirh},
        __script_data_t{0x0953, script::zzzz}, __script_data_t{0x0964, script::nand},
        __script_data_t{0x0965, script::mlym}, __script_data_t{0x0966, script::zzzz},
        __script_data_t{0xA830, script::sind}, __script_data_t{0xA833, script::takr},
        __script_data_t{0xA836, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::sind},
        std::pair<char32_t, script>{2405, script::orya},
        std::pair<char32_t, script>{43056, script::takr},
        std::pair<char32_t, script>{43057, script::takr},
        std::pair<char32_t, script>{43058, script::takr},
        std::pair<char32_t, script>{43059, script::tirh},
        std::pair<char32_t, script>{43060, script::tirh},
        std::pair<char32_t, script>{43061, script::tirh}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2386, script::zzzz},
        std::pair<char32_t, script>{2404, script::sylo},
        std::pair<char32_t, script>{2405, script::sinh},
        std::pair<char32_t, script>{43056, script::zzzz},
        std::pair<char32_t, script>{43057, script::zzzz},
        std::pair<char32_t, script>{43058, script::zzzz},
        std::pair<char32_t, script>{43059, script::zzzz},
        std::pair<char32_t, script>{43060, script::zzzz},
        std::pair<char32_t, script>{43061, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<13> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0951, script::tirh},  __script_data_t{0x0952, script::zzzz},
        __script_data_t{0x0964, script::orya},  __script_data_t{0x0965, script::nand},
        __script_data_t{0x0966, script::zzzz},  __script_data_t{0xA830, script::takr},
        __script_data_t{0xA833, script::tirh},  __script_data_t{0xA836, script::zzzz},
        __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::sinh},
        std::pair<char32_t, script>{2405, script::sind},
        std::pair<char32_t, script>{43056, script::tirh},
        std::pair<char32_t, script>{43057, script::tirh},
        std::pair<char32_t, script>{43058, script::tirh},
        std::pair<char32_t, script>{43059, script::zzzz},
        std::pair<char32_t, script>{43060, script::zzzz},
        std::pair<char32_t, script>{43061, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2385, script::zzzz},
        std::pair<char32_t, script>{2404, script::takr},
        std::pair<char32_t, script>{2405, script::sylo},
        std::pair<char32_t, script>{43056, script::zzzz},
        std::pair<char32_t, script>{43057, script::zzzz},
        std::pair<char32_t, script>{43058, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<14> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0964, script::sind}, __script_data_t{0x0965, script::orya},
        __script_data_t{0x0966, script::zzzz}, __script_data_t{0xA830, script::tirh},
        __script_data_t{0xA833, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::sylo},
        std::pair<char32_t, script>{2405, script::sinh},
        std::pair<char32_t, script>{43056, script::zzzz},
        std::pair<char32_t, script>{43057, script::zzzz},
        std::pair<char32_t, script>{43058, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::taml},
        std::pair<char32_t, script>{2405, script::takr}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<15> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0964, script::sinh}, __script_data_t{0x0965, script::sind},
        __script_data_t{0x0966, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::takr},
        std::pair<char32_t, script>{2405, script::sylo}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::telu},
        std::pair<char32_t, script>{2405, script::taml}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<16> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0964, script::sylo}, __script_data_t{0x0965, script::sinh},
        __script_data_t{0x0966, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::taml},
        std::pair<char32_t, script>{2405, script::takr}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::tirh},
        std::pair<char32_t, script>{2405, script::telu}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<17> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0964, script::takr}, __script_data_t{0x0965, script::sylo},
        __script_data_t{0x0966, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::telu},
        std::pair<char32_t, script>{2405, script::taml}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::zzzz},
        std::pair<char32_t, script>{2405, script::tirh}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<18> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0964, script::taml}, __script_data_t{0x0965, script::takr},
        __script_data_t{0x0966, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::tirh},
        std::pair<char32_t, script>{2405, script::telu}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2404, script::zzzz},
        std::pair<char32_t, script>{2405, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<19> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0964, script::telu}, __script_data_t{0x0965, script::taml},
        __script_data_t{0x0966, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::zzzz},
        std::pair<char32_t, script>{2405, script::tirh}};
    static constexpr const std::array scripts_data_compat_v10_0 = {
        std::pair<char32_t, script>{2405, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }

        if constexpr(v <= uni::version::v10_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v10_0.begin(), scripts_data_compat_v10_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v10_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<20> {
    static constexpr const std::array scripts_data = {
        __script_data_t{0x0964, script::tirh}, __script_data_t{0x0965, script::telu},
        __script_data_t{0x0966, script::zzzz}, __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2404, script::zzzz},
        std::pair<char32_t, script>{2405, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<>
struct __script_data<21> {
    static constexpr const std::array scripts_data = {__script_data_t{0x0965, script::tirh},
                                                      __script_data_t{0x0966, script::zzzz},
                                                      __script_data_t{0x110000, script::zzzz}};
    static constexpr const std::array scripts_data_compat_v11_0 = {
        std::pair<char32_t, script>{2405, script::zzzz}};
    template<uni::version v>
    constexpr script older_cp_script(char32_t cp, script c) {
        if constexpr(v <= uni::version::v11_0) {
            const auto it =
                uni::lower_bound(scripts_data_compat_v11_0.begin(), scripts_data_compat_v11_0.end(),
                                 cp, [](const auto& e, char32_t cp) { return e.first < cp; });
            if(it != scripts_data_compat_v11_0.end() && cp == it->first)
                c = it->second;
        }
        return c;
    }
};
template<auto N, uni::version v = uni::version::standard_unicode_version>
constexpr script __cp_script(char32_t cp) {
    if(cp > 0x10FFFF)
        return script::unknown;

    constexpr const auto end = __script_data<N>::scripts_data.end();
    auto it = uni::upper_bound(__script_data<N>::scripts_data.begin(), end, cp,
                               [](char32_t cp, const __script_data_t& s) { return cp < s.first; });
    if(it == end)
        return script::unknown;
    it--;
    if constexpr(v < uni::version::v12_0) {
        return __script_data<N>::older_cp_script(cp, it->s);
    }
    return it->s;
}
template<uni::version v = uni::version::standard_unicode_version>
script __get_cp_script(char32_t cp, int idx) {
    switch(idx) {
        case 0: return __cp_script<0, v>(cp);
        case 1: return __cp_script<1, v>(cp);
        case 2: return __cp_script<2, v>(cp);
        case 3: return __cp_script<3, v>(cp);
        case 4: return __cp_script<4, v>(cp);
        case 5: return __cp_script<5, v>(cp);
        case 6: return __cp_script<6, v>(cp);
        case 7: return __cp_script<7, v>(cp);
        case 8: return __cp_script<8, v>(cp);
        case 9: return __cp_script<9, v>(cp);
        case 10: return __cp_script<10, v>(cp);
        case 11: return __cp_script<11, v>(cp);
        case 12: return __cp_script<12, v>(cp);
        case 13: return __cp_script<13, v>(cp);
        case 14: return __cp_script<14, v>(cp);
        case 15: return __cp_script<15, v>(cp);
        case 16: return __cp_script<16, v>(cp);
        case 17: return __cp_script<17, v>(cp);
        case 18: return __cp_script<18, v>(cp);
        case 19: return __cp_script<19, v>(cp);
        case 20: return __cp_script<20, v>(cp);
        case 21: return __cp_script<21, v>(cp);
    }
    return script::zzzz;
}
enum class block {
    adlam,
    aegean_numbers,
    ahom,
    alchemical,
    alchemical_symbols = alchemical,
    alphabetic_pf,
    alphabetic_presentation_forms = alphabetic_pf,
    anatolian_hieroglyphs,
    ancient_greek_music,
    ancient_greek_musical_notation = ancient_greek_music,
    ancient_greek_numbers,
    ancient_symbols,
    arabic,
    arabic_ext_a,
    arabic_extended_a = arabic_ext_a,
    arabic_math,
    arabic_mathematical_alphabetic_symbols = arabic_math,
    arabic_pf_a,
    arabic_presentation_forms_a = arabic_pf_a,
    arabic_pf_b,
    arabic_presentation_forms_b = arabic_pf_b,
    arabic_sup,
    arabic_supplement = arabic_sup,
    armenian,
    arrows,
    ascii,
    basic_latin = ascii,
    avestan,
    balinese,
    bamum,
    bamum_sup,
    bamum_supplement = bamum_sup,
    bassa_vah,
    batak,
    bengali,
    bhaiksuki,
    block_elements,
    bopomofo,
    bopomofo_ext,
    bopomofo_extended = bopomofo_ext,
    box_drawing,
    brahmi,
    braille,
    braille_patterns = braille,
    buginese,
    buhid,
    byzantine_music,
    byzantine_musical_symbols = byzantine_music,
    carian,
    caucasian_albanian,
    chakma,
    cham,
    cherokee,
    cherokee_sup,
    cherokee_supplement = cherokee_sup,
    chess_symbols,
    cjk,
    cjk_unified_ideographs = cjk,
    cjk_compat,
    cjk_compatibility = cjk_compat,
    cjk_compat_forms,
    cjk_compatibility_forms = cjk_compat_forms,
    cjk_compat_ideographs,
    cjk_compatibility_ideographs = cjk_compat_ideographs,
    cjk_compat_ideographs_sup,
    cjk_compatibility_ideographs_supplement = cjk_compat_ideographs_sup,
    cjk_ext_a,
    cjk_unified_ideographs_extension_a = cjk_ext_a,
    cjk_ext_b,
    cjk_unified_ideographs_extension_b = cjk_ext_b,
    cjk_ext_c,
    cjk_unified_ideographs_extension_c = cjk_ext_c,
    cjk_ext_d,
    cjk_unified_ideographs_extension_d = cjk_ext_d,
    cjk_ext_e,
    cjk_unified_ideographs_extension_e = cjk_ext_e,
    cjk_ext_f,
    cjk_unified_ideographs_extension_f = cjk_ext_f,
    cjk_radicals_sup,
    cjk_radicals_supplement = cjk_radicals_sup,
    cjk_strokes,
    cjk_symbols,
    cjk_symbols_and_punctuation = cjk_symbols,
    compat_jamo,
    hangul_compatibility_jamo = compat_jamo,
    control_pictures,
    coptic,
    coptic_epact_numbers,
    counting_rod,
    counting_rod_numerals = counting_rod,
    cuneiform,
    cuneiform_numbers,
    cuneiform_numbers_and_punctuation = cuneiform_numbers,
    currency_symbols,
    cypriot_syllabary,
    cyrillic,
    cyrillic_ext_a,
    cyrillic_extended_a = cyrillic_ext_a,
    cyrillic_ext_b,
    cyrillic_extended_b = cyrillic_ext_b,
    cyrillic_ext_c,
    cyrillic_extended_c = cyrillic_ext_c,
    cyrillic_sup,
    cyrillic_supplement = cyrillic_sup,
    deseret,
    devanagari,
    devanagari_ext,
    devanagari_extended = devanagari_ext,
    diacriticals,
    combining_diacritical_marks = diacriticals,
    diacriticals_ext,
    combining_diacritical_marks_extended = diacriticals_ext,
    diacriticals_for_symbols,
    combining_diacritical_marks_for_symbols = diacriticals_for_symbols,
    diacriticals_sup,
    combining_diacritical_marks_supplement = diacriticals_sup,
    dingbats,
    dogra,
    domino,
    domino_tiles = domino,
    duployan,
    early_dynastic_cuneiform,
    egyptian_hieroglyph_format_controls,
    egyptian_hieroglyphs,
    elbasan,
    elymaic,
    emoticons,
    enclosed_alphanum,
    enclosed_alphanumerics = enclosed_alphanum,
    enclosed_alphanum_sup,
    enclosed_alphanumeric_supplement = enclosed_alphanum_sup,
    enclosed_cjk,
    enclosed_cjk_letters_and_months = enclosed_cjk,
    enclosed_ideographic_sup,
    enclosed_ideographic_supplement = enclosed_ideographic_sup,
    ethiopic,
    ethiopic_ext,
    ethiopic_extended = ethiopic_ext,
    ethiopic_ext_a,
    ethiopic_extended_a = ethiopic_ext_a,
    ethiopic_sup,
    ethiopic_supplement = ethiopic_sup,
    geometric_shapes,
    geometric_shapes_ext,
    geometric_shapes_extended = geometric_shapes_ext,
    georgian,
    georgian_ext,
    georgian_extended = georgian_ext,
    georgian_sup,
    georgian_supplement = georgian_sup,
    glagolitic,
    glagolitic_sup,
    glagolitic_supplement = glagolitic_sup,
    gothic,
    grantha,
    greek,
    greek_and_coptic = greek,
    greek_ext,
    greek_extended = greek_ext,
    gujarati,
    gunjala_gondi,
    gurmukhi,
    half_and_full_forms,
    halfwidth_and_fullwidth_forms = half_and_full_forms,
    half_marks,
    combining_half_marks = half_marks,
    hangul,
    hangul_syllables = hangul,
    hanifi_rohingya,
    hanunoo,
    hatran,
    hebrew,
    high_pu_surrogates,
    high_private_use_surrogates = high_pu_surrogates,
    high_surrogates,
    hiragana,
    idc,
    ideographic_description_characters = idc,
    ideographic_symbols,
    ideographic_symbols_and_punctuation = ideographic_symbols,
    imperial_aramaic,
    indic_number_forms,
    common_indic_number_forms = indic_number_forms,
    indic_siyaq_numbers,
    inscriptional_pahlavi,
    inscriptional_parthian,
    ipa_ext,
    ipa_extensions = ipa_ext,
    jamo,
    hangul_jamo = jamo,
    jamo_ext_a,
    hangul_jamo_extended_a = jamo_ext_a,
    jamo_ext_b,
    hangul_jamo_extended_b = jamo_ext_b,
    javanese,
    kaithi,
    kana_ext_a,
    kana_extended_a = kana_ext_a,
    kana_sup,
    kana_supplement = kana_sup,
    kanbun,
    kangxi,
    kangxi_radicals = kangxi,
    kannada,
    katakana,
    katakana_ext,
    katakana_phonetic_extensions = katakana_ext,
    kayah_li,
    kharoshthi,
    khmer,
    khmer_symbols,
    khojki,
    khudawadi,
    lao,
    latin_1_sup,
    latin_1_supplement = latin_1_sup,
    latin_ext_a,
    latin_extended_a = latin_ext_a,
    latin_ext_additional,
    latin_extended_additional = latin_ext_additional,
    latin_ext_b,
    latin_extended_b = latin_ext_b,
    latin_ext_c,
    latin_extended_c = latin_ext_c,
    latin_ext_d,
    latin_extended_d = latin_ext_d,
    latin_ext_e,
    latin_extended_e = latin_ext_e,
    lepcha,
    letterlike_symbols,
    limbu,
    linear_a,
    linear_b_ideograms,
    linear_b_syllabary,
    lisu,
    low_surrogates,
    lycian,
    lydian,
    mahajani,
    mahjong,
    mahjong_tiles = mahjong,
    makasar,
    malayalam,
    mandaic,
    manichaean,
    marchen,
    masaram_gondi,
    math_alphanum,
    mathematical_alphanumeric_symbols = math_alphanum,
    math_operators,
    mathematical_operators = math_operators,
    mayan_numerals,
    medefaidrin,
    meetei_mayek,
    meetei_mayek_ext,
    meetei_mayek_extensions = meetei_mayek_ext,
    mende_kikakui,
    meroitic_cursive,
    meroitic_hieroglyphs,
    miao,
    misc_arrows,
    miscellaneous_symbols_and_arrows = misc_arrows,
    misc_math_symbols_a,
    miscellaneous_mathematical_symbols_a = misc_math_symbols_a,
    misc_math_symbols_b,
    miscellaneous_mathematical_symbols_b = misc_math_symbols_b,
    misc_pictographs,
    miscellaneous_symbols_and_pictographs = misc_pictographs,
    misc_symbols,
    miscellaneous_symbols = misc_symbols,
    misc_technical,
    miscellaneous_technical = misc_technical,
    modi,
    modifier_letters,
    spacing_modifier_letters = modifier_letters,
    modifier_tone_letters,
    mongolian,
    mongolian_sup,
    mongolian_supplement = mongolian_sup,
    mro,
    multani,
    music,
    musical_symbols = music,
    myanmar,
    myanmar_ext_a,
    myanmar_extended_a = myanmar_ext_a,
    myanmar_ext_b,
    myanmar_extended_b = myanmar_ext_b,
    nabataean,
    nandinagari,
    nb,
    no_block = nb,
    new_tai_lue,
    newa,
    nko,
    number_forms,
    nushu,
    nyiakeng_puachue_hmong,
    ocr,
    optical_character_recognition = ocr,
    ogham,
    ol_chiki,
    old_hungarian,
    old_italic,
    old_north_arabian,
    old_permic,
    old_persian,
    old_sogdian,
    old_south_arabian,
    old_turkic,
    oriya,
    ornamental_dingbats,
    osage,
    osmanya,
    ottoman_siyaq_numbers,
    pahawh_hmong,
    palmyrene,
    pau_cin_hau,
    phags_pa,
    phaistos,
    phaistos_disc = phaistos,
    phoenician,
    phonetic_ext,
    phonetic_extensions = phonetic_ext,
    phonetic_ext_sup,
    phonetic_extensions_supplement = phonetic_ext_sup,
    playing_cards,
    psalter_pahlavi,
    pua,
    private_use_area = pua,
    punctuation,
    general_punctuation = punctuation,
    rejang,
    rumi,
    rumi_numeral_symbols = rumi,
    runic,
    samaritan,
    saurashtra,
    sharada,
    shavian,
    shorthand_format_controls,
    siddham,
    sinhala,
    sinhala_archaic_numbers,
    small_forms,
    small_form_variants = small_forms,
    small_kana_ext,
    small_kana_extension = small_kana_ext,
    sogdian,
    sora_sompeng,
    soyombo,
    specials,
    sundanese,
    sundanese_sup,
    sundanese_supplement = sundanese_sup,
    sup_arrows_a,
    supplemental_arrows_a = sup_arrows_a,
    sup_arrows_b,
    supplemental_arrows_b = sup_arrows_b,
    sup_arrows_c,
    supplemental_arrows_c = sup_arrows_c,
    sup_math_operators,
    supplemental_mathematical_operators = sup_math_operators,
    sup_pua_a,
    supplementary_private_use_area_a = sup_pua_a,
    sup_pua_b,
    supplementary_private_use_area_b = sup_pua_b,
    sup_punctuation,
    supplemental_punctuation = sup_punctuation,
    sup_symbols_and_pictographs,
    supplemental_symbols_and_pictographs = sup_symbols_and_pictographs,
    super_and_sub,
    superscripts_and_subscripts = super_and_sub,
    sutton_signwriting,
    syloti_nagri,
    symbols_and_pictographs_ext_a,
    symbols_and_pictographs_extended_a = symbols_and_pictographs_ext_a,
    syriac,
    syriac_sup,
    syriac_supplement = syriac_sup,
    tagalog,
    tagbanwa,
    tags,
    tai_le,
    tai_tham,
    tai_viet,
    tai_xuan_jing,
    tai_xuan_jing_symbols = tai_xuan_jing,
    takri,
    tamil,
    tamil_sup,
    tamil_supplement = tamil_sup,
    tangut,
    tangut_components,
    telugu,
    thaana,
    thai,
    tibetan,
    tifinagh,
    tirhuta,
    transport_and_map,
    transport_and_map_symbols = transport_and_map,
    ucas,
    unified_canadian_aboriginal_syllabics = ucas,
    ucas_ext,
    unified_canadian_aboriginal_syllabics_extended = ucas_ext,
    ugaritic,
    vai,
    vedic_ext,
    vedic_extensions = vedic_ext,
    vertical_forms,
    vs,
    variation_selectors = vs,
    vs_sup,
    variation_selectors_supplement = vs_sup,
    wancho,
    warang_citi,
    yi_radicals,
    yi_syllables,
    yijing,
    yijing_hexagram_symbols = yijing,
    zanabazar_square,
    __max
};
static constexpr const std::array __blocks_names = {
    __string_with_idx{"adlam", 0},
    __string_with_idx{"aegean_numbers", 1},
    __string_with_idx{"ahom", 2},
    __string_with_idx{"alchemical", 3},
    __string_with_idx{"alchemical_symbols", 3},
    __string_with_idx{"alphabetic_pf", 4},
    __string_with_idx{"alphabetic_presentation_forms", 4},
    __string_with_idx{"anatolian_hieroglyphs", 5},
    __string_with_idx{"ancient_greek_music", 6},
    __string_with_idx{"ancient_greek_musical_notation", 6},
    __string_with_idx{"ancient_greek_numbers", 7},
    __string_with_idx{"ancient_symbols", 8},
    __string_with_idx{"arabic", 9},
    __string_with_idx{"arabic_ext_a", 10},
    __string_with_idx{"arabic_extended_a", 10},
    __string_with_idx{"arabic_math", 11},
    __string_with_idx{"arabic_mathematical_alphabetic_symbols", 11},
    __string_with_idx{"arabic_pf_a", 12},
    __string_with_idx{"arabic_pf_b", 13},
    __string_with_idx{"arabic_presentation_forms_a", 12},
    __string_with_idx{"arabic_presentation_forms_b", 13},
    __string_with_idx{"arabic_sup", 14},
    __string_with_idx{"arabic_supplement", 14},
    __string_with_idx{"armenian", 15},
    __string_with_idx{"arrows", 16},
    __string_with_idx{"ascii", 17},
    __string_with_idx{"avestan", 18},
    __string_with_idx{"balinese", 19},
    __string_with_idx{"bamum", 20},
    __string_with_idx{"bamum_sup", 21},
    __string_with_idx{"bamum_supplement", 21},
    __string_with_idx{"basic_latin", 17},
    __string_with_idx{"bassa_vah", 22},
    __string_with_idx{"batak", 23},
    __string_with_idx{"bengali", 24},
    __string_with_idx{"bhaiksuki", 25},
    __string_with_idx{"block_elements", 26},
    __string_with_idx{"bopomofo", 27},
    __string_with_idx{"bopomofo_ext", 28},
    __string_with_idx{"bopomofo_extended", 28},
    __string_with_idx{"box_drawing", 29},
    __string_with_idx{"brahmi", 30},
    __string_with_idx{"braille", 31},
    __string_with_idx{"braille_patterns", 31},
    __string_with_idx{"buginese", 32},
    __string_with_idx{"buhid", 33},
    __string_with_idx{"byzantine_music", 34},
    __string_with_idx{"byzantine_musical_symbols", 34},
    __string_with_idx{"carian", 35},
    __string_with_idx{"caucasian_albanian", 36},
    __string_with_idx{"chakma", 37},
    __string_with_idx{"cham", 38},
    __string_with_idx{"cherokee", 39},
    __string_with_idx{"cherokee_sup", 40},
    __string_with_idx{"cherokee_supplement", 40},
    __string_with_idx{"chess_symbols", 41},
    __string_with_idx{"cjk", 42},
    __string_with_idx{"cjk_compat", 43},
    __string_with_idx{"cjk_compat_forms", 44},
    __string_with_idx{"cjk_compat_ideographs", 45},
    __string_with_idx{"cjk_compat_ideographs_sup", 46},
    __string_with_idx{"cjk_compatibility", 43},
    __string_with_idx{"cjk_compatibility_forms", 44},
    __string_with_idx{"cjk_compatibility_ideographs", 45},
    __string_with_idx{"cjk_compatibility_ideographs_supplement", 46},
    __string_with_idx{"cjk_ext_a", 47},
    __string_with_idx{"cjk_ext_b", 48},
    __string_with_idx{"cjk_ext_c", 49},
    __string_with_idx{"cjk_ext_d", 50},
    __string_with_idx{"cjk_ext_e", 51},
    __string_with_idx{"cjk_ext_f", 52},
    __string_with_idx{"cjk_radicals_sup", 53},
    __string_with_idx{"cjk_radicals_supplement", 53},
    __string_with_idx{"cjk_strokes", 54},
    __string_with_idx{"cjk_symbols", 55},
    __string_with_idx{"cjk_symbols_and_punctuation", 55},
    __string_with_idx{"cjk_unified_ideographs", 42},
    __string_with_idx{"cjk_unified_ideographs_extension_a", 47},
    __string_with_idx{"cjk_unified_ideographs_extension_b", 48},
    __string_with_idx{"cjk_unified_ideographs_extension_c", 49},
    __string_with_idx{"cjk_unified_ideographs_extension_d", 50},
    __string_with_idx{"cjk_unified_ideographs_extension_e", 51},
    __string_with_idx{"cjk_unified_ideographs_extension_f", 52},
    __string_with_idx{"combining_diacritical_marks", 73},
    __string_with_idx{"combining_diacritical_marks_extended", 74},
    __string_with_idx{"combining_diacritical_marks_for_symbols", 75},
    __string_with_idx{"combining_diacritical_marks_supplement", 76},
    __string_with_idx{"combining_half_marks", 110},
    __string_with_idx{"common_indic_number_forms", 122},
    __string_with_idx{"compat_jamo", 56},
    __string_with_idx{"control_pictures", 57},
    __string_with_idx{"coptic", 58},
    __string_with_idx{"coptic_epact_numbers", 59},
    __string_with_idx{"counting_rod", 60},
    __string_with_idx{"counting_rod_numerals", 60},
    __string_with_idx{"cuneiform", 61},
    __string_with_idx{"cuneiform_numbers", 62},
    __string_with_idx{"cuneiform_numbers_and_punctuation", 62},
    __string_with_idx{"currency_symbols", 63},
    __string_with_idx{"cypriot_syllabary", 64},
    __string_with_idx{"cyrillic", 65},
    __string_with_idx{"cyrillic_ext_a", 66},
    __string_with_idx{"cyrillic_ext_b", 67},
    __string_with_idx{"cyrillic_ext_c", 68},
    __string_with_idx{"cyrillic_extended_a", 66},
    __string_with_idx{"cyrillic_extended_b", 67},
    __string_with_idx{"cyrillic_extended_c", 68},
    __string_with_idx{"cyrillic_sup", 69},
    __string_with_idx{"cyrillic_supplement", 69},
    __string_with_idx{"deseret", 70},
    __string_with_idx{"devanagari", 71},
    __string_with_idx{"devanagari_ext", 72},
    __string_with_idx{"devanagari_extended", 72},
    __string_with_idx{"diacriticals", 73},
    __string_with_idx{"diacriticals_ext", 74},
    __string_with_idx{"diacriticals_for_symbols", 75},
    __string_with_idx{"diacriticals_sup", 76},
    __string_with_idx{"dingbats", 77},
    __string_with_idx{"dogra", 78},
    __string_with_idx{"domino", 79},
    __string_with_idx{"domino_tiles", 79},
    __string_with_idx{"duployan", 80},
    __string_with_idx{"early_dynastic_cuneiform", 81},
    __string_with_idx{"egyptian_hieroglyph_format_controls", 82},
    __string_with_idx{"egyptian_hieroglyphs", 83},
    __string_with_idx{"elbasan", 84},
    __string_with_idx{"elymaic", 85},
    __string_with_idx{"emoticons", 86},
    __string_with_idx{"enclosed_alphanum", 87},
    __string_with_idx{"enclosed_alphanum_sup", 88},
    __string_with_idx{"enclosed_alphanumeric_supplement", 88},
    __string_with_idx{"enclosed_alphanumerics", 87},
    __string_with_idx{"enclosed_cjk", 89},
    __string_with_idx{"enclosed_cjk_letters_and_months", 89},
    __string_with_idx{"enclosed_ideographic_sup", 90},
    __string_with_idx{"enclosed_ideographic_supplement", 90},
    __string_with_idx{"ethiopic", 91},
    __string_with_idx{"ethiopic_ext", 92},
    __string_with_idx{"ethiopic_ext_a", 93},
    __string_with_idx{"ethiopic_extended", 92},
    __string_with_idx{"ethiopic_extended_a", 93},
    __string_with_idx{"ethiopic_sup", 94},
    __string_with_idx{"ethiopic_supplement", 94},
    __string_with_idx{"general_punctuation", 234},
    __string_with_idx{"geometric_shapes", 95},
    __string_with_idx{"geometric_shapes_ext", 96},
    __string_with_idx{"geometric_shapes_extended", 96},
    __string_with_idx{"georgian", 97},
    __string_with_idx{"georgian_ext", 98},
    __string_with_idx{"georgian_extended", 98},
    __string_with_idx{"georgian_sup", 99},
    __string_with_idx{"georgian_supplement", 99},
    __string_with_idx{"glagolitic", 100},
    __string_with_idx{"glagolitic_sup", 101},
    __string_with_idx{"glagolitic_supplement", 101},
    __string_with_idx{"gothic", 102},
    __string_with_idx{"grantha", 103},
    __string_with_idx{"greek", 104},
    __string_with_idx{"greek_and_coptic", 104},
    __string_with_idx{"greek_ext", 105},
    __string_with_idx{"greek_extended", 105},
    __string_with_idx{"gujarati", 106},
    __string_with_idx{"gunjala_gondi", 107},
    __string_with_idx{"gurmukhi", 108},
    __string_with_idx{"half_and_full_forms", 109},
    __string_with_idx{"half_marks", 110},
    __string_with_idx{"halfwidth_and_fullwidth_forms", 109},
    __string_with_idx{"hangul", 111},
    __string_with_idx{"hangul_compatibility_jamo", 56},
    __string_with_idx{"hangul_jamo", 127},
    __string_with_idx{"hangul_jamo_extended_a", 128},
    __string_with_idx{"hangul_jamo_extended_b", 129},
    __string_with_idx{"hangul_syllables", 111},
    __string_with_idx{"hanifi_rohingya", 112},
    __string_with_idx{"hanunoo", 113},
    __string_with_idx{"hatran", 114},
    __string_with_idx{"hebrew", 115},
    __string_with_idx{"high_private_use_surrogates", 116},
    __string_with_idx{"high_pu_surrogates", 116},
    __string_with_idx{"high_surrogates", 117},
    __string_with_idx{"hiragana", 118},
    __string_with_idx{"idc", 119},
    __string_with_idx{"ideographic_description_characters", 119},
    __string_with_idx{"ideographic_symbols", 120},
    __string_with_idx{"ideographic_symbols_and_punctuation", 120},
    __string_with_idx{"imperial_aramaic", 121},
    __string_with_idx{"indic_number_forms", 122},
    __string_with_idx{"indic_siyaq_numbers", 123},
    __string_with_idx{"inscriptional_pahlavi", 124},
    __string_with_idx{"inscriptional_parthian", 125},
    __string_with_idx{"ipa_ext", 126},
    __string_with_idx{"ipa_extensions", 126},
    __string_with_idx{"jamo", 127},
    __string_with_idx{"jamo_ext_a", 128},
    __string_with_idx{"jamo_ext_b", 129},
    __string_with_idx{"javanese", 130},
    __string_with_idx{"kaithi", 131},
    __string_with_idx{"kana_ext_a", 132},
    __string_with_idx{"kana_extended_a", 132},
    __string_with_idx{"kana_sup", 133},
    __string_with_idx{"kana_supplement", 133},
    __string_with_idx{"kanbun", 134},
    __string_with_idx{"kangxi", 135},
    __string_with_idx{"kangxi_radicals", 135},
    __string_with_idx{"kannada", 136},
    __string_with_idx{"katakana", 137},
    __string_with_idx{"katakana_ext", 138},
    __string_with_idx{"katakana_phonetic_extensions", 138},
    __string_with_idx{"kayah_li", 139},
    __string_with_idx{"kharoshthi", 140},
    __string_with_idx{"khmer", 141},
    __string_with_idx{"khmer_symbols", 142},
    __string_with_idx{"khojki", 143},
    __string_with_idx{"khudawadi", 144},
    __string_with_idx{"lao", 145},
    __string_with_idx{"latin_1_sup", 146},
    __string_with_idx{"latin_1_supplement", 146},
    __string_with_idx{"latin_ext_a", 147},
    __string_with_idx{"latin_ext_additional", 148},
    __string_with_idx{"latin_ext_b", 149},
    __string_with_idx{"latin_ext_c", 150},
    __string_with_idx{"latin_ext_d", 151},
    __string_with_idx{"latin_ext_e", 152},
    __string_with_idx{"latin_extended_a", 147},
    __string_with_idx{"latin_extended_additional", 148},
    __string_with_idx{"latin_extended_b", 149},
    __string_with_idx{"latin_extended_c", 150},
    __string_with_idx{"latin_extended_d", 151},
    __string_with_idx{"latin_extended_e", 152},
    __string_with_idx{"lepcha", 153},
    __string_with_idx{"letterlike_symbols", 154},
    __string_with_idx{"limbu", 155},
    __string_with_idx{"linear_a", 156},
    __string_with_idx{"linear_b_ideograms", 157},
    __string_with_idx{"linear_b_syllabary", 158},
    __string_with_idx{"lisu", 159},
    __string_with_idx{"low_surrogates", 160},
    __string_with_idx{"lycian", 161},
    __string_with_idx{"lydian", 162},
    __string_with_idx{"mahajani", 163},
    __string_with_idx{"mahjong", 164},
    __string_with_idx{"mahjong_tiles", 164},
    __string_with_idx{"makasar", 165},
    __string_with_idx{"malayalam", 166},
    __string_with_idx{"mandaic", 167},
    __string_with_idx{"manichaean", 168},
    __string_with_idx{"marchen", 169},
    __string_with_idx{"masaram_gondi", 170},
    __string_with_idx{"math_alphanum", 171},
    __string_with_idx{"math_operators", 172},
    __string_with_idx{"mathematical_alphanumeric_symbols", 171},
    __string_with_idx{"mathematical_operators", 172},
    __string_with_idx{"mayan_numerals", 173},
    __string_with_idx{"medefaidrin", 174},
    __string_with_idx{"meetei_mayek", 175},
    __string_with_idx{"meetei_mayek_ext", 176},
    __string_with_idx{"meetei_mayek_extensions", 176},
    __string_with_idx{"mende_kikakui", 177},
    __string_with_idx{"meroitic_cursive", 178},
    __string_with_idx{"meroitic_hieroglyphs", 179},
    __string_with_idx{"miao", 180},
    __string_with_idx{"misc_arrows", 181},
    __string_with_idx{"misc_math_symbols_a", 182},
    __string_with_idx{"misc_math_symbols_b", 183},
    __string_with_idx{"misc_pictographs", 184},
    __string_with_idx{"misc_symbols", 185},
    __string_with_idx{"misc_technical", 186},
    __string_with_idx{"miscellaneous_mathematical_symbols_a", 182},
    __string_with_idx{"miscellaneous_mathematical_symbols_b", 183},
    __string_with_idx{"miscellaneous_symbols", 185},
    __string_with_idx{"miscellaneous_symbols_and_arrows", 181},
    __string_with_idx{"miscellaneous_symbols_and_pictographs", 184},
    __string_with_idx{"miscellaneous_technical", 186},
    __string_with_idx{"modi", 187},
    __string_with_idx{"modifier_letters", 188},
    __string_with_idx{"modifier_tone_letters", 189},
    __string_with_idx{"mongolian", 190},
    __string_with_idx{"mongolian_sup", 191},
    __string_with_idx{"mongolian_supplement", 191},
    __string_with_idx{"mro", 192},
    __string_with_idx{"multani", 193},
    __string_with_idx{"music", 194},
    __string_with_idx{"musical_symbols", 194},
    __string_with_idx{"myanmar", 195},
    __string_with_idx{"myanmar_ext_a", 196},
    __string_with_idx{"myanmar_ext_b", 197},
    __string_with_idx{"myanmar_extended_a", 196},
    __string_with_idx{"myanmar_extended_b", 197},
    __string_with_idx{"nabataean", 198},
    __string_with_idx{"nandinagari", 199},
    __string_with_idx{"nb", 200},
    __string_with_idx{"new_tai_lue", 201},
    __string_with_idx{"newa", 202},
    __string_with_idx{"nko", 203},
    __string_with_idx{"no_block", 200},
    __string_with_idx{"number_forms", 204},
    __string_with_idx{"nushu", 205},
    __string_with_idx{"nyiakeng_puachue_hmong", 206},
    __string_with_idx{"ocr", 207},
    __string_with_idx{"ogham", 208},
    __string_with_idx{"ol_chiki", 209},
    __string_with_idx{"old_hungarian", 210},
    __string_with_idx{"old_italic", 211},
    __string_with_idx{"old_north_arabian", 212},
    __string_with_idx{"old_permic", 213},
    __string_with_idx{"old_persian", 214},
    __string_with_idx{"old_sogdian", 215},
    __string_with_idx{"old_south_arabian", 216},
    __string_with_idx{"old_turkic", 217},
    __string_with_idx{"optical_character_recognition", 207},
    __string_with_idx{"oriya", 218},
    __string_with_idx{"ornamental_dingbats", 219},
    __string_with_idx{"osage", 220},
    __string_with_idx{"osmanya", 221},
    __string_with_idx{"ottoman_siyaq_numbers", 222},
    __string_with_idx{"pahawh_hmong", 223},
    __string_with_idx{"palmyrene", 224},
    __string_with_idx{"pau_cin_hau", 225},
    __string_with_idx{"phags_pa", 226},
    __string_with_idx{"phaistos", 227},
    __string_with_idx{"phaistos_disc", 227},
    __string_with_idx{"phoenician", 228},
    __string_with_idx{"phonetic_ext", 229},
    __string_with_idx{"phonetic_ext_sup", 230},
    __string_with_idx{"phonetic_extensions", 229},
    __string_with_idx{"phonetic_extensions_supplement", 230},
    __string_with_idx{"playing_cards", 231},
    __string_with_idx{"private_use_area", 233},
    __string_with_idx{"psalter_pahlavi", 232},
    __string_with_idx{"pua", 233},
    __string_with_idx{"punctuation", 234},
    __string_with_idx{"rejang", 235},
    __string_with_idx{"rumi", 236},
    __string_with_idx{"rumi_numeral_symbols", 236},
    __string_with_idx{"runic", 237},
    __string_with_idx{"samaritan", 238},
    __string_with_idx{"saurashtra", 239},
    __string_with_idx{"sharada", 240},
    __string_with_idx{"shavian", 241},
    __string_with_idx{"shorthand_format_controls", 242},
    __string_with_idx{"siddham", 243},
    __string_with_idx{"sinhala", 244},
    __string_with_idx{"sinhala_archaic_numbers", 245},
    __string_with_idx{"small_form_variants", 246},
    __string_with_idx{"small_forms", 246},
    __string_with_idx{"small_kana_ext", 247},
    __string_with_idx{"small_kana_extension", 247},
    __string_with_idx{"sogdian", 248},
    __string_with_idx{"sora_sompeng", 249},
    __string_with_idx{"soyombo", 250},
    __string_with_idx{"spacing_modifier_letters", 188},
    __string_with_idx{"specials", 251},
    __string_with_idx{"sundanese", 252},
    __string_with_idx{"sundanese_sup", 253},
    __string_with_idx{"sundanese_supplement", 253},
    __string_with_idx{"sup_arrows_a", 254},
    __string_with_idx{"sup_arrows_b", 255},
    __string_with_idx{"sup_arrows_c", 256},
    __string_with_idx{"sup_math_operators", 257},
    __string_with_idx{"sup_pua_a", 258},
    __string_with_idx{"sup_pua_b", 259},
    __string_with_idx{"sup_punctuation", 260},
    __string_with_idx{"sup_symbols_and_pictographs", 261},
    __string_with_idx{"super_and_sub", 262},
    __string_with_idx{"superscripts_and_subscripts", 262},
    __string_with_idx{"supplemental_arrows_a", 254},
    __string_with_idx{"supplemental_arrows_b", 255},
    __string_with_idx{"supplemental_arrows_c", 256},
    __string_with_idx{"supplemental_mathematical_operators", 257},
    __string_with_idx{"supplemental_punctuation", 260},
    __string_with_idx{"supplemental_symbols_and_pictographs", 261},
    __string_with_idx{"supplementary_private_use_area_a", 258},
    __string_with_idx{"supplementary_private_use_area_b", 259},
    __string_with_idx{"sutton_signwriting", 263},
    __string_with_idx{"syloti_nagri", 264},
    __string_with_idx{"symbols_and_pictographs_ext_a", 265},
    __string_with_idx{"symbols_and_pictographs_extended_a", 265},
    __string_with_idx{"syriac", 266},
    __string_with_idx{"syriac_sup", 267},
    __string_with_idx{"syriac_supplement", 267},
    __string_with_idx{"tagalog", 268},
    __string_with_idx{"tagbanwa", 269},
    __string_with_idx{"tags", 270},
    __string_with_idx{"tai_le", 271},
    __string_with_idx{"tai_tham", 272},
    __string_with_idx{"tai_viet", 273},
    __string_with_idx{"tai_xuan_jing", 274},
    __string_with_idx{"tai_xuan_jing_symbols", 274},
    __string_with_idx{"takri", 275},
    __string_with_idx{"tamil", 276},
    __string_with_idx{"tamil_sup", 277},
    __string_with_idx{"tamil_supplement", 277},
    __string_with_idx{"tangut", 278},
    __string_with_idx{"tangut_components", 279},
    __string_with_idx{"telugu", 280},
    __string_with_idx{"thaana", 281},
    __string_with_idx{"thai", 282},
    __string_with_idx{"tibetan", 283},
    __string_with_idx{"tifinagh", 284},
    __string_with_idx{"tirhuta", 285},
    __string_with_idx{"transport_and_map", 286},
    __string_with_idx{"transport_and_map_symbols", 286},
    __string_with_idx{"ucas", 287},
    __string_with_idx{"ucas_ext", 288},
    __string_with_idx{"ugaritic", 289},
    __string_with_idx{"unified_canadian_aboriginal_syllabics", 287},
    __string_with_idx{"unified_canadian_aboriginal_syllabics_extended", 288},
    __string_with_idx{"vai", 290},
    __string_with_idx{"variation_selectors", 293},
    __string_with_idx{"variation_selectors_supplement", 294},
    __string_with_idx{"vedic_ext", 291},
    __string_with_idx{"vedic_extensions", 291},
    __string_with_idx{"vertical_forms", 292},
    __string_with_idx{"vs", 293},
    __string_with_idx{"vs_sup", 294},
    __string_with_idx{"wancho", 295},
    __string_with_idx{"warang_citi", 296},
    __string_with_idx{"yi_radicals", 297},
    __string_with_idx{"yi_syllables", 298},
    __string_with_idx{"yijing", 299},
    __string_with_idx{"yijing_hexagram_symbols", 299},
    __string_with_idx{"zanabazar_square", 300}};

struct __block_data_t {
    uint32_t first;
    block b;
};
static constexpr const std::array __block_data = {
    __block_data_t{0x0000, block::ascii},
    __block_data_t{0x0080, block::latin_1_sup},
    __block_data_t{0x0100, block::latin_ext_a},
    __block_data_t{0x0180, block::latin_ext_b},
    __block_data_t{0x0250, block::ipa_ext},
    __block_data_t{0x02B0, block::modifier_letters},
    __block_data_t{0x0300, block::diacriticals},
    __block_data_t{0x0370, block::greek},
    __block_data_t{0x0378, block::no_block},
    __block_data_t{0x037A, block::greek},
    __block_data_t{0x0380, block::no_block},
    __block_data_t{0x0384, block::greek},
    __block_data_t{0x0400, block::cyrillic},
    __block_data_t{0x0500, block::cyrillic_sup},
    __block_data_t{0x0530, block::armenian},
    __block_data_t{0x0557, block::no_block},
    __block_data_t{0x0559, block::armenian},
    __block_data_t{0x058B, block::no_block},
    __block_data_t{0x058D, block::armenian},
    __block_data_t{0x0590, block::hebrew},
    __block_data_t{0x05C8, block::no_block},
    __block_data_t{0x05D0, block::hebrew},
    __block_data_t{0x05EB, block::no_block},
    __block_data_t{0x05EF, block::hebrew},
    __block_data_t{0x05F5, block::no_block},
    __block_data_t{0x0600, block::arabic},
    __block_data_t{0x0700, block::syriac},
    __block_data_t{0x074B, block::no_block},
    __block_data_t{0x074D, block::syriac},
    __block_data_t{0x0750, block::arabic_sup},
    __block_data_t{0x0780, block::thaana},
    __block_data_t{0x07B2, block::no_block},
    __block_data_t{0x07C0, block::nko},
    __block_data_t{0x07FB, block::no_block},
    __block_data_t{0x07FD, block::nko},
    __block_data_t{0x0800, block::samaritan},
    __block_data_t{0x082E, block::no_block},
    __block_data_t{0x0830, block::samaritan},
    __block_data_t{0x0840, block::mandaic},
    __block_data_t{0x085C, block::no_block},
    __block_data_t{0x085E, block::mandaic},
    __block_data_t{0x0860, block::syriac_sup},
    __block_data_t{0x086B, block::no_block},
    __block_data_t{0x08A0, block::arabic_ext_a},
    __block_data_t{0x08BE, block::no_block},
    __block_data_t{0x08D3, block::arabic_ext_a},
    __block_data_t{0x0900, block::devanagari},
    __block_data_t{0x0980, block::bengali},
    __block_data_t{0x098D, block::no_block},
    __block_data_t{0x098F, block::bengali},
    __block_data_t{0x0991, block::no_block},
    __block_data_t{0x0993, block::bengali},
    __block_data_t{0x09B3, block::no_block},
    __block_data_t{0x09B6, block::bengali},
    __block_data_t{0x09BA, block::no_block},
    __block_data_t{0x09BC, block::bengali},
    __block_data_t{0x09C5, block::no_block},
    __block_data_t{0x09C7, block::bengali},
    __block_data_t{0x09C9, block::no_block},
    __block_data_t{0x09CB, block::bengali},
    __block_data_t{0x09CF, block::no_block},
    __block_data_t{0x09D7, block::bengali},
    __block_data_t{0x09D8, block::no_block},
    __block_data_t{0x09DC, block::bengali},
    __block_data_t{0x09E4, block::no_block},
    __block_data_t{0x09E6, block::bengali},
    __block_data_t{0x0A00, block::gurmukhi},
    __block_data_t{0x0A0B, block::no_block},
    __block_data_t{0x0A0F, block::gurmukhi},
    __block_data_t{0x0A11, block::no_block},
    __block_data_t{0x0A13, block::gurmukhi},
    __block_data_t{0x0A3A, block::no_block},
    __block_data_t{0x0A3C, block::gurmukhi},
    __block_data_t{0x0A43, block::no_block},
    __block_data_t{0x0A47, block::gurmukhi},
    __block_data_t{0x0A49, block::no_block},
    __block_data_t{0x0A4B, block::gurmukhi},
    __block_data_t{0x0A4E, block::no_block},
    __block_data_t{0x0A51, block::gurmukhi},
    __block_data_t{0x0A52, block::no_block},
    __block_data_t{0x0A59, block::gurmukhi},
    __block_data_t{0x0A5F, block::no_block},
    __block_data_t{0x0A66, block::gurmukhi},
    __block_data_t{0x0A77, block::no_block},
    __block_data_t{0x0A80, block::gujarati},
    __block_data_t{0x0ABA, block::no_block},
    __block_data_t{0x0ABC, block::gujarati},
    __block_data_t{0x0ACE, block::no_block},
    __block_data_t{0x0AD0, block::gujarati},
    __block_data_t{0x0AD1, block::no_block},
    __block_data_t{0x0AE0, block::gujarati},
    __block_data_t{0x0AE4, block::no_block},
    __block_data_t{0x0AE6, block::gujarati},
    __block_data_t{0x0AF2, block::no_block},
    __block_data_t{0x0AF9, block::gujarati},
    __block_data_t{0x0B00, block::oriya},
    __block_data_t{0x0B0D, block::no_block},
    __block_data_t{0x0B0F, block::oriya},
    __block_data_t{0x0B11, block::no_block},
    __block_data_t{0x0B13, block::oriya},
    __block_data_t{0x0B3A, block::no_block},
    __block_data_t{0x0B3C, block::oriya},
    __block_data_t{0x0B45, block::no_block},
    __block_data_t{0x0B47, block::oriya},
    __block_data_t{0x0B49, block::no_block},
    __block_data_t{0x0B4B, block::oriya},
    __block_data_t{0x0B4E, block::no_block},
    __block_data_t{0x0B56, block::oriya},
    __block_data_t{0x0B58, block::no_block},
    __block_data_t{0x0B5C, block::oriya},
    __block_data_t{0x0B64, block::no_block},
    __block_data_t{0x0B66, block::oriya},
    __block_data_t{0x0B78, block::no_block},
    __block_data_t{0x0B82, block::tamil},
    __block_data_t{0x0B8B, block::no_block},
    __block_data_t{0x0B8E, block::tamil},
    __block_data_t{0x0B96, block::no_block},
    __block_data_t{0x0B99, block::tamil},
    __block_data_t{0x0BA0, block::no_block},
    __block_data_t{0x0BA3, block::tamil},
    __block_data_t{0x0BA5, block::no_block},
    __block_data_t{0x0BA8, block::tamil},
    __block_data_t{0x0BAB, block::no_block},
    __block_data_t{0x0BAE, block::tamil},
    __block_data_t{0x0BBA, block::no_block},
    __block_data_t{0x0BBE, block::tamil},
    __block_data_t{0x0BC3, block::no_block},
    __block_data_t{0x0BC6, block::tamil},
    __block_data_t{0x0BCE, block::no_block},
    __block_data_t{0x0BD0, block::tamil},
    __block_data_t{0x0BD1, block::no_block},
    __block_data_t{0x0BD7, block::tamil},
    __block_data_t{0x0BD8, block::no_block},
    __block_data_t{0x0BE6, block::tamil},
    __block_data_t{0x0BFB, block::no_block},
    __block_data_t{0x0C00, block::telugu},
    __block_data_t{0x0C3A, block::no_block},
    __block_data_t{0x0C3D, block::telugu},
    __block_data_t{0x0C4E, block::no_block},
    __block_data_t{0x0C55, block::telugu},
    __block_data_t{0x0C5B, block::no_block},
    __block_data_t{0x0C60, block::telugu},
    __block_data_t{0x0C64, block::no_block},
    __block_data_t{0x0C66, block::telugu},
    __block_data_t{0x0C70, block::no_block},
    __block_data_t{0x0C77, block::telugu},
    __block_data_t{0x0C80, block::kannada},
    __block_data_t{0x0CBA, block::no_block},
    __block_data_t{0x0CBC, block::kannada},
    __block_data_t{0x0CCE, block::no_block},
    __block_data_t{0x0CD5, block::kannada},
    __block_data_t{0x0CD7, block::no_block},
    __block_data_t{0x0CDE, block::kannada},
    __block_data_t{0x0CE4, block::no_block},
    __block_data_t{0x0CE6, block::kannada},
    __block_data_t{0x0CF3, block::no_block},
    __block_data_t{0x0D00, block::malayalam},
    __block_data_t{0x0D50, block::no_block},
    __block_data_t{0x0D54, block::malayalam},
    __block_data_t{0x0D64, block::no_block},
    __block_data_t{0x0D66, block::malayalam},
    __block_data_t{0x0D80, block::no_block},
    __block_data_t{0x0D82, block::sinhala},
    __block_data_t{0x0D97, block::no_block},
    __block_data_t{0x0D9A, block::sinhala},
    __block_data_t{0x0DBE, block::no_block},
    __block_data_t{0x0DC0, block::sinhala},
    __block_data_t{0x0DC7, block::no_block},
    __block_data_t{0x0DCA, block::sinhala},
    __block_data_t{0x0DCB, block::no_block},
    __block_data_t{0x0DCF, block::sinhala},
    __block_data_t{0x0DE0, block::no_block},
    __block_data_t{0x0DE6, block::sinhala},
    __block_data_t{0x0DF0, block::no_block},
    __block_data_t{0x0DF2, block::sinhala},
    __block_data_t{0x0DF5, block::no_block},
    __block_data_t{0x0E00, block::thai},
    __block_data_t{0x0E3B, block::no_block},
    __block_data_t{0x0E3F, block::thai},
    __block_data_t{0x0E5C, block::no_block},
    __block_data_t{0x0E80, block::lao},
    __block_data_t{0x0EBE, block::no_block},
    __block_data_t{0x0EC0, block::lao},
    __block_data_t{0x0ECE, block::no_block},
    __block_data_t{0x0ED0, block::lao},
    __block_data_t{0x0EDA, block::no_block},
    __block_data_t{0x0EDC, block::lao},
    __block_data_t{0x0EE0, block::no_block},
    __block_data_t{0x0F00, block::tibetan},
    __block_data_t{0x0F6D, block::no_block},
    __block_data_t{0x0F71, block::tibetan},
    __block_data_t{0x0FDB, block::no_block},
    __block_data_t{0x1000, block::myanmar},
    __block_data_t{0x10A0, block::georgian},
    __block_data_t{0x10C8, block::no_block},
    __block_data_t{0x10CD, block::georgian},
    __block_data_t{0x10CE, block::no_block},
    __block_data_t{0x10D0, block::georgian},
    __block_data_t{0x1100, block::jamo},
    __block_data_t{0x1200, block::ethiopic},
    __block_data_t{0x124E, block::no_block},
    __block_data_t{0x1250, block::ethiopic},
    __block_data_t{0x125E, block::no_block},
    __block_data_t{0x1260, block::ethiopic},
    __block_data_t{0x128E, block::no_block},
    __block_data_t{0x1290, block::ethiopic},
    __block_data_t{0x12B6, block::no_block},
    __block_data_t{0x12B8, block::ethiopic},
    __block_data_t{0x12C6, block::no_block},
    __block_data_t{0x12C8, block::ethiopic},
    __block_data_t{0x1316, block::no_block},
    __block_data_t{0x1318, block::ethiopic},
    __block_data_t{0x135B, block::no_block},
    __block_data_t{0x135D, block::ethiopic},
    __block_data_t{0x137D, block::no_block},
    __block_data_t{0x1380, block::ethiopic_sup},
    __block_data_t{0x139A, block::no_block},
    __block_data_t{0x13A0, block::cherokee},
    __block_data_t{0x13F6, block::no_block},
    __block_data_t{0x13F8, block::cherokee},
    __block_data_t{0x13FE, block::no_block},
    __block_data_t{0x1400, block::ucas},
    __block_data_t{0x1680, block::ogham},
    __block_data_t{0x169D, block::no_block},
    __block_data_t{0x16A0, block::runic},
    __block_data_t{0x16F9, block::no_block},
    __block_data_t{0x1700, block::tagalog},
    __block_data_t{0x1715, block::no_block},
    __block_data_t{0x1720, block::hanunoo},
    __block_data_t{0x1737, block::no_block},
    __block_data_t{0x1740, block::buhid},
    __block_data_t{0x1754, block::no_block},
    __block_data_t{0x1760, block::tagbanwa},
    __block_data_t{0x1774, block::no_block},
    __block_data_t{0x1780, block::khmer},
    __block_data_t{0x17DE, block::no_block},
    __block_data_t{0x17E0, block::khmer},
    __block_data_t{0x17EA, block::no_block},
    __block_data_t{0x17F0, block::khmer},
    __block_data_t{0x17FA, block::no_block},
    __block_data_t{0x1800, block::mongolian},
    __block_data_t{0x181A, block::no_block},
    __block_data_t{0x1820, block::mongolian},
    __block_data_t{0x1879, block::no_block},
    __block_data_t{0x1880, block::mongolian},
    __block_data_t{0x18AB, block::no_block},
    __block_data_t{0x18B0, block::ucas_ext},
    __block_data_t{0x18F6, block::no_block},
    __block_data_t{0x1900, block::limbu},
    __block_data_t{0x192C, block::no_block},
    __block_data_t{0x1930, block::limbu},
    __block_data_t{0x193C, block::no_block},
    __block_data_t{0x1940, block::limbu},
    __block_data_t{0x1941, block::no_block},
    __block_data_t{0x1944, block::limbu},
    __block_data_t{0x1950, block::tai_le},
    __block_data_t{0x196E, block::no_block},
    __block_data_t{0x1970, block::tai_le},
    __block_data_t{0x1975, block::no_block},
    __block_data_t{0x1980, block::new_tai_lue},
    __block_data_t{0x19AC, block::no_block},
    __block_data_t{0x19B0, block::new_tai_lue},
    __block_data_t{0x19CA, block::no_block},
    __block_data_t{0x19D0, block::new_tai_lue},
    __block_data_t{0x19DB, block::no_block},
    __block_data_t{0x19DE, block::new_tai_lue},
    __block_data_t{0x19E0, block::khmer_symbols},
    __block_data_t{0x1A00, block::buginese},
    __block_data_t{0x1A1C, block::no_block},
    __block_data_t{0x1A1E, block::buginese},
    __block_data_t{0x1A20, block::tai_tham},
    __block_data_t{0x1A7D, block::no_block},
    __block_data_t{0x1A7F, block::tai_tham},
    __block_data_t{0x1A8A, block::no_block},
    __block_data_t{0x1A90, block::tai_tham},
    __block_data_t{0x1A9A, block::no_block},
    __block_data_t{0x1AA0, block::tai_tham},
    __block_data_t{0x1AAE, block::no_block},
    __block_data_t{0x1AB0, block::diacriticals_ext},
    __block_data_t{0x1ABF, block::no_block},
    __block_data_t{0x1B00, block::balinese},
    __block_data_t{0x1B4C, block::no_block},
    __block_data_t{0x1B50, block::balinese},
    __block_data_t{0x1B7D, block::no_block},
    __block_data_t{0x1B80, block::sundanese},
    __block_data_t{0x1BC0, block::batak},
    __block_data_t{0x1BF4, block::no_block},
    __block_data_t{0x1BFC, block::batak},
    __block_data_t{0x1C00, block::lepcha},
    __block_data_t{0x1C38, block::no_block},
    __block_data_t{0x1C3B, block::lepcha},
    __block_data_t{0x1C4A, block::no_block},
    __block_data_t{0x1C4D, block::lepcha},
    __block_data_t{0x1C50, block::ol_chiki},
    __block_data_t{0x1C80, block::cyrillic_ext_c},
    __block_data_t{0x1C89, block::no_block},
    __block_data_t{0x1C90, block::georgian_ext},
    __block_data_t{0x1CBB, block::no_block},
    __block_data_t{0x1CBD, block::georgian_ext},
    __block_data_t{0x1CC0, block::sundanese_sup},
    __block_data_t{0x1CC8, block::no_block},
    __block_data_t{0x1CD0, block::vedic_ext},
    __block_data_t{0x1CFB, block::no_block},
    __block_data_t{0x1D00, block::phonetic_ext},
    __block_data_t{0x1D80, block::phonetic_ext_sup},
    __block_data_t{0x1DC0, block::diacriticals_sup},
    __block_data_t{0x1E00, block::latin_ext_additional},
    __block_data_t{0x1F00, block::greek_ext},
    __block_data_t{0x1F16, block::no_block},
    __block_data_t{0x1F18, block::greek_ext},
    __block_data_t{0x1F1E, block::no_block},
    __block_data_t{0x1F20, block::greek_ext},
    __block_data_t{0x1F46, block::no_block},
    __block_data_t{0x1F48, block::greek_ext},
    __block_data_t{0x1F4E, block::no_block},
    __block_data_t{0x1F50, block::greek_ext},
    __block_data_t{0x1F7E, block::no_block},
    __block_data_t{0x1F80, block::greek_ext},
    __block_data_t{0x1FD4, block::no_block},
    __block_data_t{0x1FD6, block::greek_ext},
    __block_data_t{0x1FF0, block::no_block},
    __block_data_t{0x1FF2, block::greek_ext},
    __block_data_t{0x2000, block::punctuation},
    __block_data_t{0x2070, block::super_and_sub},
    __block_data_t{0x2072, block::no_block},
    __block_data_t{0x2074, block::super_and_sub},
    __block_data_t{0x209D, block::no_block},
    __block_data_t{0x20A0, block::currency_symbols},
    __block_data_t{0x20C0, block::no_block},
    __block_data_t{0x20D0, block::diacriticals_for_symbols},
    __block_data_t{0x20F1, block::no_block},
    __block_data_t{0x2100, block::letterlike_symbols},
    __block_data_t{0x2150, block::number_forms},
    __block_data_t{0x218C, block::no_block},
    __block_data_t{0x2190, block::arrows},
    __block_data_t{0x2200, block::math_operators},
    __block_data_t{0x2300, block::misc_technical},
    __block_data_t{0x2400, block::control_pictures},
    __block_data_t{0x2427, block::no_block},
    __block_data_t{0x2440, block::ocr},
    __block_data_t{0x244B, block::no_block},
    __block_data_t{0x2460, block::enclosed_alphanum},
    __block_data_t{0x2500, block::box_drawing},
    __block_data_t{0x2580, block::block_elements},
    __block_data_t{0x25A0, block::geometric_shapes},
    __block_data_t{0x2600, block::misc_symbols},
    __block_data_t{0x2700, block::dingbats},
    __block_data_t{0x27C0, block::misc_math_symbols_a},
    __block_data_t{0x27F0, block::sup_arrows_a},
    __block_data_t{0x2800, block::braille},
    __block_data_t{0x2900, block::sup_arrows_b},
    __block_data_t{0x2980, block::misc_math_symbols_b},
    __block_data_t{0x2A00, block::sup_math_operators},
    __block_data_t{0x2B00, block::misc_arrows},
    __block_data_t{0x2B74, block::no_block},
    __block_data_t{0x2B76, block::misc_arrows},
    __block_data_t{0x2B96, block::no_block},
    __block_data_t{0x2B98, block::misc_arrows},
    __block_data_t{0x2C00, block::glagolitic},
    __block_data_t{0x2C60, block::latin_ext_c},
    __block_data_t{0x2C80, block::coptic},
    __block_data_t{0x2CF4, block::no_block},
    __block_data_t{0x2CF9, block::coptic},
    __block_data_t{0x2D00, block::georgian_sup},
    __block_data_t{0x2D28, block::no_block},
    __block_data_t{0x2D2D, block::georgian_sup},
    __block_data_t{0x2D2E, block::no_block},
    __block_data_t{0x2D30, block::tifinagh},
    __block_data_t{0x2D68, block::no_block},
    __block_data_t{0x2D6F, block::tifinagh},
    __block_data_t{0x2D71, block::no_block},
    __block_data_t{0x2D7F, block::tifinagh},
    __block_data_t{0x2D80, block::ethiopic_ext},
    __block_data_t{0x2D97, block::no_block},
    __block_data_t{0x2DA0, block::ethiopic_ext},
    __block_data_t{0x2DE0, block::cyrillic_ext_a},
    __block_data_t{0x2E00, block::sup_punctuation},
    __block_data_t{0x2E50, block::no_block},
    __block_data_t{0x2E80, block::cjk_radicals_sup},
    __block_data_t{0x2EF4, block::no_block},
    __block_data_t{0x2F00, block::kangxi},
    __block_data_t{0x2FD6, block::no_block},
    __block_data_t{0x2FF0, block::idc},
    __block_data_t{0x2FFC, block::no_block},
    __block_data_t{0x3000, block::cjk_symbols},
    __block_data_t{0x3040, block::hiragana},
    __block_data_t{0x3097, block::no_block},
    __block_data_t{0x3099, block::hiragana},
    __block_data_t{0x30A0, block::katakana},
    __block_data_t{0x3100, block::no_block},
    __block_data_t{0x3105, block::bopomofo},
    __block_data_t{0x3130, block::compat_jamo},
    __block_data_t{0x3190, block::kanbun},
    __block_data_t{0x31A0, block::bopomofo_ext},
    __block_data_t{0x31BB, block::no_block},
    __block_data_t{0x31C0, block::cjk_strokes},
    __block_data_t{0x31E4, block::no_block},
    __block_data_t{0x31F0, block::katakana_ext},
    __block_data_t{0x3200, block::enclosed_cjk},
    __block_data_t{0x3300, block::cjk_compat},
    __block_data_t{0x3400, block::no_block},
    __block_data_t{0x3405, block::cjk_ext_a},
    __block_data_t{0x3406, block::no_block},
    __block_data_t{0x3483, block::cjk_ext_a},
    __block_data_t{0x3484, block::no_block},
    __block_data_t{0x382A, block::cjk_ext_a},
    __block_data_t{0x382B, block::no_block},
    __block_data_t{0x3B4D, block::cjk_ext_a},
    __block_data_t{0x3B4E, block::no_block},
    __block_data_t{0x4DC0, block::yijing},
    __block_data_t{0x4E00, block::cjk},
    __block_data_t{0x4E01, block::no_block},
    __block_data_t{0x4E03, block::cjk},
    __block_data_t{0x4E04, block::no_block},
    __block_data_t{0x4E07, block::cjk},
    __block_data_t{0x4E0A, block::no_block},
    __block_data_t{0x4E5D, block::cjk},
    __block_data_t{0x4E5E, block::no_block},
    __block_data_t{0x4E8C, block::cjk},
    __block_data_t{0x4E8D, block::no_block},
    __block_data_t{0x4E94, block::cjk},
    __block_data_t{0x4E97, block::no_block},
    __block_data_t{0x4EBF, block::cjk},
    __block_data_t{0x4EC1, block::no_block},
    __block_data_t{0x4EDF, block::cjk},
    __block_data_t{0x4EE0, block::no_block},
    __block_data_t{0x4EE8, block::cjk},
    __block_data_t{0x4EE9, block::no_block},
    __block_data_t{0x4F0D, block::cjk},
    __block_data_t{0x4F0E, block::no_block},
    __block_data_t{0x4F70, block::cjk},
    __block_data_t{0x4F71, block::no_block},
    __block_data_t{0x5104, block::cjk},
    __block_data_t{0x5105, block::no_block},
    __block_data_t{0x5146, block::cjk},
    __block_data_t{0x5147, block::no_block},
    __block_data_t{0x5169, block::cjk},
    __block_data_t{0x516E, block::no_block},
    __block_data_t{0x5341, block::cjk},
    __block_data_t{0x5346, block::no_block},
    __block_data_t{0x534C, block::cjk},
    __block_data_t{0x534D, block::no_block},
    __block_data_t{0x53C1, block::cjk},
    __block_data_t{0x53C5, block::no_block},
    __block_data_t{0x56DB, block::cjk},
    __block_data_t{0x56DC, block::no_block},
    __block_data_t{0x58F1, block::cjk},
    __block_data_t{0x58F2, block::no_block},
    __block_data_t{0x58F9, block::cjk},
    __block_data_t{0x58FA, block::no_block},
    __block_data_t{0x5E7A, block::cjk},
    __block_data_t{0x5E7B, block::no_block},
    __block_data_t{0x5EFE, block::cjk},
    __block_data_t{0x5F00, block::no_block},
    __block_data_t{0x5F0C, block::cjk},
    __block_data_t{0x5F11, block::no_block},
    __block_data_t{0x62FE, block::cjk},
    __block_data_t{0x62FF, block::no_block},
    __block_data_t{0x634C, block::cjk},
    __block_data_t{0x634D, block::no_block},
    __block_data_t{0x67D2, block::cjk},
    __block_data_t{0x67D3, block::no_block},
    __block_data_t{0x6F06, block::cjk},
    __block_data_t{0x6F07, block::no_block},
    __block_data_t{0x7396, block::cjk},
    __block_data_t{0x7397, block::no_block},
    __block_data_t{0x767E, block::cjk},
    __block_data_t{0x767F, block::no_block},
    __block_data_t{0x8086, block::cjk},
    __block_data_t{0x8087, block::no_block},
    __block_data_t{0x842C, block::cjk},
    __block_data_t{0x842D, block::no_block},
    __block_data_t{0x8CAE, block::cjk},
    __block_data_t{0x8CAF, block::no_block},
    __block_data_t{0x8CB3, block::cjk},
    __block_data_t{0x8CB4, block::no_block},
    __block_data_t{0x8D30, block::cjk},
    __block_data_t{0x8D31, block::no_block},
    __block_data_t{0x9621, block::cjk},
    __block_data_t{0x9622, block::no_block},
    __block_data_t{0x9646, block::cjk},
    __block_data_t{0x9647, block::no_block},
    __block_data_t{0x964C, block::cjk},
    __block_data_t{0x964D, block::no_block},
    __block_data_t{0x9678, block::cjk},
    __block_data_t{0x9679, block::no_block},
    __block_data_t{0x96F6, block::cjk},
    __block_data_t{0x96F7, block::no_block},
    __block_data_t{0x9FCC, block::cjk},
    __block_data_t{0x9FCD, block::no_block},
    __block_data_t{0xA000, block::yi_syllables},
    __block_data_t{0xA48D, block::no_block},
    __block_data_t{0xA490, block::yi_radicals},
    __block_data_t{0xA4C7, block::no_block},
    __block_data_t{0xA4D0, block::lisu},
    __block_data_t{0xA500, block::vai},
    __block_data_t{0xA62C, block::no_block},
    __block_data_t{0xA640, block::cyrillic_ext_b},
    __block_data_t{0xA6A0, block::bamum},
    __block_data_t{0xA6F8, block::no_block},
    __block_data_t{0xA700, block::modifier_tone_letters},
    __block_data_t{0xA720, block::latin_ext_d},
    __block_data_t{0xA7C0, block::no_block},
    __block_data_t{0xA7C2, block::latin_ext_d},
    __block_data_t{0xA7C7, block::no_block},
    __block_data_t{0xA7F7, block::latin_ext_d},
    __block_data_t{0xA800, block::syloti_nagri},
    __block_data_t{0xA82C, block::no_block},
    __block_data_t{0xA830, block::indic_number_forms},
    __block_data_t{0xA83A, block::no_block},
    __block_data_t{0xA840, block::phags_pa},
    __block_data_t{0xA878, block::no_block},
    __block_data_t{0xA880, block::saurashtra},
    __block_data_t{0xA8C6, block::no_block},
    __block_data_t{0xA8CE, block::saurashtra},
    __block_data_t{0xA8DA, block::no_block},
    __block_data_t{0xA8E0, block::devanagari_ext},
    __block_data_t{0xA900, block::kayah_li},
    __block_data_t{0xA930, block::rejang},
    __block_data_t{0xA954, block::no_block},
    __block_data_t{0xA95F, block::rejang},
    __block_data_t{0xA960, block::jamo_ext_a},
    __block_data_t{0xA97D, block::no_block},
    __block_data_t{0xA980, block::javanese},
    __block_data_t{0xA9DA, block::no_block},
    __block_data_t{0xA9DE, block::javanese},
    __block_data_t{0xA9E0, block::myanmar_ext_b},
    __block_data_t{0xAA00, block::cham},
    __block_data_t{0xAA37, block::no_block},
    __block_data_t{0xAA40, block::cham},
    __block_data_t{0xAA4E, block::no_block},
    __block_data_t{0xAA50, block::cham},
    __block_data_t{0xAA5A, block::no_block},
    __block_data_t{0xAA5C, block::cham},
    __block_data_t{0xAA60, block::myanmar_ext_a},
    __block_data_t{0xAA80, block::tai_viet},
    __block_data_t{0xAAC3, block::no_block},
    __block_data_t{0xAADB, block::tai_viet},
    __block_data_t{0xAAE0, block::meetei_mayek_ext},
    __block_data_t{0xAAF7, block::no_block},
    __block_data_t{0xAB00, block::ethiopic_ext_a},
    __block_data_t{0xAB07, block::no_block},
    __block_data_t{0xAB09, block::ethiopic_ext_a},
    __block_data_t{0xAB0F, block::no_block},
    __block_data_t{0xAB11, block::ethiopic_ext_a},
    __block_data_t{0xAB17, block::no_block},
    __block_data_t{0xAB20, block::ethiopic_ext_a},
    __block_data_t{0xAB30, block::latin_ext_e},
    __block_data_t{0xAB68, block::no_block},
    __block_data_t{0xAB70, block::cherokee_sup},
    __block_data_t{0xABC0, block::meetei_mayek},
    __block_data_t{0xABEE, block::no_block},
    __block_data_t{0xABF0, block::meetei_mayek},
    __block_data_t{0xABFA, block::no_block},
    __block_data_t{0xAC00, block::hangul},
    __block_data_t{0xD7A4, block::no_block},
    __block_data_t{0xD7B0, block::jamo_ext_b},
    __block_data_t{0xD7C7, block::no_block},
    __block_data_t{0xD7CB, block::jamo_ext_b},
    __block_data_t{0xD7FC, block::no_block},
    __block_data_t{0xF900, block::cjk_compat_ideographs},
    __block_data_t{0xFA6E, block::no_block},
    __block_data_t{0xFA70, block::cjk_compat_ideographs},
    __block_data_t{0xFADA, block::no_block},
    __block_data_t{0xFB00, block::alphabetic_pf},
    __block_data_t{0xFB07, block::no_block},
    __block_data_t{0xFB13, block::alphabetic_pf},
    __block_data_t{0xFB18, block::no_block},
    __block_data_t{0xFB1D, block::alphabetic_pf},
    __block_data_t{0xFB50, block::arabic_pf_a},
    __block_data_t{0xFBC2, block::no_block},
    __block_data_t{0xFBD3, block::arabic_pf_a},
    __block_data_t{0xFD40, block::no_block},
    __block_data_t{0xFD50, block::arabic_pf_a},
    __block_data_t{0xFD90, block::no_block},
    __block_data_t{0xFD92, block::arabic_pf_a},
    __block_data_t{0xFDC8, block::no_block},
    __block_data_t{0xFDF0, block::arabic_pf_a},
    __block_data_t{0xFDFE, block::no_block},
    __block_data_t{0xFE00, block::vs},
    __block_data_t{0xFE10, block::vertical_forms},
    __block_data_t{0xFE1A, block::no_block},
    __block_data_t{0xFE20, block::half_marks},
    __block_data_t{0xFE30, block::cjk_compat_forms},
    __block_data_t{0xFE50, block::small_forms},
    __block_data_t{0xFE6C, block::no_block},
    __block_data_t{0xFE70, block::arabic_pf_b},
    __block_data_t{0xFEFD, block::no_block},
    __block_data_t{0xFEFF, block::arabic_pf_b},
    __block_data_t{0xFF00, block::half_and_full_forms},
    __block_data_t{0xFFBF, block::no_block},
    __block_data_t{0xFFC2, block::half_and_full_forms},
    __block_data_t{0xFFC8, block::no_block},
    __block_data_t{0xFFCA, block::half_and_full_forms},
    __block_data_t{0xFFD0, block::no_block},
    __block_data_t{0xFFD2, block::half_and_full_forms},
    __block_data_t{0xFFD8, block::no_block},
    __block_data_t{0xFFDA, block::half_and_full_forms},
    __block_data_t{0xFFDD, block::no_block},
    __block_data_t{0xFFE0, block::half_and_full_forms},
    __block_data_t{0xFFF0, block::no_block},
    __block_data_t{0xFFF9, block::specials},
    __block_data_t{0xFFFE, block::no_block},
    __block_data_t{0x10000, block::linear_b_syllabary},
    __block_data_t{0x1004E, block::no_block},
    __block_data_t{0x10050, block::linear_b_syllabary},
    __block_data_t{0x1005E, block::no_block},
    __block_data_t{0x10080, block::linear_b_ideograms},
    __block_data_t{0x100FB, block::no_block},
    __block_data_t{0x10100, block::aegean_numbers},
    __block_data_t{0x10103, block::no_block},
    __block_data_t{0x10107, block::aegean_numbers},
    __block_data_t{0x10134, block::no_block},
    __block_data_t{0x10137, block::aegean_numbers},
    __block_data_t{0x10140, block::ancient_greek_numbers},
    __block_data_t{0x10190, block::ancient_symbols},
    __block_data_t{0x1019C, block::no_block},
    __block_data_t{0x101A0, block::ancient_symbols},
    __block_data_t{0x101A1, block::no_block},
    __block_data_t{0x101D0, block::phaistos},
    __block_data_t{0x101FE, block::no_block},
    __block_data_t{0x10280, block::lycian},
    __block_data_t{0x1029D, block::no_block},
    __block_data_t{0x102A0, block::carian},
    __block_data_t{0x102D1, block::no_block},
    __block_data_t{0x102E0, block::coptic_epact_numbers},
    __block_data_t{0x102FC, block::no_block},
    __block_data_t{0x10300, block::old_italic},
    __block_data_t{0x10324, block::no_block},
    __block_data_t{0x1032D, block::old_italic},
    __block_data_t{0x10330, block::gothic},
    __block_data_t{0x1034B, block::no_block},
    __block_data_t{0x10350, block::old_permic},
    __block_data_t{0x1037B, block::no_block},
    __block_data_t{0x10380, block::ugaritic},
    __block_data_t{0x103A0, block::old_persian},
    __block_data_t{0x103C4, block::no_block},
    __block_data_t{0x103C8, block::old_persian},
    __block_data_t{0x103D6, block::no_block},
    __block_data_t{0x10400, block::deseret},
    __block_data_t{0x10450, block::shavian},
    __block_data_t{0x10480, block::osmanya},
    __block_data_t{0x1049E, block::no_block},
    __block_data_t{0x104A0, block::osmanya},
    __block_data_t{0x104AA, block::no_block},
    __block_data_t{0x104B0, block::osage},
    __block_data_t{0x104D4, block::no_block},
    __block_data_t{0x104D8, block::osage},
    __block_data_t{0x104FC, block::no_block},
    __block_data_t{0x10500, block::elbasan},
    __block_data_t{0x10528, block::no_block},
    __block_data_t{0x10530, block::caucasian_albanian},
    __block_data_t{0x10564, block::no_block},
    __block_data_t{0x1056F, block::caucasian_albanian},
    __block_data_t{0x10570, block::no_block},
    __block_data_t{0x10600, block::linear_a},
    __block_data_t{0x10737, block::no_block},
    __block_data_t{0x10740, block::linear_a},
    __block_data_t{0x10756, block::no_block},
    __block_data_t{0x10760, block::linear_a},
    __block_data_t{0x10768, block::no_block},
    __block_data_t{0x10800, block::cypriot_syllabary},
    __block_data_t{0x10806, block::no_block},
    __block_data_t{0x10808, block::cypriot_syllabary},
    __block_data_t{0x10839, block::no_block},
    __block_data_t{0x1083C, block::cypriot_syllabary},
    __block_data_t{0x1083D, block::no_block},
    __block_data_t{0x1083F, block::cypriot_syllabary},
    __block_data_t{0x10840, block::imperial_aramaic},
    __block_data_t{0x10860, block::palmyrene},
    __block_data_t{0x10880, block::nabataean},
    __block_data_t{0x1089F, block::no_block},
    __block_data_t{0x108A7, block::nabataean},
    __block_data_t{0x108B0, block::no_block},
    __block_data_t{0x108E0, block::hatran},
    __block_data_t{0x108F6, block::no_block},
    __block_data_t{0x108FB, block::hatran},
    __block_data_t{0x10900, block::phoenician},
    __block_data_t{0x1091C, block::no_block},
    __block_data_t{0x1091F, block::phoenician},
    __block_data_t{0x10920, block::lydian},
    __block_data_t{0x1093A, block::no_block},
    __block_data_t{0x1093F, block::lydian},
    __block_data_t{0x10940, block::no_block},
    __block_data_t{0x10980, block::meroitic_hieroglyphs},
    __block_data_t{0x109A0, block::meroitic_cursive},
    __block_data_t{0x109B8, block::no_block},
    __block_data_t{0x109BC, block::meroitic_cursive},
    __block_data_t{0x109D0, block::no_block},
    __block_data_t{0x109D2, block::meroitic_cursive},
    __block_data_t{0x10A00, block::kharoshthi},
    __block_data_t{0x10A07, block::no_block},
    __block_data_t{0x10A0C, block::kharoshthi},
    __block_data_t{0x10A36, block::no_block},
    __block_data_t{0x10A38, block::kharoshthi},
    __block_data_t{0x10A3B, block::no_block},
    __block_data_t{0x10A3F, block::kharoshthi},
    __block_data_t{0x10A49, block::no_block},
    __block_data_t{0x10A50, block::kharoshthi},
    __block_data_t{0x10A59, block::no_block},
    __block_data_t{0x10A60, block::old_south_arabian},
    __block_data_t{0x10A80, block::old_north_arabian},
    __block_data_t{0x10AA0, block::no_block},
    __block_data_t{0x10AC0, block::manichaean},
    __block_data_t{0x10AE7, block::no_block},
    __block_data_t{0x10AEB, block::manichaean},
    __block_data_t{0x10AF7, block::no_block},
    __block_data_t{0x10B00, block::avestan},
    __block_data_t{0x10B36, block::no_block},
    __block_data_t{0x10B39, block::avestan},
    __block_data_t{0x10B40, block::inscriptional_parthian},
    __block_data_t{0x10B56, block::no_block},
    __block_data_t{0x10B58, block::inscriptional_parthian},
    __block_data_t{0x10B60, block::inscriptional_pahlavi},
    __block_data_t{0x10B73, block::no_block},
    __block_data_t{0x10B78, block::inscriptional_pahlavi},
    __block_data_t{0x10B80, block::psalter_pahlavi},
    __block_data_t{0x10B92, block::no_block},
    __block_data_t{0x10B99, block::psalter_pahlavi},
    __block_data_t{0x10B9D, block::no_block},
    __block_data_t{0x10BA9, block::psalter_pahlavi},
    __block_data_t{0x10BB0, block::no_block},
    __block_data_t{0x10C00, block::old_turkic},
    __block_data_t{0x10C49, block::no_block},
    __block_data_t{0x10C80, block::old_hungarian},
    __block_data_t{0x10CB3, block::no_block},
    __block_data_t{0x10CC0, block::old_hungarian},
    __block_data_t{0x10CF3, block::no_block},
    __block_data_t{0x10CFA, block::old_hungarian},
    __block_data_t{0x10D00, block::hanifi_rohingya},
    __block_data_t{0x10D28, block::no_block},
    __block_data_t{0x10D30, block::hanifi_rohingya},
    __block_data_t{0x10D3A, block::no_block},
    __block_data_t{0x10E60, block::rumi},
    __block_data_t{0x10E80, block::no_block},
    __block_data_t{0x10F00, block::old_sogdian},
    __block_data_t{0x10F28, block::no_block},
    __block_data_t{0x10F30, block::sogdian},
    __block_data_t{0x10F5A, block::no_block},
    __block_data_t{0x10FE0, block::elymaic},
    __block_data_t{0x10FF7, block::no_block},
    __block_data_t{0x11000, block::brahmi},
    __block_data_t{0x1104E, block::no_block},
    __block_data_t{0x11052, block::brahmi},
    __block_data_t{0x11070, block::no_block},
    __block_data_t{0x1107F, block::brahmi},
    __block_data_t{0x11080, block::kaithi},
    __block_data_t{0x110C2, block::no_block},
    __block_data_t{0x110CD, block::kaithi},
    __block_data_t{0x110CE, block::no_block},
    __block_data_t{0x110D0, block::sora_sompeng},
    __block_data_t{0x110E9, block::no_block},
    __block_data_t{0x110F0, block::sora_sompeng},
    __block_data_t{0x110FA, block::no_block},
    __block_data_t{0x11100, block::chakma},
    __block_data_t{0x11147, block::no_block},
    __block_data_t{0x11150, block::mahajani},
    __block_data_t{0x11177, block::no_block},
    __block_data_t{0x11180, block::sharada},
    __block_data_t{0x111CE, block::no_block},
    __block_data_t{0x111D0, block::sharada},
    __block_data_t{0x111E0, block::sinhala_archaic_numbers},
    __block_data_t{0x111F5, block::no_block},
    __block_data_t{0x11200, block::khojki},
    __block_data_t{0x1123F, block::no_block},
    __block_data_t{0x11280, block::multani},
    __block_data_t{0x112AA, block::no_block},
    __block_data_t{0x112B0, block::khudawadi},
    __block_data_t{0x112EB, block::no_block},
    __block_data_t{0x112F0, block::khudawadi},
    __block_data_t{0x112FA, block::no_block},
    __block_data_t{0x11300, block::grantha},
    __block_data_t{0x1130D, block::no_block},
    __block_data_t{0x1130F, block::grantha},
    __block_data_t{0x11311, block::no_block},
    __block_data_t{0x11313, block::grantha},
    __block_data_t{0x11345, block::no_block},
    __block_data_t{0x11347, block::grantha},
    __block_data_t{0x11349, block::no_block},
    __block_data_t{0x1134B, block::grantha},
    __block_data_t{0x1134E, block::no_block},
    __block_data_t{0x11350, block::grantha},
    __block_data_t{0x11351, block::no_block},
    __block_data_t{0x11357, block::grantha},
    __block_data_t{0x11358, block::no_block},
    __block_data_t{0x1135D, block::grantha},
    __block_data_t{0x11364, block::no_block},
    __block_data_t{0x11366, block::grantha},
    __block_data_t{0x1136D, block::no_block},
    __block_data_t{0x11370, block::grantha},
    __block_data_t{0x11375, block::no_block},
    __block_data_t{0x11400, block::newa},
    __block_data_t{0x11460, block::no_block},
    __block_data_t{0x11480, block::tirhuta},
    __block_data_t{0x114C8, block::no_block},
    __block_data_t{0x114D0, block::tirhuta},
    __block_data_t{0x114DA, block::no_block},
    __block_data_t{0x11580, block::siddham},
    __block_data_t{0x115B6, block::no_block},
    __block_data_t{0x115B8, block::siddham},
    __block_data_t{0x115DE, block::no_block},
    __block_data_t{0x11600, block::modi},
    __block_data_t{0x11645, block::no_block},
    __block_data_t{0x11650, block::modi},
    __block_data_t{0x1165A, block::no_block},
    __block_data_t{0x11660, block::mongolian_sup},
    __block_data_t{0x1166D, block::no_block},
    __block_data_t{0x11680, block::takri},
    __block_data_t{0x116B9, block::no_block},
    __block_data_t{0x116C0, block::takri},
    __block_data_t{0x116CA, block::no_block},
    __block_data_t{0x11700, block::ahom},
    __block_data_t{0x1171B, block::no_block},
    __block_data_t{0x1171D, block::ahom},
    __block_data_t{0x1172C, block::no_block},
    __block_data_t{0x11730, block::ahom},
    __block_data_t{0x11740, block::no_block},
    __block_data_t{0x11800, block::dogra},
    __block_data_t{0x1183C, block::no_block},
    __block_data_t{0x118A0, block::warang_citi},
    __block_data_t{0x118F3, block::no_block},
    __block_data_t{0x118FF, block::warang_citi},
    __block_data_t{0x11900, block::no_block},
    __block_data_t{0x119A0, block::nandinagari},
    __block_data_t{0x119A8, block::no_block},
    __block_data_t{0x119AA, block::nandinagari},
    __block_data_t{0x119D8, block::no_block},
    __block_data_t{0x119DA, block::nandinagari},
    __block_data_t{0x119E5, block::no_block},
    __block_data_t{0x11A00, block::zanabazar_square},
    __block_data_t{0x11A48, block::no_block},
    __block_data_t{0x11A50, block::soyombo},
    __block_data_t{0x11AA3, block::no_block},
    __block_data_t{0x11AC0, block::pau_cin_hau},
    __block_data_t{0x11AF9, block::no_block},
    __block_data_t{0x11C00, block::bhaiksuki},
    __block_data_t{0x11C46, block::no_block},
    __block_data_t{0x11C50, block::bhaiksuki},
    __block_data_t{0x11C6D, block::no_block},
    __block_data_t{0x11C70, block::marchen},
    __block_data_t{0x11C90, block::no_block},
    __block_data_t{0x11C92, block::marchen},
    __block_data_t{0x11CB7, block::no_block},
    __block_data_t{0x11D00, block::masaram_gondi},
    __block_data_t{0x11D37, block::no_block},
    __block_data_t{0x11D3A, block::masaram_gondi},
    __block_data_t{0x11D48, block::no_block},
    __block_data_t{0x11D50, block::masaram_gondi},
    __block_data_t{0x11D5A, block::no_block},
    __block_data_t{0x11D60, block::gunjala_gondi},
    __block_data_t{0x11D99, block::no_block},
    __block_data_t{0x11DA0, block::gunjala_gondi},
    __block_data_t{0x11DAA, block::no_block},
    __block_data_t{0x11EE0, block::makasar},
    __block_data_t{0x11EF9, block::no_block},
    __block_data_t{0x11FC0, block::tamil_sup},
    __block_data_t{0x11FF2, block::no_block},
    __block_data_t{0x11FFF, block::tamil_sup},
    __block_data_t{0x12000, block::cuneiform},
    __block_data_t{0x1239A, block::no_block},
    __block_data_t{0x12400, block::cuneiform_numbers},
    __block_data_t{0x12475, block::no_block},
    __block_data_t{0x12480, block::early_dynastic_cuneiform},
    __block_data_t{0x12544, block::no_block},
    __block_data_t{0x13000, block::egyptian_hieroglyphs},
    __block_data_t{0x13430, block::egyptian_hieroglyph_format_controls},
    __block_data_t{0x13439, block::no_block},
    __block_data_t{0x14400, block::anatolian_hieroglyphs},
    __block_data_t{0x14647, block::no_block},
    __block_data_t{0x16800, block::bamum_sup},
    __block_data_t{0x16A39, block::no_block},
    __block_data_t{0x16A40, block::mro},
    __block_data_t{0x16A6A, block::no_block},
    __block_data_t{0x16A6E, block::mro},
    __block_data_t{0x16A70, block::no_block},
    __block_data_t{0x16AD0, block::bassa_vah},
    __block_data_t{0x16AEE, block::no_block},
    __block_data_t{0x16AF0, block::bassa_vah},
    __block_data_t{0x16AF6, block::no_block},
    __block_data_t{0x16B00, block::pahawh_hmong},
    __block_data_t{0x16B46, block::no_block},
    __block_data_t{0x16B50, block::pahawh_hmong},
    __block_data_t{0x16B78, block::no_block},
    __block_data_t{0x16B7D, block::pahawh_hmong},
    __block_data_t{0x16B90, block::no_block},
    __block_data_t{0x16E40, block::medefaidrin},
    __block_data_t{0x16E9B, block::no_block},
    __block_data_t{0x16F00, block::miao},
    __block_data_t{0x16F4B, block::no_block},
    __block_data_t{0x16F4F, block::miao},
    __block_data_t{0x16F88, block::no_block},
    __block_data_t{0x16F8F, block::miao},
    __block_data_t{0x16FA0, block::no_block},
    __block_data_t{0x16FE0, block::ideographic_symbols},
    __block_data_t{0x16FE4, block::no_block},
    __block_data_t{0x17000, block::tangut},
    __block_data_t{0x187F8, block::no_block},
    __block_data_t{0x18800, block::tangut_components},
    __block_data_t{0x18AF3, block::no_block},
    __block_data_t{0x1B000, block::kana_sup},
    __block_data_t{0x1B100, block::kana_ext_a},
    __block_data_t{0x1B11F, block::no_block},
    __block_data_t{0x1B150, block::small_kana_ext},
    __block_data_t{0x1B153, block::no_block},
    __block_data_t{0x1B164, block::small_kana_ext},
    __block_data_t{0x1B168, block::no_block},
    __block_data_t{0x1B170, block::nushu},
    __block_data_t{0x1B2FC, block::no_block},
    __block_data_t{0x1BC00, block::duployan},
    __block_data_t{0x1BC6B, block::no_block},
    __block_data_t{0x1BC70, block::duployan},
    __block_data_t{0x1BC7D, block::no_block},
    __block_data_t{0x1BC80, block::duployan},
    __block_data_t{0x1BC89, block::no_block},
    __block_data_t{0x1BC90, block::duployan},
    __block_data_t{0x1BC9A, block::no_block},
    __block_data_t{0x1BC9C, block::duployan},
    __block_data_t{0x1BCA0, block::shorthand_format_controls},
    __block_data_t{0x1BCA4, block::no_block},
    __block_data_t{0x1D000, block::byzantine_music},
    __block_data_t{0x1D0F6, block::no_block},
    __block_data_t{0x1D100, block::music},
    __block_data_t{0x1D127, block::no_block},
    __block_data_t{0x1D129, block::music},
    __block_data_t{0x1D1E9, block::no_block},
    __block_data_t{0x1D200, block::ancient_greek_music},
    __block_data_t{0x1D246, block::no_block},
    __block_data_t{0x1D2E0, block::mayan_numerals},
    __block_data_t{0x1D2F4, block::no_block},
    __block_data_t{0x1D300, block::tai_xuan_jing},
    __block_data_t{0x1D357, block::no_block},
    __block_data_t{0x1D360, block::counting_rod},
    __block_data_t{0x1D379, block::no_block},
    __block_data_t{0x1D400, block::math_alphanum},
    __block_data_t{0x1D4A0, block::no_block},
    __block_data_t{0x1D4A2, block::math_alphanum},
    __block_data_t{0x1D4A3, block::no_block},
    __block_data_t{0x1D4A5, block::math_alphanum},
    __block_data_t{0x1D4A7, block::no_block},
    __block_data_t{0x1D4A9, block::math_alphanum},
    __block_data_t{0x1D50B, block::no_block},
    __block_data_t{0x1D50D, block::math_alphanum},
    __block_data_t{0x1D547, block::no_block},
    __block_data_t{0x1D54A, block::math_alphanum},
    __block_data_t{0x1D6A6, block::no_block},
    __block_data_t{0x1D6A8, block::math_alphanum},
    __block_data_t{0x1D7CC, block::no_block},
    __block_data_t{0x1D7CE, block::math_alphanum},
    __block_data_t{0x1D800, block::sutton_signwriting},
    __block_data_t{0x1DA8C, block::no_block},
    __block_data_t{0x1DA9B, block::sutton_signwriting},
    __block_data_t{0x1DAB0, block::no_block},
    __block_data_t{0x1E000, block::glagolitic_sup},
    __block_data_t{0x1E019, block::no_block},
    __block_data_t{0x1E01B, block::glagolitic_sup},
    __block_data_t{0x1E02B, block::no_block},
    __block_data_t{0x1E100, block::nyiakeng_puachue_hmong},
    __block_data_t{0x1E12D, block::no_block},
    __block_data_t{0x1E130, block::nyiakeng_puachue_hmong},
    __block_data_t{0x1E13E, block::no_block},
    __block_data_t{0x1E140, block::nyiakeng_puachue_hmong},
    __block_data_t{0x1E14A, block::no_block},
    __block_data_t{0x1E14E, block::nyiakeng_puachue_hmong},
    __block_data_t{0x1E150, block::no_block},
    __block_data_t{0x1E2C0, block::wancho},
    __block_data_t{0x1E2FA, block::no_block},
    __block_data_t{0x1E2FF, block::wancho},
    __block_data_t{0x1E300, block::no_block},
    __block_data_t{0x1E800, block::mende_kikakui},
    __block_data_t{0x1E8C5, block::no_block},
    __block_data_t{0x1E8C7, block::mende_kikakui},
    __block_data_t{0x1E8D7, block::no_block},
    __block_data_t{0x1E900, block::adlam},
    __block_data_t{0x1E94C, block::no_block},
    __block_data_t{0x1E950, block::adlam},
    __block_data_t{0x1E95A, block::no_block},
    __block_data_t{0x1E95E, block::adlam},
    __block_data_t{0x1E960, block::no_block},
    __block_data_t{0x1EC70, block::indic_siyaq_numbers},
    __block_data_t{0x1ECB5, block::no_block},
    __block_data_t{0x1ED00, block::ottoman_siyaq_numbers},
    __block_data_t{0x1ED3E, block::no_block},
    __block_data_t{0x1EE00, block::arabic_math},
    __block_data_t{0x1EE25, block::no_block},
    __block_data_t{0x1EE27, block::arabic_math},
    __block_data_t{0x1EE3C, block::no_block},
    __block_data_t{0x1EE42, block::arabic_math},
    __block_data_t{0x1EE43, block::no_block},
    __block_data_t{0x1EE47, block::arabic_math},
    __block_data_t{0x1EE55, block::no_block},
    __block_data_t{0x1EE57, block::arabic_math},
    __block_data_t{0x1EE65, block::no_block},
    __block_data_t{0x1EE67, block::arabic_math},
    __block_data_t{0x1EE9C, block::no_block},
    __block_data_t{0x1EEA1, block::arabic_math},
    __block_data_t{0x1EEBC, block::no_block},
    __block_data_t{0x1EEF0, block::arabic_math},
    __block_data_t{0x1EEF2, block::no_block},
    __block_data_t{0x1F000, block::mahjong},
    __block_data_t{0x1F02C, block::no_block},
    __block_data_t{0x1F030, block::domino},
    __block_data_t{0x1F094, block::no_block},
    __block_data_t{0x1F0A0, block::playing_cards},
    __block_data_t{0x1F0AF, block::no_block},
    __block_data_t{0x1F0B1, block::playing_cards},
    __block_data_t{0x1F0F6, block::no_block},
    __block_data_t{0x1F100, block::enclosed_alphanum_sup},
    __block_data_t{0x1F10D, block::no_block},
    __block_data_t{0x1F110, block::enclosed_alphanum_sup},
    __block_data_t{0x1F16D, block::no_block},
    __block_data_t{0x1F170, block::enclosed_alphanum_sup},
    __block_data_t{0x1F1AD, block::no_block},
    __block_data_t{0x1F1E6, block::enclosed_alphanum_sup},
    __block_data_t{0x1F200, block::enclosed_ideographic_sup},
    __block_data_t{0x1F203, block::no_block},
    __block_data_t{0x1F210, block::enclosed_ideographic_sup},
    __block_data_t{0x1F23C, block::no_block},
    __block_data_t{0x1F240, block::enclosed_ideographic_sup},
    __block_data_t{0x1F249, block::no_block},
    __block_data_t{0x1F250, block::enclosed_ideographic_sup},
    __block_data_t{0x1F252, block::no_block},
    __block_data_t{0x1F260, block::enclosed_ideographic_sup},
    __block_data_t{0x1F266, block::no_block},
    __block_data_t{0x1F300, block::misc_pictographs},
    __block_data_t{0x1F600, block::emoticons},
    __block_data_t{0x1F650, block::ornamental_dingbats},
    __block_data_t{0x1F680, block::transport_and_map},
    __block_data_t{0x1F6D6, block::no_block},
    __block_data_t{0x1F6E0, block::transport_and_map},
    __block_data_t{0x1F6ED, block::no_block},
    __block_data_t{0x1F6F0, block::transport_and_map},
    __block_data_t{0x1F6FB, block::no_block},
    __block_data_t{0x1F700, block::alchemical},
    __block_data_t{0x1F774, block::no_block},
    __block_data_t{0x1F780, block::geometric_shapes_ext},
    __block_data_t{0x1F7D9, block::no_block},
    __block_data_t{0x1F7E0, block::geometric_shapes_ext},
    __block_data_t{0x1F7EC, block::no_block},
    __block_data_t{0x1F800, block::sup_arrows_c},
    __block_data_t{0x1F80C, block::no_block},
    __block_data_t{0x1F810, block::sup_arrows_c},
    __block_data_t{0x1F848, block::no_block},
    __block_data_t{0x1F850, block::sup_arrows_c},
    __block_data_t{0x1F85A, block::no_block},
    __block_data_t{0x1F860, block::sup_arrows_c},
    __block_data_t{0x1F888, block::no_block},
    __block_data_t{0x1F890, block::sup_arrows_c},
    __block_data_t{0x1F8AE, block::no_block},
    __block_data_t{0x1F900, block::sup_symbols_and_pictographs},
    __block_data_t{0x1F977, block::no_block},
    __block_data_t{0x1F97A, block::sup_symbols_and_pictographs},
    __block_data_t{0x1F9A3, block::no_block},
    __block_data_t{0x1F9A5, block::sup_symbols_and_pictographs},
    __block_data_t{0x1F9AB, block::no_block},
    __block_data_t{0x1F9AE, block::sup_symbols_and_pictographs},
    __block_data_t{0x1F9CB, block::no_block},
    __block_data_t{0x1F9CD, block::sup_symbols_and_pictographs},
    __block_data_t{0x1FA00, block::chess_symbols},
    __block_data_t{0x1FA54, block::no_block},
    __block_data_t{0x1FA60, block::chess_symbols},
    __block_data_t{0x1FA6E, block::no_block},
    __block_data_t{0x1FA70, block::symbols_and_pictographs_ext_a},
    __block_data_t{0x1FA74, block::no_block},
    __block_data_t{0x1FA78, block::symbols_and_pictographs_ext_a},
    __block_data_t{0x1FA7B, block::no_block},
    __block_data_t{0x1FA80, block::symbols_and_pictographs_ext_a},
    __block_data_t{0x1FA83, block::no_block},
    __block_data_t{0x1FA90, block::symbols_and_pictographs_ext_a},
    __block_data_t{0x1FA96, block::no_block},
    __block_data_t{0x20000, block::cjk_ext_b},
    __block_data_t{0x20002, block::no_block},
    __block_data_t{0x20064, block::cjk_ext_b},
    __block_data_t{0x20065, block::no_block},
    __block_data_t{0x200E2, block::cjk_ext_b},
    __block_data_t{0x200E3, block::no_block},
    __block_data_t{0x20121, block::cjk_ext_b},
    __block_data_t{0x20122, block::no_block},
    __block_data_t{0x2092A, block::cjk_ext_b},
    __block_data_t{0x2092B, block::no_block},
    __block_data_t{0x20983, block::cjk_ext_b},
    __block_data_t{0x20984, block::no_block},
    __block_data_t{0x2098C, block::cjk_ext_b},
    __block_data_t{0x2098D, block::no_block},
    __block_data_t{0x2099C, block::cjk_ext_b},
    __block_data_t{0x2099D, block::no_block},
    __block_data_t{0x20AEA, block::cjk_ext_b},
    __block_data_t{0x20AEB, block::no_block},
    __block_data_t{0x20AFD, block::cjk_ext_b},
    __block_data_t{0x20AFE, block::no_block},
    __block_data_t{0x20B19, block::cjk_ext_b},
    __block_data_t{0x20B1A, block::no_block},
    __block_data_t{0x22390, block::cjk_ext_b},
    __block_data_t{0x22391, block::no_block},
    __block_data_t{0x22998, block::cjk_ext_b},
    __block_data_t{0x22999, block::no_block},
    __block_data_t{0x23B1B, block::cjk_ext_b},
    __block_data_t{0x23B1C, block::no_block},
    __block_data_t{0x2626D, block::cjk_ext_b},
    __block_data_t{0x2626E, block::no_block},
    __block_data_t{0x2F800, block::cjk_compat_ideographs_sup},
    __block_data_t{0x2FA1E, block::no_block},
    __block_data_t{0xE0000, block::tags},
    __block_data_t{0xE0002, block::no_block},
    __block_data_t{0xE0020, block::tags},
    __block_data_t{0xE0080, block::no_block},
    __block_data_t{0xE0100, block::vs_sup},
    __block_data_t{0xE01F0, block::no_block},
    __block_data_t{0x110000, block::no_block}};
enum class category {
    other,
    c = other,
    control,
    cc = control,
    format,
    cf = format,
    unassigned,
    cn = unassigned,
    private_use,
    co = private_use,
    surrogate,
    cs = surrogate,
    letter,
    l = letter,
    cased_letter,
    lc = cased_letter,
    lowercase_letter,
    ll = lowercase_letter,
    modifier_letter,
    lm = modifier_letter,
    other_letter,
    lo = other_letter,
    titlecase_letter,
    lt = titlecase_letter,
    uppercase_letter,
    lu = uppercase_letter,
    mark,
    m = mark,
    spacing_mark,
    mc = spacing_mark,
    enclosing_mark,
    me = enclosing_mark,
    nonspacing_mark,
    mn = nonspacing_mark,
    number,
    n = number,
    decimal_number,
    nd = decimal_number,
    letter_number,
    nl = letter_number,
    other_number,
    no = other_number,
    punctuation,
    p = punctuation,
    connector_punctuation,
    pc = connector_punctuation,
    dash_punctuation,
    pd = dash_punctuation,
    close_punctuation,
    pe = close_punctuation,
    final_punctuation,
    pf = final_punctuation,
    initial_punctuation,
    pi = initial_punctuation,
    other_punctuation,
    po = other_punctuation,
    open_punctuation,
    ps = open_punctuation,
    symbol,
    s = symbol,
    currency_symbol,
    sc = currency_symbol,
    modifier_symbol,
    sk = modifier_symbol,
    math_symbol,
    sm = math_symbol,
    other_symbol,
    so = other_symbol,
    separator,
    z = separator,
    line_separator,
    zl = line_separator,
    paragraph_separator,
    zp = paragraph_separator,
    space_separator,
    zs = space_separator,
    __max
};
static constexpr const std::array __categories_names = {
    __string_with_idx{"c", 0},
    __string_with_idx{"cased_letter", 7},
    __string_with_idx{"cc", 1},
    __string_with_idx{"cf", 2},
    __string_with_idx{"close_punctuation", 24},
    __string_with_idx{"cn", 3},
    __string_with_idx{"co", 4},
    __string_with_idx{"connector_punctuation", 22},
    __string_with_idx{"control", 1},
    __string_with_idx{"cs", 5},
    __string_with_idx{"currency_symbol", 30},
    __string_with_idx{"dash_punctuation", 23},
    __string_with_idx{"decimal_number", 18},
    __string_with_idx{"enclosing_mark", 15},
    __string_with_idx{"final_punctuation", 25},
    __string_with_idx{"format", 2},
    __string_with_idx{"initial_punctuation", 26},
    __string_with_idx{"l", 6},
    __string_with_idx{"lc", 7},
    __string_with_idx{"letter", 6},
    __string_with_idx{"letter_number", 19},
    __string_with_idx{"line_separator", 35},
    __string_with_idx{"ll", 8},
    __string_with_idx{"lm", 9},
    __string_with_idx{"lo", 10},
    __string_with_idx{"lowercase_letter", 8},
    __string_with_idx{"lt", 11},
    __string_with_idx{"lu", 12},
    __string_with_idx{"m", 13},
    __string_with_idx{"mark", 13},
    __string_with_idx{"math_symbol", 32},
    __string_with_idx{"mc", 14},
    __string_with_idx{"me", 15},
    __string_with_idx{"mn", 16},
    __string_with_idx{"modifier_letter", 9},
    __string_with_idx{"modifier_symbol", 31},
    __string_with_idx{"n", 17},
    __string_with_idx{"nd", 18},
    __string_with_idx{"nl", 19},
    __string_with_idx{"no", 20},
    __string_with_idx{"nonspacing_mark", 16},
    __string_with_idx{"number", 17},
    __string_with_idx{"open_punctuation", 28},
    __string_with_idx{"other", 0},
    __string_with_idx{"other_letter", 10},
    __string_with_idx{"other_number", 20},
    __string_with_idx{"other_punctuation", 27},
    __string_with_idx{"other_symbol", 33},
    __string_with_idx{"p", 21},
    __string_with_idx{"paragraph_separator", 36},
    __string_with_idx{"pc", 22},
    __string_with_idx{"pd", 23},
    __string_with_idx{"pe", 24},
    __string_with_idx{"pf", 25},
    __string_with_idx{"pi", 26},
    __string_with_idx{"po", 27},
    __string_with_idx{"private_use", 4},
    __string_with_idx{"ps", 28},
    __string_with_idx{"punctuation", 21},
    __string_with_idx{"s", 29},
    __string_with_idx{"sc", 30},
    __string_with_idx{"separator", 34},
    __string_with_idx{"sk", 31},
    __string_with_idx{"sm", 32},
    __string_with_idx{"so", 33},
    __string_with_idx{"space_separator", 37},
    __string_with_idx{"spacing_mark", 14},
    __string_with_idx{"surrogate", 5},
    __string_with_idx{"symbol", 29},
    __string_with_idx{"titlecase_letter", 11},
    __string_with_idx{"unassigned", 3},
    __string_with_idx{"uppercase_letter", 12},
    __string_with_idx{"z", 34},
    __string_with_idx{"zl", 35},
    __string_with_idx{"zp", 36},
    __string_with_idx{"zs", 37}};
static constexpr __range_array<4> __cat_cc = {
    {__range_array_elem{0x0000, 1} /*32*/, __range_array_elem{0x0020, 0} /*95*/,
     __range_array_elem{0x007F, 1} /*33*/, __range_array_elem{0x00A0, 0} /*1113951*/}};
static constexpr __range_array<15> __cat_zs = {
    {__range_array_elem{0x0000, 0} /*32*/, __range_array_elem{0x0020, 1} /*1*/,
     __range_array_elem{0x0021, 0} /*127*/, __range_array_elem{0x00A0, 1} /*1*/,
     __range_array_elem{0x00A1, 0} /*5599*/, __range_array_elem{0x1680, 1} /*1*/,
     __range_array_elem{0x1681, 0} /*2431*/, __range_array_elem{0x2000, 1} /*11*/,
     __range_array_elem{0x200B, 0} /*36*/, __range_array_elem{0x202F, 1} /*1*/,
     __range_array_elem{0x2030, 0} /*47*/, __range_array_elem{0x205F, 1} /*1*/,
     __range_array_elem{0x2060, 0} /*4000*/, __range_array_elem{0x3000, 1} /*1*/,
     __range_array_elem{0x3001, 0} /*1101822*/}};
static constexpr __bool_trie<32, 991, 1, 0, 51, 255, 1, 0, 482, 4, 26, 39> __cat_po{
    {0x8c00d4ee00000000, 0x0000000010000001, 0x80c0008200000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x4000000000000000, 0x0000000000000080, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x00000000fc000000, 0x0000000000000200, 0x0018000000000049,
     0x00000000c8003600, 0x00003c0000000000, 0x0000000000000000, 0x0000000000100000,
     0x0000000000003fff, 0x0000000000000000, 0x0000000000000000, 0x0380000000000000},
    {1,  2,  2,  2,  3,  2,  4,  2,  5,  2,  6, 2, 2,  2,  2, 2,  7, 8,  2,  2,  2,  2,  9, 2,  10,
     2,  2,  11, 2,  12, 13, 2,  14, 2,  15, 2, 2, 2,  2,  2, 2,  2, 2,  2,  16, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  17, 2,  18, 19, 2, 2, 20, 21, 2, 2,  2, 2,  22, 2,  2,  23, 2, 24, 2,
     2,  25, 2,  26, 27, 28, 2,  29, 2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  30, 31, 2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  32, 2, 6,  2,
     2,  33, 34, 2,  2,  2,  2,  2,  2,  35, 2, 2, 15, 2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  28, 2,  2,  2,  2,  36, 37, 2,  38, 2, 2, 2,  2,  2, 39, 2, 40, 41, 42, 2,  43, 2, 44, 2,
     45, 2,  2,  2,  46, 2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 2, 2,  2,  2, 2,  2, 2,  2,  2,  2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  47, 48, 2, 2, 49, 50, 2, 2},
    {0x7fff000000000000, 0x0000000040000000, 0x0000000000000000, 0x0001003000000000,
     0x2000000000000000, 0x0040000000000000, 0x0001000000000000, 0x0080000000000000,
     0x0000000000000010, 0x0010000000000000, 0x000000000c008000, 0x000000000017fff0,
     0x0000000000000020, 0x00000000061f0000, 0x000000000000fc00, 0x0800000000000000,
     0x000001ff00000000, 0x0000400000000000, 0x0000380000000000, 0x0060000000000000,
     0x0000000007700000, 0x00000000000007bf, 0x0000000000000030, 0x00000000c0000000,
     0x00003f7f00000000, 0x00000001fc000000, 0xf000000000000000, 0xf800000000000000,
     0xc000000000000000, 0x00000000000800ff, 0x79ff00ff00c00000, 0x000000007febff8e,
     0xde00000000000000, 0xf3ff7c00cb7fc9c3, 0x000000000000fffa, 0x200000000000000e,
     0x000000000000e000, 0x4008000000000000, 0x00fc000000000000, 0x00f0000000000000,
     0x170000000000c000, 0x0000c00000000000, 0x0000000080000000, 0x00000000c0003ffe,
     0x00000000f0000000, 0x00030000c0000000, 0x0000080000000000, 0x00010000027f0000,
     0x00000d0380f71e60, 0x100000018c00d4ee, 0x0000003200000000},
    {1, 2, 3, 3, 3, 4, 3, 3, 3, 3, 5, 3, 6, 7, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
    {1,  0,  0,  0, 0,  0, 0, 0,  0,  0,  2,  3,  0,  0,  0, 0,  0,  4,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 5,  0, 0, 6,  0,  0,  0,  0,  7,  0,  8, 9,  0,  10, 0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 11, 0,  0,  0,  12, 13, 14, 0, 15, 0,  16, 17, 0,  18, 0,  0,  0,  0,
     0,  0,  19, 0, 20, 0, 0, 0,  21, 0,  22, 0,  0,  23, 0, 0,  0,  24, 0,  0,  0,  0,  0,  0,  25,
     26, 27, 28, 0, 0,  0, 0, 0,  0,  29, 0,  0,  0,  0,  0, 0,  0,  0,  0,  30, 0,  0,  0,  26, 0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  31, 0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  32, 0,  33, 34, 35, 0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  36, 0,  0,  0,  0, 25, 0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  2,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  37, 0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0, 0,  0, 38},
    {0x0000000000000000, 0x0000000000000007, 0x0000000080000000, 0x0000000000010000,
     0x0000800000000000, 0x0000000000800000, 0x8000000080000000, 0x8000000001ff0000,
     0x007f000000000000, 0xfe00000000000000, 0x000000001e000000, 0x0000000003e00000,
     0x0000000000003f80, 0xd800000000000000, 0x0000000000000003, 0x003000000000000f,
     0x00000000e80021e0, 0x3f00000000000000, 0x0000020000000000, 0x000000002800f800,
     0x0000000000000040, 0x0000000000fffffe, 0x00001fff0000000e, 0x7000000000000000,
     0x0800000000000000, 0x0000000400000000, 0x8000000000000000, 0x000000000000007f,
     0x00000007dc000000, 0x000300000000003e, 0x0180000000000000, 0x001f000000000000,
     0x0000c00000000000, 0x0020000000000000, 0x0f80000000000000, 0x0000000000000010,
     0x0000000007800000, 0x0000000000000f80, 0x00000000c0000000}};
static constexpr __range_array<43> __cat_sc = {{__range_array_elem{0x0000, 0} /*36*/,
                                                __range_array_elem{0x0024, 1} /*1*/,
                                                __range_array_elem{0x0025, 0} /*125*/,
                                                __range_array_elem{0x00A2, 1} /*4*/,
                                                __range_array_elem{0x00A6, 0} /*1257*/,
                                                __range_array_elem{0x058F, 1} /*1*/,
                                                __range_array_elem{0x0590, 0} /*123*/,
                                                __range_array_elem{0x060B, 1} /*1*/,
                                                __range_array_elem{0x060C, 0} /*498*/,
                                                __range_array_elem{0x07FE, 1} /*2*/,
                                                __range_array_elem{0x0800, 0} /*498*/,
                                                __range_array_elem{0x09F2, 1} /*2*/,
                                                __range_array_elem{0x09F4, 0} /*7*/,
                                                __range_array_elem{0x09FB, 1} /*1*/,
                                                __range_array_elem{0x09FC, 0} /*245*/,
                                                __range_array_elem{0x0AF1, 1} /*1*/,
                                                __range_array_elem{0x0AF2, 0} /*263*/,
                                                __range_array_elem{0x0BF9, 1} /*1*/,
                                                __range_array_elem{0x0BFA, 0} /*581*/,
                                                __range_array_elem{0x0E3F, 1} /*1*/,
                                                __range_array_elem{0x0E40, 0} /*2459*/,
                                                __range_array_elem{0x17DB, 1} /*1*/,
                                                __range_array_elem{0x17DC, 0} /*2244*/,
                                                __range_array_elem{0x20A0, 1} /*32*/,
                                                __range_array_elem{0x20C0, 0} /*34680*/,
                                                __range_array_elem{0xA838, 1} /*1*/,
                                                __range_array_elem{0xA839, 0} /*21955*/,
                                                __range_array_elem{0xFDFC, 1} /*1*/,
                                                __range_array_elem{0xFDFD, 0} /*108*/,
                                                __range_array_elem{0xFE69, 1} /*1*/,
                                                __range_array_elem{0xFE6A, 0} /*154*/,
                                                __range_array_elem{0xFF04, 1} /*1*/,
                                                __range_array_elem{0xFF05, 0} /*219*/,
                                                __range_array_elem{0xFFE0, 1} /*2*/,
                                                __range_array_elem{0xFFE2, 0} /*3*/,
                                                __range_array_elem{0xFFE5, 1} /*2*/,
                                                __range_array_elem{0xFFE7, 0} /*8182*/,
                                                __range_array_elem{0x11FDD, 1} /*4*/,
                                                __range_array_elem{0x11FE1, 0} /*49950*/,
                                                __range_array_elem{0x1E2FF, 1} /*1*/,
                                                __range_array_elem{0x1E300, 0} /*2480*/,
                                                __range_array_elem{0x1ECB0, 1} /*1*/,
                                                __range_array_elem{0x1ECB1, 0} /*987982*/}};
static constexpr __bool_trie<32, 962, 28, 2, 19, 0, 0, 0, 0, 0, 0, 0> __cat_ps{
    {0x0000010000000000, 0x0800000008000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  2, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  3, 4, 5, 0, 0, 0, 0,  0, 0, 0, 0,  0, 6, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  7, 0, 8, 0, 0, 0, 0,  0, 0, 9, 10, 0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 11, 12, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 0,
     0,  0, 0, 0,  0, 0, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0, 0, 0, 14, 0, 0, 0, 15,
     16, 0, 0, 17, 18},
    {0x0000000000000000, 0x1400000000000000, 0x0000000008000000, 0x0000000044000000,
     0x2000000000000020, 0x0000000000002000, 0x0000020000000500, 0x0015550000000000,
     0x0000554000000020, 0x0000000000aaaaa8, 0x1000000005000000, 0x0000015400000000,
     0x0000000000000004, 0x0000000025515500, 0x8000000000000000, 0xaaa0000000800000,
     0x000000002a00008a, 0x0800000000000100, 0x0000000488000000},
    {},
    {},
    {}};
static constexpr __bool_trie<32, 962, 28, 2, 17, 0, 0, 0, 0, 0, 0, 0> __cat_pe{
    {0x0000020000000000, 0x2000000020000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     2,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 3, 4, 0, 0,  0, 0, 0, 0, 0, 0, 0, 5, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 6, 0, 7, 0, 0, 0,  0, 0, 0, 8, 9, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0,  0,  0, 0,
     0,  0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 13, 14, 0, 0,
     15, 16},
    {0x0000000000000000, 0x2800000000000000, 0x0000000010000000, 0x4000000000000040,
     0x0000000000004000, 0x0000040000000a00, 0x002aaa0000000000, 0x0000aa8000000040,
     0x0000000001555550, 0x200000000a000000, 0x000002a800000000, 0x00000000caa2aa00,
     0x4000000000000000, 0x5540000001000000, 0x0000000054000115, 0x2000000000000200,
     0x0000000920000000},
    {},
    {},
    {}};
static constexpr __bool_trie<32, 895, 97, 0, 25, 2, 13, 241, 97, 91, 4, 7> __cat_sm{
    {0x7000080000000000, 0x5000000000000000, 0x0002100000000000, 0x0080000000800000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0040000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x00000000000001c0, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1,  2,  0, 3,  4, 5, 6, 7, 7, 7, 7,  8,  9, 10, 11, 0, 0,  0,  0, 0, 0, 12, 13, 0, 14, 0, 0,
     0,  0,  0, 15, 0, 0, 0, 0, 7, 7, 16, 17, 7, 7,  7,  7, 18, 19, 0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0, 0, 0, 0, 0, 0,  20, 0, 0,  0,  0, 0,  0,  0, 0, 0, 0,  0,  0, 21, 0, 0,
     22, 23, 0, 24},
    {0x0000000000000000, 0x1c00000000040010, 0x0000000000001c00, 0x0000000001000000,
     0x000000000000081f, 0x000040490c1f0000, 0xfff000000014c000, 0xffffffffffffffff,
     0x0000000300000000, 0x1000000000000000, 0x000ffffff8000000, 0x00000003f0000000,
     0x0080000000000000, 0xff00000000000002, 0x0000800000000000, 0xffff003fffffff9f,
     0xfffffffffe000007, 0xcffffffff0ffffff, 0xffff000000000000, 0x0000000000001f9f,
     0x0000020000000000, 0x0000007400000000, 0x0000000070000800, 0x0000000050000000,
     0x00001e0400000000},
    {1, 2},
    {1, 2, 3, 4, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6},
    {0x0000000000000000, 0x0800000008000002, 0x0020000000200000, 0x0000800000008000,
     0x0000020000000200, 0x0000000000000008, 0x0003000000000000}};
static constexpr flat_array<24> __cat_pd{{0x002D, 0x058A, 0x05BE, 0x1400, 0x1806, 0x2010,
                                          0x2011, 0x2012, 0x2013, 0x2014, 0x2015, 0x2E17,
                                          0x2E1A, 0x2E3A, 0x2E3B, 0x2E40, 0x301C, 0x3030,
                                          0x30A0, 0xFE31, 0xFE32, 0xFE58, 0xFE63, 0xFF0D}};
static constexpr __bool_trie<32, 984, 5, 3, 9, 255, 1, 0, 340, 18, 26, 8> __cat_nd{
    {0x03ff000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x000003ff00000000, 0x0000000000000000, 0x03ff000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x00000000000003ff},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 2, 0, 2, 3, 0, 0, 0, 0, 4, 2, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 2, 0, 0, 0, 0,
     5, 0, 2, 0, 0, 6, 0, 0, 2, 7, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 4,
     0, 0, 8, 0, 2, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
    {0x0000000000000000, 0x0000ffc000000000, 0x0000000003ff0000, 0x000003ff00000000,
     0x00000000000003ff, 0x000000000000ffc0, 0x0000000003ff03ff, 0x03ff000000000000,
     0x03ff000003ff0000},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 4, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 2, 4, 0, 0, 5, 0, 0, 0, 2, 0, 0, 0, 0,
     0, 5, 0, 5, 0, 0, 0, 0, 0, 5, 0, 6, 2, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 5, 0, 0, 0, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
     0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0,
     0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    {0x0000000000000000, 0x000003ff00000000, 0x03ff000000000000, 0x0000ffc000000000,
     0xffc0000000000000, 0x0000000003ff0000, 0x00000000000003ff, 0xffffffffffffc000}};
static constexpr __bool_trie<32, 955, 34, 3, 24, 255, 1, 0, 341, 16, 27, 24> __cat_lu{
    {0x0000000000000000, 0x0000000007fffffe, 0x0000000000000000, 0x000000007f7fffff,
     0xaa55555555555555, 0x2b555555555554aa, 0x11aed2d5b1dbced6, 0x55d255554aaaa490,
     0x6c05555555555555, 0x000000000000557a, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x8045000000000000, 0x00000ffbfffed740, 0xe6905555551c8000,
     0x0000ffffffffffff, 0x5555555500000000, 0x5555555555555401, 0x5555555555552aab,
     0xfffe555555555555, 0x00000000007fffff, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1, 2,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  1,  3, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 4, 0, 0, 0, 0, 0, 5,  5,
     6, 5,  7, 8, 9, 10, 0, 0, 0, 0, 11, 12, 13, 0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 14, 15,
     5, 16, 0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  17, 18, 0, 19, 20, 21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0,  23},
    {0x0000000000000000, 0xffffffff00000000, 0x00000000000020bf, 0x003fffffffffffff,
     0xe7ffffffffff0000, 0x5555555555555555, 0x5555555540155555, 0xff00ff003f00ff00,
     0x0000ff00aa003f00, 0x0f00000000000000, 0x0f001f000f000f00, 0xc00f3d503e273884,
     0x0000000000000020, 0x0000000000000008, 0x00007fffffffffff, 0xc025ea9d00000000,
     0x0004280555555555, 0x0000155555555555, 0x0000000005555555, 0x5554555400000000,
     0x6a00555555555555, 0x555f7d5555452855, 0x0000000000000074, 0x07fffffe00000000},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 4, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1,  0,  2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  5,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23},
    {0x0000000000000000, 0x000000ffffffffff, 0xffff000000000000, 0x00000000000fffff,
     0x0007ffffffffffff, 0xffffffff00000000, 0x00000000ffffffff, 0xfff0000003ffffff,
     0xffffff0000003fff, 0x003fde64d0000003, 0x000003ffffff0000, 0x7b0000001fdfe7b0,
     0xfffff0000001fc5f, 0x03ffffff0000003f, 0x00003ffffff00000, 0xf0000003ffffff00,
     0xffff0000003fffff, 0xffffff00000003ff, 0x07fffffc00000001, 0x001ffffff0000000,
     0x00007fffffc00000, 0x000001ffffff0000, 0x0000000000000400, 0x00000003ffffffff}};
static constexpr __bool_trie<32, 898, 94, 0, 12, 1, 15, 240, 1, 79, 48, 2> __cat_sk{
    {0x0000000000000000, 0x0000000140000000, 0x0110810000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0xffffafe0fffc003c,
     0x0000000000000000, 0x0020000000000000, 0x0000000000000030, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 10, 0, 11},
    {0x0000000000000000, 0xa000000000000000, 0x6000e000e000e003, 0x0000000018000000,
     0x00000003007fffff, 0x0000000000000600, 0x0000000008000000, 0xfffc000000000000,
     0x0000000000000003, 0x4000000000000000, 0x0000000000000001, 0x0000000800000000},
    {1},
    {1},
    {0x0000000000000000, 0xf800000000000000}};
static constexpr flat_array<10> __cat_pc{
    {0x005F, 0x203F, 0x2040, 0x2054, 0xFE33, 0xFE34, 0xFE4D, 0xFE4E, 0xFE4F, 0xFF3F}};
static constexpr __bool_trie<32, 955, 35, 2, 30, 255, 1, 0, 342, 16, 26, 25> __cat_ll{
    {0x0000000000000000, 0x07fffffe00000000, 0x0020000000000000, 0xff7fffff80000000,
     0x55aaaaaaaaaaaaaa, 0xd4aaaaaaaaaaab55, 0xe6512d2a4e243129, 0xaa29aaaab5555240,
     0x93faaaaaaaaaaaaa, 0xffffffffffffaa85, 0x0000ffffffefffff, 0x0000000000000000,
     0x0000000000000000, 0x388a000000000000, 0xfffff00000010000, 0x192faaaaaae37fff,
     0xffff000000000000, 0xaaaaaaaaffffffff, 0xaaaaaaaaaaaaa802, 0xaaaaaaaaaaaad554,
     0x0000aaaaaaaaaaaa, 0xffffffff00000000, 0x00000000000001ff, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 2, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  3,  0, 4, 5, 6,
     0,  7,  7, 8,  7,  9,  10, 11, 12, 0,  0, 0, 0, 13, 14, 15, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  16, 17, 7,  18, 19, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     20, 21, 0, 22, 23, 24, 25, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 16, 26, 27, 0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 0, 0,
     0,  28, 0, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0,  0,  0, 0, 29},
    {0x0000000000000000, 0xe7ffffffffff0000, 0x3f00000000000000, 0x00000000000001ff,
     0x00000fffffffffff, 0xfefff80000000000, 0x0000000007ffffff, 0xaaaaaaaaaaaaaaaa,
     0xaaaaaaaabfeaaaaa, 0x00ff00ff003f00ff, 0x3fff00ff00ff003f, 0x40df00ff00ff00ff,
     0x00dc00ff00cf00dc, 0x321080000008c400, 0x00000000000043c0, 0x0000000000000010,
     0xffff000000000000, 0x0fda15627fffffff, 0x0008501aaaaaaaaa, 0x000020bfffffffff,
     0x00002aaaaaaaaaaa, 0x000000000aaaaaaa, 0xaaabaaa800000000, 0x95feaaaaaaaaaaaa,
     0xaaa082aaaaba50aa, 0x0400000000000008, 0xffff00ff07ffffff, 0xffffffffffffffff,
     0x0000000000f8007f, 0x0000000007fffffe},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 4, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1,  2,  0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
     21, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 24},
    {0x0000000000000000, 0xffffff0000000000, 0x000000000000ffff, 0x0fffffffff000000,
     0x0007ffffffffffff, 0x00000000ffffffff, 0xffffffff00000000, 0x000ffffffc000000,
     0x000000ffffdfc000, 0xebc000000ffffffc, 0xfffffc000000ffef, 0x00ffffffc000000f,
     0x00000ffffffc0000, 0xfc000000ffffffc0, 0xffffc000000fffff, 0x0ffffffc000000ff,
     0x0000ffffffc00000, 0x0000003ffffffc00, 0xf0000003f7fffffc, 0xffc000000fdfffff,
     0xffff0000003f7fff, 0xfffffc000000fdff, 0x0000000000000bf7, 0xfffffffc00000000,
     0x000000000000000f}};
static constexpr __bool_trie<32, 985, 7, 0, 53, 255, 1, 0, 487, 4, 21, 48> __cat_so{
    {0x0000000000000000, 0x0000000000000000, 0x0001424000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000004, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000006000, 0x0000000000000000,
     0x000000000000c000, 0x0000000000000000, 0x0000000000000000, 0x6000020040000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0040000000000000},
    {1,  0,  0,  0,  0,  0,  2,  0,  3,  0,  4,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  6,  0,  7,
     8,  0,  0,  9,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  10, 0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  11, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  12, 0,  13, 0,  0,  0,  0,  0,  14, 0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  15, 16, 17,
     18, 0,  0,  0,  0,  19, 20, 21, 22, 23, 24, 25, 26, 27, 27, 28, 29, 27, 30, 27, 27, 27, 31, 32,
     0,  27, 27, 27, 27, 0,  0,  0,  0,  0,  0,  0,  0,  33, 34, 35, 27, 0,  0,  0,  36, 0,  0,  0,
     0,  0,  0,  37, 38, 27, 27, 27, 39, 40, 0,  0,  0,  0,  0,  41, 42, 43, 44, 45, 46, 27, 27, 27,
     27, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  27, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  47, 48, 0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  49, 0,  0,  0,  0,  0,  0,  0,  0,  50, 0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  51, 0,  0,  0,  0,  0,  0,  0,
     52},
    {0x0000000000000000, 0x0400000000000000, 0x0001000000000000, 0x05f8000000000000,
     0x8000000000000000, 0x0200000000008000, 0x01500000fce8000e, 0xc000000000000000,
     0x0000000001e0dfbf, 0x00000000c0000000, 0x0000000003ff0000, 0x0000200000000000,
     0x0000000000000001, 0xffffffffc0000000, 0x1ff007fe00000000, 0x0c0042afc0d0037b,
     0x000000000000b400, 0xffffbfb6f3e00c00, 0x000fffffffeb3fff, 0xfffff9fcfffff0ff,
     0xefffffffffffffff, 0xfff0000007ffffff, 0xfffffffc0fffffff, 0x0000007fffffffff,
     0x00000000000007ff, 0xfffffffff0000000, 0x000003ffffffffff, 0xffffffffffffffff,
     0xff7fffffffffffff, 0x00fffffffffffffd, 0xffff7fffffffffff, 0x000000ffffffffff,
     0xfffffffffff00000, 0x0000ffffffffffff, 0xffcfffffffffe060, 0xffffffffff3fffff,
     0x000007e000000000, 0xfffffffffbffffff, 0x000fffffffffffff, 0x0fff0000003fffff,
     0xc0c00001000c0010, 0x00000000ffc30000, 0x0000000fffffffff, 0xfffffc007fffffff,
     0xffffffff000100ff, 0x0001fffffffffc00, 0x7fffffffffffffff, 0xffffffffffff0000,
     0x000000000000007f, 0x02c00f0000000000, 0x0380000000000000, 0x2000000000000000,
     0x3000611000000000},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 5, 6, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1,  2,  3,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  8,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  9,  10, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  11, 0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  12, 12, 12, 13, 14, 15, 16, 17, 12, 18, 0,  0,  12, 19, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  12, 12, 12, 12, 12, 12, 12, 12, 20, 21, 22, 0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  23, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  24, 0,
     25, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  26, 12, 27, 28, 29, 30, 31, 32, 33, 34, 0,  0,
     12, 12, 12, 35, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 36, 12, 37, 12, 38, 39, 40, 41, 0,
     42, 43, 44, 45, 12, 46, 47},
    {0x0000000000000000, 0xff80000000000000, 0xfe00000000000000, 0x000000010fff73ff,
     0x1fffffffffff0000, 0x0180000000000000, 0x0000000000000100, 0x8000000000000000,
     0x0003fffe1fe00000, 0xf000000000000000, 0x0000000000000020, 0x0000000010000000,
     0xffffffffffffffff, 0x003fffffffffffff, 0xfffffe7fffffffff, 0x00001c1fffffffff,
     0xffffc3fffffff018, 0x000001ffffffffff, 0x0000000000000023, 0x00000000007fffff,
     0x0780000000000000, 0xffdfe00000000000, 0x000000000000006f, 0x0000000000008000,
     0x0000100000000000, 0x0000400000000000, 0xffff0fffffffffff, 0xfffe7fff000fffff,
     0x003ffffffffefffe, 0xffffffffffff0000, 0xffff1fffffffffff, 0x00001fffffffffff,
     0xffffffc000000000, 0x0fffffffffff0007, 0x0000003f000301ff, 0x07ffffffffffffff,
     0x07ff1fff003fffff, 0x000fffffffffffff, 0x00000fff01ffffff, 0xffffffffffff0fff,
     0xffffffff03ff00ff, 0x00003fffffff00ff, 0xffffffffffffefff, 0xfc7bffffffffffff,
     0xffffc7e7ffffffff, 0xffffffffffffe7ff, 0x070f3fff000fffff, 0x00000000003f0007}};
static constexpr __bool_trie<32, 991, 1, 0, 141, 255, 1, 0, 1023, 1, 0, 99> __cat_lo{
    {0x0000000000000000, 0x0000000000000000, 0x0400040000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0800000000000000, 0x000000000000000f,
     0x0000000000000000, 0x0000000000000000, 0x0000000000100000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x000787ffffff0000,
     0xffffffff00000000, 0xfffec000000007fe, 0xffffffffffffffff, 0x9c00c000002fffff,
     0x0000fffffffd0000, 0xffffffffffffe000, 0x0002003fffffffff, 0x000007fffffffc00},
    {1,   2,   3,   4,   5,   6,   7,  8,  9,   10, 11,  12,  13,  14,  15,  16,  17,  18,  19,
     20,  21,  22,  23,  24,  25,  26, 27, 28,  29, 30,  3,   31,  32,  33,  3,   34,  34,  34,
     34,  34,  35,  36,  37,  38,  39, 40, 3,   41, 34,  34,  34,  34,  34,  34,  34,  34,  42,
     43,  44,  45,  46,  47,  48,  49, 50, 51,  52, 53,  54,  55,  56,  57,  58,  3,   3,   59,
     60,  61,  62,  63,  64,  3,   65, 3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   66,  3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   67,  68,  69,  70,  3,
     3,   3,   3,   3,   3,   3,   3,  71, 41,  72, 73,  74,  34,  75,  67,  3,   3,   3,   3,
     3,   3,   3,   3,   76,  3,   77, 3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   78,  3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   79,  3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   80,  81,  82,  83,  79,  84,
     3,   3,   3,   3,   3,   3,   85, 86, 3,   3,  3,   3,   3,   3,   3,   87,  3,   88,  3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  89,  3,   3,   3,   3,   3,   3,   3,   90,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   91,  3,   92,  93,  3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   94,  3,   95,  3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   96,  3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   97,  3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   98,  3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   94,  3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   97, 3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   99,  3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   100, 3,   84,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   101, 102, 3,
     103, 3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   95,  104,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  105, 106,
     34,  34,  34,  34,  107, 108, 49, 62, 3,   3,  109, 110, 111, 47,  112, 113, 114, 115, 116,
     117, 118, 119, 120, 121, 122, 3,  3,  123, 34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34, 34, 34,  34, 34,  34,  124, 125, 3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,  3,  3,   3,  3,   3,   3,   34,  34,  34,  34,  34,  126,
     34,  127, 128, 129, 130, 131, 34, 34, 34,  34, 132, 133, 134, 135, 3,   136, 34,  137, 3,
     138, 139, 140},
    {0x00000000003fffff, 0x000007ff01ffffff, 0x3fdfffff00000000, 0x0000000000000000,
     0x23fffffffffffff0, 0xfffc0003ff010000, 0x23c5fdfffff99fe1, 0x10030003b0004000,
     0x036dfdfffff987e0, 0x001c00005e000000, 0x23edfdfffffbbfe0, 0x0200000300010000,
     0x23edfdfffff99fe0, 0x00020003b0000000, 0x03ffc718d63dc7e8, 0x0000000000010000,
     0x23fffdfffffddfe0, 0x0000000307000000, 0x23effdfffffddfe1, 0x0006000340000000,
     0x27fffffffffddfe0, 0xfc00000380704000, 0x2ffbfffffc7fffe0, 0x000000000000007f,
     0x000dfffffffffffe, 0x000000000000003f, 0x200dffaffffff7d6, 0x00000000f000001f,
     0x0000000000000001, 0x00001ffffffffeff, 0x0000000000001f00, 0x800007ffffffffff,
     0xffe1c0623c3f0000, 0x0000000000004003, 0xffffffffffffffff, 0xffffffff3d7f3dff,
     0x7f3dffffffff3dff, 0xffffffffff7fff3d, 0xffffffffff3dffff, 0x0000000007ffffff,
     0x000000000000ffff, 0xfffffffffffffffe, 0xffff9fffffffffff, 0xffffffff07fffffe,
     0x01fe07ffffffffff, 0x0003ffff0003dfff, 0x0001dfff0003ffff, 0x000fffffffffffff,
     0x0000000010000000, 0xffffffff00000000, 0x01fffffffffffff7, 0xffff05ffffffff9f,
     0x003fffffffffffff, 0x000000007fffffff, 0x001f3fffffff0000, 0xffff0fffffffffff,
     0x00000000000003ff, 0xffffffff007fffff, 0x00000000001fffff, 0x000fffffffffffe0,
     0x0000000000000fe0, 0xfc00c001fffffff8, 0x0000003fffffffff, 0x0000000fffffffff,
     0x00fffffffc00e000, 0x046fde0000000000, 0x01e0000000000000, 0xffff000000000000,
     0x000000ffffffffff, 0x7f7f7f7f007fffff, 0x000000007f7f7f7f, 0x1000000000000040,
     0xfffffffe807fffff, 0x87ffffffffffffff, 0xfffeffffffffffe0, 0x07ffffff00007fff,
     0x0000000000000020, 0x0000000000000008, 0x0000040000000000, 0x0000000000002000,
     0x0000000000000389, 0x0000000020000000, 0x8000000000701000, 0x0000010080000001,
     0x0001000000000000, 0x0000000000000010, 0x00003e0000000040, 0x000000000000103e,
     0x000000000000001e, 0x0000000008000000, 0x0202000000000000, 0x0400000000000000,
     0xc000000000000000, 0x000000000001f000, 0x4000000000000000, 0x0000000000001000,
     0x0000000000040000, 0x0000000000000040, 0x0000000000400000, 0x0000100000000000,
     0x0008400000000000, 0x0000000200000000, 0x0100000000001040, 0x0040000000000000,
     0xffffffffffdfffff, 0x0000000000001fff, 0x00ffffffffff0000, 0x00000c00ffff0fff,
     0x0000400000000000, 0x0000000000008000, 0xf880000000000000, 0x00000007fffff7bb,
     0x000ffffffffffffc, 0x68fc000000000000, 0xffff003ffffffc00, 0x1fffffff0000007f,
     0x0007fffffffffff0, 0x7c00ff9f00000000, 0x000001ffffffffff, 0xc47effff00000ff7,
     0x3e62ffffffffffff, 0x000407ff18000005, 0x00007f7f007e7e7e, 0x00000007ffffffff,
     0xffff000fffffffff, 0x0ffffffffffff87f, 0xffff3fffffffffff, 0x0000000003ffffff,
     0x5f7ffdffa0000000, 0xffffffffffffffdb, 0x0003ffffffffffff, 0xfffffffffff80000,
     0x3fffffffffffffff, 0xffffffffffff0000, 0xfffffffffffcffff, 0x0fff0000000000ff,
     0xffdf000000000000, 0x1fffffffffffffff, 0xfffeffc000000000, 0x7fffffff3fffffff,
     0x000000001cfcfcfc},
    {1, 2,  3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 5, 10, 5, 11, 5, 12, 13, 5, 5, 14, 5, 5, 5, 5, 5, 5, 5,
     5, 15, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5, 5,  5, 5,  5,  5, 5, 5,  5},
    {1,  2,  3,  4,  4,  4,  4,  4,  4,  5,  6,  7,  8,  9,  10, 4,  11, 12, 4,  13, 14, 4,  4,  2,
     2,  2,  2,  15, 16, 4,  4,  17, 18, 19, 20, 21, 4,  22, 4,  23, 24, 25, 26, 27, 28, 29, 4,  2,
     30, 4,  4,  14, 4,  4,  4,  4,  4,  4,  4,  31, 32, 4,  33, 34, 4,  35, 36, 37, 38, 39, 40, 41,
     4,  42, 19, 43, 44, 4,  4,  45, 46, 47, 48, 4,  4,  49, 50, 47, 51, 52, 4,  53, 4,  4,  4,  54,
     4,  4,  55, 4,  4,  56, 57, 58, 59, 60, 61, 4,  4,  4,  4,  62, 63, 64, 4,  65, 66, 67, 4,  4,
     4,  4,  68, 4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  69, 4,  4,
     4,  2,  2,  2,  70, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  49, 4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,  71, 4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  61, 19, 4,  72, 47, 73, 64, 4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,  74, 4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  75, 2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  76, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,
     2,  2,  2,  19, 77, 2,  2,  2,  2,  2,  78, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,
     79, 80, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  81, 82, 4,  4,  4,
     4,  4,  54, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  2,
     2,  2,  83, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  84,
     85, 86, 4,  4,  4,  4,  4,  87, 88, 4,  89, 90, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  91, 4,  92, 4,  4,
     4,  4,  93, 94, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  95, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  96, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  97, 4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  98, 4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  2,  2,  2,  2,  2,  2,  2,  2,  12, 4,  4,  4,  4,  4,  4,  4,  4,
     4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4,  4},
    {0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,
     0x0000000000000000, 0xffffffff1fffffff, 0x000000000001ffff, 0xffffe000ffffffff,
     0x003fffffffff03fd, 0xffffffff3fffffff, 0x000000000000ff0f, 0xffffffffffff0000,
     0x000000003fffffff, 0xffff00ffffffffff, 0x0000000fffffffff, 0x007fffffffffffff,
     0x000000ff003fffff, 0x91bffffffffffd3f, 0x007fffff003fffff, 0x000000007fffffff,
     0x0037ffff00000000, 0x03ffffff003fffff, 0xc0ffffffffffffff, 0x003ffffffeef0001,
     0x1fffffff00000000, 0x000000001fffffff, 0x0000001ffffffeff, 0x003fffffffffffff,
     0x0007ffff003fffff, 0x000000000003ffff, 0x00000000000001ff, 0xffff00801fffffff,
     0x000000000000003f, 0x007fffff00000000, 0x00fffffffffffff8, 0x0000fffffffffff8,
     0x000001ffffff0000, 0x0000007ffffffff8, 0x0047ffffffff0010, 0x0007fffffffffff8,
     0x000000001400001e, 0x00000ffffffbffff, 0xffff01ffbfffbd7f, 0x23edfdfffff99fe0,
     0x00000003e0010000, 0x001fffffffffffff, 0x0000000080000780, 0x0000ffffffffffff,
     0x00000000000000b0, 0x00007fffffffffff, 0x000000000f000000, 0x0000000000000010,
     0x010007ffffffffff, 0x0000000007ffffff, 0x00000fffffffffff, 0x8000000000000000,
     0xfffffcff00000000, 0x0000000a0001ffff, 0x0407fffffffff801, 0xfffffffff0010000,
     0x00000000200003ff, 0x01ffffffffffffff, 0x00007ffffffffdff, 0xfffc000000000001,
     0x000000000000ffff, 0x0001fffffffffb7f, 0xfffffdbf00000040, 0x00000000010003ff,
     0x0007ffff00000000, 0x0000000003ffffff, 0x000000000000000f, 0x000000000000007f,
     0x00003fffffff0000, 0xe0fffff800000000, 0x00000000000107ff, 0x00ffffffffffffff,
     0x0007ffffffffffff, 0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff,
     0x0000000003ff01ff, 0x00001fffffffffff, 0x0000000000004000, 0x000000000000001f,
     0x0af7fe96ffffffef, 0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x0000000000000003,
     0x0000001000000000, 0x0000000400000000, 0x0000000200000000, 0x0000040000000000,
     0x0000000010001008, 0x2000040000000000, 0x0000000002000000, 0x0000000000010000,
     0x0000000001000000, 0x0000000008000000, 0x0000200000000000}};
static constexpr flat_array<12> __cat_pi{{0x00AB, 0x2018, 0x201B, 0x201C, 0x201F, 0x2039, 0x2E02,
                                          0x2E04, 0x2E09, 0x2E0C, 0x2E1C, 0x2E20}};
static constexpr __range_array<41> __cat_cf = {{__range_array_elem{0x0000, 0} /*173*/,
                                                __range_array_elem{0x00AD, 1} /*1*/,
                                                __range_array_elem{0x00AE, 0} /*1362*/,
                                                __range_array_elem{0x0600, 1} /*6*/,
                                                __range_array_elem{0x0606, 0} /*22*/,
                                                __range_array_elem{0x061C, 1} /*1*/,
                                                __range_array_elem{0x061D, 0} /*192*/,
                                                __range_array_elem{0x06DD, 1} /*1*/,
                                                __range_array_elem{0x06DE, 0} /*49*/,
                                                __range_array_elem{0x070F, 1} /*1*/,
                                                __range_array_elem{0x0710, 0} /*466*/,
                                                __range_array_elem{0x08E2, 1} /*1*/,
                                                __range_array_elem{0x08E3, 0} /*3883*/,
                                                __range_array_elem{0x180E, 1} /*1*/,
                                                __range_array_elem{0x180F, 0} /*2044*/,
                                                __range_array_elem{0x200B, 1} /*5*/,
                                                __range_array_elem{0x2010, 0} /*26*/,
                                                __range_array_elem{0x202A, 1} /*5*/,
                                                __range_array_elem{0x202F, 0} /*49*/,
                                                __range_array_elem{0x2060, 1} /*5*/,
                                                __range_array_elem{0x2065, 0} /*1*/,
                                                __range_array_elem{0x2066, 1} /*10*/,
                                                __range_array_elem{0x2070, 0} /*56975*/,
                                                __range_array_elem{0xFEFF, 1} /*1*/,
                                                __range_array_elem{0xFF00, 0} /*249*/,
                                                __range_array_elem{0xFFF9, 1} /*3*/,
                                                __range_array_elem{0xFFFC, 0} /*4289*/,
                                                __range_array_elem{0x110BD, 1} /*1*/,
                                                __range_array_elem{0x110BE, 0} /*15*/,
                                                __range_array_elem{0x110CD, 1} /*1*/,
                                                __range_array_elem{0x110CE, 0} /*9058*/,
                                                __range_array_elem{0x13430, 1} /*9*/,
                                                __range_array_elem{0x13439, 0} /*34919*/,
                                                __range_array_elem{0x1BCA0, 1} /*4*/,
                                                __range_array_elem{0x1BCA4, 0} /*5327*/,
                                                __range_array_elem{0x1D173, 1} /*8*/,
                                                __range_array_elem{0x1D17B, 0} /*798342*/,
                                                __range_array_elem{0xE0001, 1} /*1*/,
                                                __range_array_elem{0xE0002, 0} /*30*/,
                                                __range_array_elem{0xE0020, 1} /*96*/,
                                                __range_array_elem{0xE0080, 0} /*196479*/}};
static constexpr __bool_trie<32, 634, 7, 351, 25, 255, 1, 0, 385, 4, 59, 36> __cat_no{
    {0x0000000000000000, 0x0000000000000000, 0x720c000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1,  0, 0, 0, 0, 0, 2,  0,  3, 0, 4,  0,  0, 0, 5, 0, 0, 0, 0, 0,  0, 6,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 7,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     8,  0, 0, 0, 0, 0, 0,  0,  9, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 10, 11, 0, 0, 12, 13, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  14, 15, 16, 0, 0, 0,
     0,  0, 0, 0, 0, 0, 17, 18, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     19, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 20, 0, 21, 22, 23, 0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,  0,  0,  0, 0, 0,
     0,  0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 24},
    {0x0000000000000000, 0x03f0000000000000, 0x00fc000000000000, 0x0007000000000000,
     0x7f00000000000000, 0x01ff00007f000000, 0x000ffc0000000000, 0x1ffffe0000000000,
     0x03ff000000000000, 0x0000000004000000, 0x03f1000000000000, 0x00000000000003ff,
     0x00000000ffff0000, 0x0000000000000200, 0xffffffff00000000, 0x000000000fffffff,
     0xfffffc0000000000, 0xffc0000000000000, 0x00000000000fffff, 0x2000000000000000,
     0x00000000003c0000, 0x000003ff00000000, 0x00000000fffeff00, 0xfffe0000000003ff,
     0x003f000000000000},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 4, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1, 2,  3,  0,  0,  0,  0, 4, 5,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  6,  7,  8,  9, 0, 10, 11, 0,  12, 13, 14, 0, 15, 16, 0,  0, 0,  0, 17, 0, 0, 0, 0,
     0, 18, 0,  0,  19, 20, 0, 0, 0,  21, 0,  0,  0,  0,  0, 22, 0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  23, 0,  0,  0,  0, 0,  0,  24, 0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  25, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 26, 0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 27,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  28, 0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  29, 0,  30, 0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0,  31, 0, 0,  0,  0,  0, 0,  0, 0,  0, 0, 0, 0,
     0, 32, 33, 0,  34, 0,  0, 0, 0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  35},
    {0x0000000000000000, 0x000fffffffffff80, 0x01e0000000000000, 0x0000000000000c00,
     0x0ffffffe00000000, 0x0000000f00000000, 0xfe000000ff000000, 0x0000ff8000000000,
     0xf800000000000000, 0x000000000fc00000, 0x3000000000000000, 0xfffffffffffcffff,
     0x60000000000001ff, 0x00000000e0000000, 0x0000f80000000000, 0xff000000ff000000,
     0x0000fe0000000000, 0xfc00000000000000, 0x7fffffff00000000, 0x0000007fe0000000,
     0x00000000001e0000, 0x0000003ffffc0000, 0x001ffffe00000000, 0x0c00000000000000,
     0x0007fc0000000000, 0x00001ffffc000000, 0x00000000001fffff, 0x00000003f8000000,
     0x00000000007fffff, 0x000fffff00000000, 0x01ffffff00000000, 0x000000000000ff80,
     0xfffe000000000000, 0x001eefffffffffff, 0x3fffbffffffffffe, 0x0000000000001fff}};
static constexpr flat_array<10> __cat_pf{
    {0x00BB, 0x2019, 0x201D, 0x203A, 0x2E03, 0x2E05, 0x2E0A, 0x2E0D, 0x2E1D, 0x2E21}};
static constexpr __range_array<21> __cat_lt = {
    {__range_array_elem{0x0000, 0} /*453*/,  __range_array_elem{0x01C5, 1} /*1*/,
     __range_array_elem{0x01C6, 0} /*2*/,    __range_array_elem{0x01C8, 1} /*1*/,
     __range_array_elem{0x01C9, 0} /*2*/,    __range_array_elem{0x01CB, 1} /*1*/,
     __range_array_elem{0x01CC, 0} /*38*/,   __range_array_elem{0x01F2, 1} /*1*/,
     __range_array_elem{0x01F3, 0} /*7573*/, __range_array_elem{0x1F88, 1} /*8*/,
     __range_array_elem{0x1F90, 0} /*8*/,    __range_array_elem{0x1F98, 1} /*8*/,
     __range_array_elem{0x1FA0, 0} /*8*/,    __range_array_elem{0x1FA8, 1} /*8*/,
     __range_array_elem{0x1FB0, 0} /*12*/,   __range_array_elem{0x1FBC, 1} /*1*/,
     __range_array_elem{0x1FBD, 0} /*15*/,   __range_array_elem{0x1FCC, 1} /*1*/,
     __range_array_elem{0x1FCD, 0} /*47*/,   __range_array_elem{0x1FFC, 1} /*1*/,
     __range_array_elem{0x1FFD, 0} /*1105922*/}};
static constexpr __bool_trie<32, 991, 1, 0, 31, 9, 6, 241, 57, 109, 26, 6> __cat_lm{
    {0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0xffff000000000000, 0x0000501f0003ffc3,
     0x0000000000000000, 0x0410000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000002000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000001, 0x0000000000000000, 0x0000006000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0430000000000000},
    {1,  1,  1,  1,  2, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 3,  1,
     3,  1,  1,  1,  1, 1,  1,  1,  4,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  5, 1,  6,  1,  1,  1, 1, 1, 1,  1,  1, 7,  1,  1, 1,  1,
     1,  1,  8,  1,  1, 9,  10, 11, 1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 12, 13, 1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  14, 1, 1, 1, 15, 1,  1, 15, 1,  1, 1,  1,
     1,  1,  1,  16, 1, 17, 18, 1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  19, 1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  8,  1,  1, 1,  1,  20, 21, 22, 1, 23, 24, 25, 26, 1, 1, 1, 1,  1,  1, 1,  27, 1, 24, 1,
     28, 1,  29, 1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1, 1, 1, 1,  1,  1, 1,  1,  1, 1,  1,
     24, 30, 1},
    {0x0000011004000000, 0x0000000000000000, 0x0002000000000000, 0x0000000000000040,
     0x1000000000000000, 0x0000000000800000, 0x0000000000000008, 0x0000008000000000,
     0x3f00000000000000, 0xfffff00000000000, 0x010007ffffffffff, 0xfffffffff8000000,
     0x8002000000000000, 0x000000001fff0000, 0x3000000000000000, 0x0000800000000000,
     0x083e000000000020, 0x0000000060000000, 0x7000000000000000, 0x0000000000200000,
     0x0000000000001000, 0x8000000000000000, 0x0000000030000000, 0x00000000ff800000,
     0x0001000000000000, 0x0000000000000100, 0x0300000000000000, 0x0000004000008000,
     0x0018000020000000, 0x00000000f0000000, 0x00000000c0000000},
    {1, 0, 0, 0, 0, 0, 0, 0, 2},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5},
    {0x0000000000000000, 0x000000000000000f, 0x00000000fff80000, 0x0000000b00000000,
     0x3f80000000000000, 0x0000000000000800}};
static constexpr __bool_trie<32, 991, 1, 0, 72, 255, 1, 0, 449, 7, 56, 57> __cat_mn{
    {0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0xffffffffffffffff, 0x0000ffffffffffff, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x00000000000000f8, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0xbffffffffffe0000, 0x00000000000000b6,
     0x0000000007ff0000, 0x00010000fffff800, 0x0000000000000000, 0x00003d9f9fc00000,
     0xffff000000020000, 0x00000000000007ff, 0x0001ffc000000000, 0x200ff80000000000},
    {1,  2,  3,  4,  5,  6,  7,  8,  9,  8,  10, 11, 12, 13, 14, 15, 16, 11, 17, 18, 19, 2,  20, 21,
     22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  32, 2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  33, 34, 35, 36, 37, 2,  38, 2,  39, 2,  2,  2,  40,
     41, 42, 2,  43, 44, 45, 46, 47, 2,  2,  48, 2,  2,  2,  49, 2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  50, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  51, 2,  52, 2,  53, 2,  2,  2,  2,  2,  2,  2,  2,  54, 2,  55, 2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  56, 57, 58, 2,  2,  2,  2,  59, 2,  2,  60, 61, 62, 63, 64, 65,
     66, 67, 68, 2,  2,  2,  69, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  70, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  71,
     2,  2,  2,  2,  2,  2,  2},
    {0x00003eeffbc00000, 0x000000000e000000, 0x0000000000000000, 0xfffffffbfff80000,
     0x1400000000000007, 0x0000000c00fe21fe, 0x1000000000000002, 0x4000000c0000201e,
     0x1000000000000006, 0x0023000000023986, 0xfc00000c000021be, 0x9000000000000002,
     0x0000000c0040201e, 0x0000000000000004, 0x0000000000002001, 0xc000000000000011,
     0x0000000c00603dc1, 0x0000000c00003040, 0x1800000000000003, 0x0000000c0000201e,
     0x00000000005c0400, 0x07f2000000000000, 0x0000000000007f80, 0x1ff2000000000000,
     0x0000000000003f00, 0x02a0000003000000, 0x7ffe000000000000, 0x1ffffffffeffe0df,
     0x0000000000000040, 0x66fde00000000000, 0x001e0001c3000000, 0x0000000020002064,
     0x00000000e0000000, 0x001c0000001c0000, 0x000c0000000c0000, 0x3fb0000000000000,
     0x00000000200ffe40, 0x0000000000003800, 0x0000020000000060, 0x0e04018700000000,
     0x0000000009800000, 0x9ff81fe57f400000, 0x3fff000000000000, 0x17d000000000000f,
     0x000ff80000000004, 0x00003b3c00000003, 0x0003a34000000000, 0x00cff00000000000,
     0x031021fdfff70000, 0xfbffffffffffffff, 0x0001ffe21fff0000, 0x0003800000000000,
     0x8000000000000000, 0xffffffff00000000, 0x00003c0000000000, 0x0000000006000000,
     0x3ff0800000000000, 0x00000000c0000000, 0x0003000000000000, 0x0000006000000844,
     0x8003ffff00000030, 0x00003fc000000000, 0x000000000003ff80, 0x33c8000000000007,
     0x0000002000000000, 0x00667e0000000000, 0x1000000000001008, 0xc19d000000000000,
     0x0040300000000002, 0x0000212000000000, 0x0000000040000000, 0x0000ffff0000ffff},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1,  0,  0,  0,  2,  0, 3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  4,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,
     0,  0,  0,  0,  0,  0, 7,  0,  0,  8,  9,  10, 0,  11, 12, 13, 14, 15, 0,  0,  16, 17, 18, 0,
     0,  19, 20, 21, 22, 0, 0,  23, 24, 25, 26, 27, 0,  28, 0,  0,  0,  29, 0,  0,  0,  0,  0,  0,
     30, 31, 32, 33, 0,  0, 0,  0,  0,  34, 0,  35, 0,  36, 37, 38, 0,  0,  0,  0,  39, 0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  40, 41, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 42, 43, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  44, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 45, 46, 0,  0,  47, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  48, 49, 50, 0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  51, 0,  0,  0,  41, 0,  0,
     0,  0,  0,  0,  52, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  53, 0, 54, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  55, 55, 55, 56},
    {0x0000000000000000, 0x2000000000000000, 0x0000000100000000, 0x07c0000000000000,
     0x870000000000f06e, 0x0000006000000000, 0x000000f000000000, 0x000000000001ffc0,
     0xff00000000000002, 0x800000000000007f, 0x0678000000000003, 0x001fef8000000007,
     0x0008000000000000, 0x7fc0000000000003, 0x0000000000001e00, 0x40d3800000000000,
     0x000007f880000000, 0x1800000000000003, 0x001f1fc000000001, 0xff00000000000000,
     0x000000004000005c, 0x85f8000000000000, 0x000000000000000d, 0xb03c000000000000,
     0x0000000030000001, 0xa7f8000000000000, 0x0000000000000001, 0x00bf280000000000,
     0x00000fbce0000000, 0x06ff800000000000, 0x000000010cf00000, 0x79f80000000007fe,
     0x000000000e7e0080, 0x00000000037ffc00, 0xbf7f000000000000, 0x006dfcfffffc0000,
     0xb47e000000000000, 0x00000000000000bf, 0x0000000000a30000, 0x0018000000000000,
     0x001f000000000000, 0x007f000000000000, 0x0000000000008000, 0x0000000000078000,
     0x0000000060000000, 0xf800038000000000, 0x00003c0000000fe7, 0x000000000000001c,
     0xf87fffffffffffff, 0x00201fffffffffff, 0x0000fffef8000010, 0x000007dbf9ffff7f,
     0x0000f00000000000, 0x00000000007f0000, 0x00000000000007f0, 0xffffffffffffffff,
     0x0000ffffffffffff}};
static constexpr __bool_trie<32, 991, 1, 0, 51, 255, 1, 0, 639, 1, 0, 37> __cat_cn{
    {0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000400002800, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0001000000000000, 0x0000000000000000, 0x0000000000010000, 0x0000000000000000,
     0x0000000020000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000004000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1,  2,  3, 3,  3,  4,  5, 6, 7, 8,  9,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 3,
     23, 24, 3, 25, 26, 27, 3, 3, 3, 28, 3,  3,  3,  3,  3,  29, 30, 31, 32, 3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 27, 33, 3,  3,  34, 3,  3,  3,  1,  3,  3,  3,  3,  1,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  35, 3,  3,  3,  3,  3,  36, 2,  37, 3,  38, 34, 3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  39, 1,  3,  3,  40, 3,  41,
     42, 3,  3, 43, 3,  3,  3, 3, 3, 3,  22, 3,  3,  44, 3,  34, 3,  1,  3,  3,  0,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  45, 3,  3,  3,
     3,  46, 3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  3,  47, 48, 3,  3,
     3,  3,  3, 3,  3,  3,  3, 3, 3, 49, 3,  3,  22, 3,  3,  50},
    {0x8000000000000000, 0x0000000080000000, 0x0020000000000000, 0x0000000000000000,
     0x0002020000000010, 0x8000000040000000, 0x2092020000000011, 0x0000000020000000,
     0x0012020000044011, 0x0000000000000440, 0x0012020000000011, 0x0000000040000000,
     0x0000000028020010, 0x0000000000000200, 0x0000020000022000, 0x0000000000800220,
     0x0010020000022000, 0x0001000080000220, 0x0000000000022010, 0x0000000000000220,
     0x1004000000000010, 0x0000000000a00000, 0x0000000000000001, 0x0000005000000829,
     0x00000000000000a0, 0x0000000000000100, 0x2000000001000000, 0x0000000000002000,
     0x0000000000000040, 0x0000000002800200, 0x8002000000000200, 0x0000000000800002,
     0x0000000000020000, 0x0002200000000000, 0x0000000000008000, 0x0400000000000000,
     0x0000000055000000, 0x8020000010000020, 0x0000002000000000, 0x0000800000000000,
     0x0000004000000000, 0x8080808000000000, 0x0000000080808080, 0x0000000004000000,
     0x0001000000000000, 0x8000000000004000, 0x0000808000000001, 0xa080000000000000,
     0x0000000000000024, 0x0020008000080000, 0x0000808000000000},
    {1, 2, 3, 4, 4, 5, 4, 4, 4, 4, 4, 4, 6, 7, 8, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 9, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,
     4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4},
    {1,  1,  1,  1,  1,  2,  1, 1,  1, 1, 1,  1,  1, 3,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  4, 5,  1, 6, 1,  1,  1, 1,  7,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  8, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  9,  1, 1,  10, 11, 1,  12, 1,
     13, 1,  1,  1,  1,  14, 1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  15, 1, 16, 1,  17, 18, 19, 1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 20, 1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 20, 1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 21, 1,  1, 1,  22, 1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     23, 24, 25, 26, 27, 1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     10, 1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  28, 1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  29, 1,  1,  30,
     1,  1,  1,  31, 32, 33, 1, 1,  1, 1, 1,  1,  1, 1,  34, 1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  35, 36, 1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     30, 1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1, 1,  1, 1, 1,  1,  1, 1},
    {0x4800008000001000, 0x0000000000000000, 0x0000000000008000, 0x0000000040000000,
     0x0040000000000200, 0x0000000000400000, 0x0008000000000000, 0x0000000001100010,
     0x8000000000000000, 0x0020000000000000, 0x0000000100000000, 0x0000000000040000,
     0x0000000040004280, 0x0412020000000010, 0x0000000014000000, 0x0080000000000200,
     0x0000010000000000, 0x4800000000000480, 0x0000024000000000, 0x0000000000048000,
     0x0000800000000000, 0x0000000080000000, 0x0000000404000000, 0x0000000000200000,
     0x1400200020000000, 0x0000000000000010, 0x8400000020200040, 0x0000000000020020,
     0x0000002400000080, 0x0001000000000000, 0x0000000000000001, 0x0508010900000010,
     0xa108080955091500, 0x0000041000000400, 0x0000000000010001, 0x0000000000001000,
     0x0004000000000000}};
static constexpr __range_array<11> __cat_me = {
    {__range_array_elem{0x0000, 0} /*1160*/, __range_array_elem{0x0488, 1} /*2*/,
     __range_array_elem{0x048A, 0} /*5684*/, __range_array_elem{0x1ABE, 1} /*1*/,
     __range_array_elem{0x1ABF, 0} /*1566*/, __range_array_elem{0x20DD, 1} /*4*/,
     __range_array_elem{0x20E1, 0} /*1*/, __range_array_elem{0x20E2, 1} /*3*/,
     __range_array_elem{0x20E5, 0} /*34187*/, __range_array_elem{0xA670, 1} /*3*/,
     __range_array_elem{0xA673, 0} /*1071500*/}};
static constexpr __bool_trie<0, 652, 4, 336, 42, 13, 1, 242, 134, 64, 58, 31> __cat_mc{
    {},
    {1,  2,  3, 4,  5,  6,  5,  7, 8,  4,  9, 10, 11, 12, 8,  13, 3,  14, 15, 16, 0,  0, 0,  0,  9,
     17, 0,  0, 18, 19, 20, 0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 21, 22, 0, 0,  0,  0,  23, 0,  0,  0,  24, 25, 0,  0, 26, 27, 28,
     29, 30, 0, 0,  31, 0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  32, 0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0,  0,  0,
     0,  0,  0, 0,  0,  0,  0,  0, 0,  0,  0, 33, 0,  34, 35, 0,  36, 37, 6,  38, 39, 0, 40, 0,  0,
     0,  41},
    {0x0000000000000000, 0xc800000000000008, 0x000000000000de01, 0xc00000000000000c,
     0x0000000000801981, 0xc000000000000008, 0x0000000000000001, 0x0000000000001a01,
     0x400000000000000c, 0xc000000000000000, 0x0000000000801dc6, 0x000000000000000e,
     0x000000000000001e, 0x0000000000600d9f, 0x0000000000801dc1, 0x000000000000000c,
     0x000c0000ff038000, 0x8000000000000000, 0x1902180000000000, 0x00003f9c00c00000,
     0x000000001c009f98, 0xc040000000000000, 0x00000000000001bf, 0x01fb0e7800000000,
     0x0000000006000000, 0x0007e01a00a00000, 0xe820000000000010, 0x000000000000001b,
     0x000004c200000004, 0x000c5c8000000000, 0x00300ff000000000, 0x0080000200000000,
     0x0000c00000000000, 0x0000009800000000, 0xfff0000000000003, 0x000000000000000f,
     0x00000000000c0000, 0xcc30000000000008, 0x0019800000000000, 0x2800000000002000,
     0x0020c80000000000, 0x000016d800000000},
    {1, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 3},
    {1, 0,  2,  0,  3,  4,  5, 6, 7,  0,  0,  8,  9, 10, 0, 0, 11, 12, 13, 14, 0, 0, 15,
     0, 16, 0,  17, 0,  18, 0, 0, 0,  19, 0,  0,  0, 0,  0, 0, 20, 21, 22, 23, 0, 0, 0,
     0, 0,  24, 0,  25, 0,  0, 0, 26, 0,  0,  0,  0, 27, 0, 0, 0,  0,  0,  0,  0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0,  0, 0, 0,
     0, 0,  0,  0,  0,  0,  0, 0, 0,  0,  28, 29, 0, 0,  0, 0, 0,  0,  30},
    {0x0000000000000000, 0x0000000000000005, 0x0187000000000004, 0x0000100000000000,
     0x0000000000000060, 0x8038000000000004, 0x0000000000000001, 0x002c700000000000,
     0x0000000700000000, 0xc00000000000000c, 0x0000000c0080399e, 0x00e0000000000000,
     0x0000000000000023, 0x7a07000000000000, 0x0000000000000002, 0x4f03800000000000,
     0x5807000000000000, 0x0040d00000000000, 0x0000004300000000, 0x0100700000000000,
     0x00000010f00e0000, 0x0200000000000000, 0x0000000001800000, 0x0000000000800000,
     0x4000800000000000, 0x0012020000000000, 0x0000000000587c00, 0x0060000000000000,
     0xfffffffffffe0000, 0x00000000000000ff, 0x0007e06000000000}};
static constexpr __range_array<25> __cat_nl = {
    {__range_array_elem{0x0000, 0} /*5870*/,  __range_array_elem{0x16EE, 1} /*3*/,
     __range_array_elem{0x16F1, 0} /*2671*/,  __range_array_elem{0x2160, 1} /*35*/,
     __range_array_elem{0x2183, 0} /*2*/,     __range_array_elem{0x2185, 1} /*4*/,
     __range_array_elem{0x2189, 0} /*3710*/,  __range_array_elem{0x3007, 1} /*1*/,
     __range_array_elem{0x3008, 0} /*25*/,    __range_array_elem{0x3021, 1} /*9*/,
     __range_array_elem{0x302A, 0} /*14*/,    __range_array_elem{0x3038, 1} /*3*/,
     __range_array_elem{0x303B, 0} /*30379*/, __range_array_elem{0xA6E6, 1} /*10*/,
     __range_array_elem{0xA6F0, 0} /*23120*/, __range_array_elem{0x10140, 1} /*53*/,
     __range_array_elem{0x10175, 0} /*460*/,  __range_array_elem{0x10341, 1} /*1*/,
     __range_array_elem{0x10342, 0} /*8*/,    __range_array_elem{0x1034A, 1} /*1*/,
     __range_array_elem{0x1034B, 0} /*134*/,  __range_array_elem{0x103D1, 1} /*5*/,
     __range_array_elem{0x103D6, 0} /*8234*/, __range_array_elem{0x12400, 1} /*111*/,
     __range_array_elem{0x1246F, 0} /*1039248*/}};
static constexpr flat_array<1> __cat_zl{{0x2028}};
static constexpr flat_array<1> __cat_zp{{0x2029}};
template<uni::version v = uni::version::standard_unicode_version>
constexpr category cp_category(char32_t cp);
template<version v>
constexpr category __get_category_for_version(char32_t, category c);
template<version v>
constexpr category __get_category(char32_t c) {
    if(auto cat = __get_category_for_version<v>(c, category::cn); cat != category::cn)
        return cat;

    if(__cat_lo.lookup(c))
        return category::lo;
    if(__cat_so.lookup(c))
        return category::so;
    if(__cat_ll.lookup(c))
        return category::ll;
    if(__cat_mn.lookup(c))
        return category::mn;
    if(__cat_lu.lookup(c))
        return category::lu;
    if(__cat_sm.lookup(c))
        return category::sm;
    if(__cat_no.lookup(c))
        return category::no;
    if(__cat_nd.lookup(c))
        return category::nd;
    if(__cat_po.lookup(c))
        return category::po;
    if(__cat_mc.lookup(c))
        return category::mc;
    if(__cat_lm.lookup(c))
        return category::lm;
    if(__cat_nl.lookup(c))
        return category::nl;
    if(__cat_cn.lookup(c))
        return category::cn;
    if(__cat_cf.lookup(c))
        return category::cf;
    if(__cat_sk.lookup(c))
        return category::sk;
    if(__cat_ps.lookup(c))
        return category::ps;
    if(__cat_pe.lookup(c))
        return category::pe;
    if(__cat_cc.lookup(c))
        return category::cc;
    if(__cat_sc.lookup(c))
        return category::sc;
    if(__cat_lt.lookup(c))
        return category::lt;
    if(__cat_pd.lookup(c))
        return category::pd;
    if(__cat_zs.lookup(c))
        return category::zs;
    if(__cat_me.lookup(c))
        return category::me;
    if(__cat_pi.lookup(c))
        return category::pi;
    if(__cat_pf.lookup(c))
        return category::pf;
    if(__cat_pc.lookup(c))
        return category::pc;
    if(__cat_zp.lookup(c))
        return category::zp;
    if(__cat_zl.lookup(c))
        return category::zl;
    return category::cn;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::lo, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_lo.lookup(c)) == category::lo;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::so, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_so.lookup(c)) == category::so;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::ll, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_ll.lookup(c)) == category::ll;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::mn, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_mn.lookup(c)) == category::mn;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::lu, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_lu.lookup(c)) == category::lu;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::sm, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_sm.lookup(c)) == category::sm;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::no, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_no.lookup(c)) == category::no;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::nd, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_nd.lookup(c)) == category::nd;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::po, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_po.lookup(c)) == category::po;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::mc, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_mc.lookup(c)) == category::mc;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::lm, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_lm.lookup(c)) == category::lm;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::nl, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_nl.lookup(c)) == category::nl;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::cn, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_cn.lookup(c)) == category::cn;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::cf, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_cf.lookup(c)) == category::cf;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::sk, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_sk.lookup(c)) == category::sk;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::ps, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_ps.lookup(c)) == category::ps;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::pe, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_pe.lookup(c)) == category::pe;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::cc, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_cc.lookup(c)) == category::cc;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::sc, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_sc.lookup(c)) == category::sc;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::lt, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_lt.lookup(c)) == category::lt;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::pd, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_pd.lookup(c)) == category::pd;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::zs, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_zs.lookup(c)) == category::zs;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::me, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_me.lookup(c)) == category::me;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::pi, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_pi.lookup(c)) == category::pi;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::pf, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_pf.lookup(c)) == category::pf;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::pc, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_pc.lookup(c)) == category::pc;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::zp, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_zp.lookup(c)) == category::zp;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::zl, int> = 0>
constexpr bool cp_is(char32_t c) {
    return __get_category_for_version<v>(c, __cat_zl.lookup(c)) == category::zl;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::cased_letter, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_ll.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::ll;
    }
    if(cat == category::cn && __cat_lu.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::lu;
    }
    if(cat == category::cn && __cat_lt.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::lt;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::ll || cat == category::lu || cat == category::lt || true;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::letter, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_lo.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::lo;
    }
    if(cat == category::cn && __cat_ll.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::ll;
    }
    if(cat == category::cn && __cat_lu.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::lu;
    }
    if(cat == category::cn && __cat_lm.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::lm;
    }
    if(cat == category::cn && __cat_lt.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::lt;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::lo || cat == category::ll || cat == category::lu ||
           cat == category::lm || cat == category::lt || true;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::mark, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_mn.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::mn;
    }
    if(cat == category::cn && __cat_mc.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::mc;
    }
    if(cat == category::cn && __cat_me.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::me;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::mn || cat == category::mc || cat == category::me || true;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::number, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_no.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::no;
    }
    if(cat == category::cn && __cat_nd.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::nd;
    }
    if(cat == category::cn && __cat_nl.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::nl;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::no || cat == category::nd || cat == category::nl || true;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::punctuation, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_po.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::po;
    }
    if(cat == category::cn && __cat_ps.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::ps;
    }
    if(cat == category::cn && __cat_pe.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::pe;
    }
    if(cat == category::cn && __cat_pd.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::pd;
    }
    if(cat == category::cn && __cat_pi.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::pi;
    }
    if(cat == category::cn && __cat_pf.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::pf;
    }
    if(cat == category::cn && __cat_pc.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::pc;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::po || cat == category::ps || cat == category::pe ||
           cat == category::pd || cat == category::pi || cat == category::pf ||
           cat == category::pc || true;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::symbol, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_so.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::so;
    }
    if(cat == category::cn && __cat_sm.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::sm;
    }
    if(cat == category::cn && __cat_sk.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::sk;
    }
    if(cat == category::cn && __cat_sc.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::sc;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::so || cat == category::sm || cat == category::sk ||
           cat == category::sc || true;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::separator, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_zs.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::zs;
    }
    if(cat == category::cn && __cat_zp.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::zp;
    }
    if(cat == category::cn && __cat_zl.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::zl;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::zs || cat == category::zp || cat == category::zl || true;
}
template<category category_, version v = uni::version::standard_unicode_version,
         std::enable_if_t<category_ == category::other, int> = 0>
constexpr bool cp_is(char32_t c) {
    category cat = category::cn;
    if(cat == category::cn && __cat_cn.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::cn;
    }
    if(cat == category::cn && __cat_cf.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::cf;
    }
    if(cat == category::cn && __cat_cc.lookup(c)) {
        if constexpr(v == uni::version::latest_version)
            return true;
        cat = category::cc;
    }
    cat = __get_category_for_version<v>(c, cat);
    return cat == category::cn || cat == category::cf || cat == category::cc || true;
}
static constexpr std::array __cat_version_data_v11_0{
    std::pair{0x0E89, category::cn}, std::pair{0x0E98, category::cn},
    std::pair{0x0EA0, category::cn}, std::pair{0x0EAC, category::cn},
    std::pair{0x0EBA, category::cn}, std::pair{0x166D, category::po},
    std::pair{0x1CF2, category::mc}, std::pair{0x1CF3, category::mc},
    std::pair{0x2BC9, category::cn}, std::pair{0x2BFF, category::cn},
    std::pair{0xA9BD, category::mc}, std::pair{0x1F93F, category::cn},
    std::pair{0x1F97B, category::cn}};
static constexpr std::array __cat_version_data_v10_0{
    std::pair{0x0560, category::cn},  std::pair{0x0588, category::cn},
    std::pair{0x0C04, category::cn},  std::pair{0x0C84, category::cn},
    std::pair{0x10D0, category::lo},  std::pair{0x10D1, category::lo},
    std::pair{0x10D2, category::lo},  std::pair{0x10D3, category::lo},
    std::pair{0x10D4, category::lo},  std::pair{0x10D5, category::lo},
    std::pair{0x10D6, category::lo},  std::pair{0x10D7, category::lo},
    std::pair{0x10D8, category::lo},  std::pair{0x10D9, category::lo},
    std::pair{0x10DA, category::lo},  std::pair{0x10DB, category::lo},
    std::pair{0x10DC, category::lo},  std::pair{0x10DD, category::lo},
    std::pair{0x10DE, category::lo},  std::pair{0x10DF, category::lo},
    std::pair{0x10E0, category::lo},  std::pair{0x10E1, category::lo},
    std::pair{0x10E2, category::lo},  std::pair{0x10E3, category::lo},
    std::pair{0x10E4, category::lo},  std::pair{0x10E5, category::lo},
    std::pair{0x10E6, category::lo},  std::pair{0x10E7, category::lo},
    std::pair{0x10E8, category::lo},  std::pair{0x10E9, category::lo},
    std::pair{0x10EA, category::lo},  std::pair{0x10EB, category::lo},
    std::pair{0x10EC, category::lo},  std::pair{0x10ED, category::lo},
    std::pair{0x10EE, category::lo},  std::pair{0x10EF, category::lo},
    std::pair{0x10F0, category::lo},  std::pair{0x10F1, category::lo},
    std::pair{0x10F2, category::lo},  std::pair{0x10F3, category::lo},
    std::pair{0x10F4, category::lo},  std::pair{0x10F5, category::lo},
    std::pair{0x10F6, category::lo},  std::pair{0x10F7, category::lo},
    std::pair{0x10F8, category::lo},  std::pair{0x10F9, category::lo},
    std::pair{0x10FA, category::lo},  std::pair{0x10FD, category::lo},
    std::pair{0x10FE, category::lo},  std::pair{0x10FF, category::lo},
    std::pair{0x312F, category::cn},  std::pair{0xA7AF, category::cn},
    std::pair{0x111C9, category::po}, std::pair{0x11A07, category::mc},
    std::pair{0x11A08, category::mc}, std::pair{0x11A9D, category::cn},
    std::pair{0x1F12F, category::cn}};
template<version v>
constexpr category __get_category_for_version(char32_t cp, category c) {
    if constexpr(v <= uni::version::v11_0) {
        const auto it =
            uni::lower_bound(__cat_version_data_v11_0.begin(), __cat_version_data_v11_0.end(), cp,
                             [](const auto& e, char32_t cp) { return e.first < cp; });
        if(it != __cat_version_data_v11_0.end() && cp == it->first)
            c = it->second;
    }
    if constexpr(v <= uni::version::v10_0) {
        const auto it =
            uni::lower_bound(__cat_version_data_v10_0.begin(), __cat_version_data_v10_0.end(), cp,
                             [](const auto& e, char32_t cp) { return e.first < cp; });
        if(it != __cat_version_data_v10_0.end() && cp == it->first)
            c = it->second;
    }
    return c;
}
static constexpr std::array __numeric_data8 = {
    std::pair<char32_t, int8_t>{0x0030, 0},    std::pair<char32_t, int8_t>{0x0031, 1},
    std::pair<char32_t, int8_t>{0x0032, 2},    std::pair<char32_t, int8_t>{0x0033, 3},
    std::pair<char32_t, int8_t>{0x0034, 4},    std::pair<char32_t, int8_t>{0x0035, 5},
    std::pair<char32_t, int8_t>{0x0036, 6},    std::pair<char32_t, int8_t>{0x0037, 7},
    std::pair<char32_t, int8_t>{0x0038, 8},    std::pair<char32_t, int8_t>{0x0039, 9},
    std::pair<char32_t, int8_t>{0x00B2, 2},    std::pair<char32_t, int8_t>{0x00B3, 3},
    std::pair<char32_t, int8_t>{0x00B9, 1},    std::pair<char32_t, int8_t>{0x00BC, 1},
    std::pair<char32_t, int8_t>{0x00BD, 1},    std::pair<char32_t, int8_t>{0x00BE, 3},
    std::pair<char32_t, int8_t>{0x0660, 0},    std::pair<char32_t, int8_t>{0x0661, 1},
    std::pair<char32_t, int8_t>{0x0662, 2},    std::pair<char32_t, int8_t>{0x0663, 3},
    std::pair<char32_t, int8_t>{0x0664, 4},    std::pair<char32_t, int8_t>{0x0665, 5},
    std::pair<char32_t, int8_t>{0x0666, 6},    std::pair<char32_t, int8_t>{0x0667, 7},
    std::pair<char32_t, int8_t>{0x0668, 8},    std::pair<char32_t, int8_t>{0x0669, 9},
    std::pair<char32_t, int8_t>{0x06F0, 0},    std::pair<char32_t, int8_t>{0x06F1, 1},
    std::pair<char32_t, int8_t>{0x06F2, 2},    std::pair<char32_t, int8_t>{0x06F3, 3},
    std::pair<char32_t, int8_t>{0x06F4, 4},    std::pair<char32_t, int8_t>{0x06F5, 5},
    std::pair<char32_t, int8_t>{0x06F6, 6},    std::pair<char32_t, int8_t>{0x06F7, 7},
    std::pair<char32_t, int8_t>{0x06F8, 8},    std::pair<char32_t, int8_t>{0x06F9, 9},
    std::pair<char32_t, int8_t>{0x07C0, 0},    std::pair<char32_t, int8_t>{0x07C1, 1},
    std::pair<char32_t, int8_t>{0x07C2, 2},    std::pair<char32_t, int8_t>{0x07C3, 3},
    std::pair<char32_t, int8_t>{0x07C4, 4},    std::pair<char32_t, int8_t>{0x07C5, 5},
    std::pair<char32_t, int8_t>{0x07C6, 6},    std::pair<char32_t, int8_t>{0x07C7, 7},
    std::pair<char32_t, int8_t>{0x07C8, 8},    std::pair<char32_t, int8_t>{0x07C9, 9},
    std::pair<char32_t, int8_t>{0x0966, 0},    std::pair<char32_t, int8_t>{0x0967, 1},
    std::pair<char32_t, int8_t>{0x0968, 2},    std::pair<char32_t, int8_t>{0x0969, 3},
    std::pair<char32_t, int8_t>{0x096A, 4},    std::pair<char32_t, int8_t>{0x096B, 5},
    std::pair<char32_t, int8_t>{0x096C, 6},    std::pair<char32_t, int8_t>{0x096D, 7},
    std::pair<char32_t, int8_t>{0x096E, 8},    std::pair<char32_t, int8_t>{0x096F, 9},
    std::pair<char32_t, int8_t>{0x09E6, 0},    std::pair<char32_t, int8_t>{0x09E7, 1},
    std::pair<char32_t, int8_t>{0x09E8, 2},    std::pair<char32_t, int8_t>{0x09E9, 3},
    std::pair<char32_t, int8_t>{0x09EA, 4},    std::pair<char32_t, int8_t>{0x09EB, 5},
    std::pair<char32_t, int8_t>{0x09EC, 6},    std::pair<char32_t, int8_t>{0x09ED, 7},
    std::pair<char32_t, int8_t>{0x09EE, 8},    std::pair<char32_t, int8_t>{0x09EF, 9},
    std::pair<char32_t, int8_t>{0x09F4, 1},    std::pair<char32_t, int8_t>{0x09F5, 1},
    std::pair<char32_t, int8_t>{0x09F6, 3},    std::pair<char32_t, int8_t>{0x09F7, 1},
    std::pair<char32_t, int8_t>{0x09F8, 3},    std::pair<char32_t, int8_t>{0x09F9, 16},
    std::pair<char32_t, int8_t>{0x0A66, 0},    std::pair<char32_t, int8_t>{0x0A67, 1},
    std::pair<char32_t, int8_t>{0x0A68, 2},    std::pair<char32_t, int8_t>{0x0A69, 3},
    std::pair<char32_t, int8_t>{0x0A6A, 4},    std::pair<char32_t, int8_t>{0x0A6B, 5},
    std::pair<char32_t, int8_t>{0x0A6C, 6},    std::pair<char32_t, int8_t>{0x0A6D, 7},
    std::pair<char32_t, int8_t>{0x0A6E, 8},    std::pair<char32_t, int8_t>{0x0A6F, 9},
    std::pair<char32_t, int8_t>{0x0AE6, 0},    std::pair<char32_t, int8_t>{0x0AE7, 1},
    std::pair<char32_t, int8_t>{0x0AE8, 2},    std::pair<char32_t, int8_t>{0x0AE9, 3},
    std::pair<char32_t, int8_t>{0x0AEA, 4},    std::pair<char32_t, int8_t>{0x0AEB, 5},
    std::pair<char32_t, int8_t>{0x0AEC, 6},    std::pair<char32_t, int8_t>{0x0AED, 7},
    std::pair<char32_t, int8_t>{0x0AEE, 8},    std::pair<char32_t, int8_t>{0x0AEF, 9},
    std::pair<char32_t, int8_t>{0x0B66, 0},    std::pair<char32_t, int8_t>{0x0B67, 1},
    std::pair<char32_t, int8_t>{0x0B68, 2},    std::pair<char32_t, int8_t>{0x0B69, 3},
    std::pair<char32_t, int8_t>{0x0B6A, 4},    std::pair<char32_t, int8_t>{0x0B6B, 5},
    std::pair<char32_t, int8_t>{0x0B6C, 6},    std::pair<char32_t, int8_t>{0x0B6D, 7},
    std::pair<char32_t, int8_t>{0x0B6E, 8},    std::pair<char32_t, int8_t>{0x0B6F, 9},
    std::pair<char32_t, int8_t>{0x0B72, 1},    std::pair<char32_t, int8_t>{0x0B73, 1},
    std::pair<char32_t, int8_t>{0x0B74, 3},    std::pair<char32_t, int8_t>{0x0B75, 1},
    std::pair<char32_t, int8_t>{0x0B76, 1},    std::pair<char32_t, int8_t>{0x0B77, 3},
    std::pair<char32_t, int8_t>{0x0BE6, 0},    std::pair<char32_t, int8_t>{0x0BE7, 1},
    std::pair<char32_t, int8_t>{0x0BE8, 2},    std::pair<char32_t, int8_t>{0x0BE9, 3},
    std::pair<char32_t, int8_t>{0x0BEA, 4},    std::pair<char32_t, int8_t>{0x0BEB, 5},
    std::pair<char32_t, int8_t>{0x0BEC, 6},    std::pair<char32_t, int8_t>{0x0BED, 7},
    std::pair<char32_t, int8_t>{0x0BEE, 8},    std::pair<char32_t, int8_t>{0x0BEF, 9},
    std::pair<char32_t, int8_t>{0x0BF0, 10},   std::pair<char32_t, int8_t>{0x0BF1, 100},
    std::pair<char32_t, int8_t>{0x0C66, 0},    std::pair<char32_t, int8_t>{0x0C67, 1},
    std::pair<char32_t, int8_t>{0x0C68, 2},    std::pair<char32_t, int8_t>{0x0C69, 3},
    std::pair<char32_t, int8_t>{0x0C6A, 4},    std::pair<char32_t, int8_t>{0x0C6B, 5},
    std::pair<char32_t, int8_t>{0x0C6C, 6},    std::pair<char32_t, int8_t>{0x0C6D, 7},
    std::pair<char32_t, int8_t>{0x0C6E, 8},    std::pair<char32_t, int8_t>{0x0C6F, 9},
    std::pair<char32_t, int8_t>{0x0C78, 0},    std::pair<char32_t, int8_t>{0x0C79, 1},
    std::pair<char32_t, int8_t>{0x0C7A, 2},    std::pair<char32_t, int8_t>{0x0C7B, 3},
    std::pair<char32_t, int8_t>{0x0C7C, 1},    std::pair<char32_t, int8_t>{0x0C7D, 2},
    std::pair<char32_t, int8_t>{0x0C7E, 3},    std::pair<char32_t, int8_t>{0x0CE6, 0},
    std::pair<char32_t, int8_t>{0x0CE7, 1},    std::pair<char32_t, int8_t>{0x0CE8, 2},
    std::pair<char32_t, int8_t>{0x0CE9, 3},    std::pair<char32_t, int8_t>{0x0CEA, 4},
    std::pair<char32_t, int8_t>{0x0CEB, 5},    std::pair<char32_t, int8_t>{0x0CEC, 6},
    std::pair<char32_t, int8_t>{0x0CED, 7},    std::pair<char32_t, int8_t>{0x0CEE, 8},
    std::pair<char32_t, int8_t>{0x0CEF, 9},    std::pair<char32_t, int8_t>{0x0D58, 1},
    std::pair<char32_t, int8_t>{0x0D59, 1},    std::pair<char32_t, int8_t>{0x0D5A, 3},
    std::pair<char32_t, int8_t>{0x0D5B, 1},    std::pair<char32_t, int8_t>{0x0D5C, 1},
    std::pair<char32_t, int8_t>{0x0D5D, 3},    std::pair<char32_t, int8_t>{0x0D5E, 1},
    std::pair<char32_t, int8_t>{0x0D66, 0},    std::pair<char32_t, int8_t>{0x0D67, 1},
    std::pair<char32_t, int8_t>{0x0D68, 2},    std::pair<char32_t, int8_t>{0x0D69, 3},
    std::pair<char32_t, int8_t>{0x0D6A, 4},    std::pair<char32_t, int8_t>{0x0D6B, 5},
    std::pair<char32_t, int8_t>{0x0D6C, 6},    std::pair<char32_t, int8_t>{0x0D6D, 7},
    std::pair<char32_t, int8_t>{0x0D6E, 8},    std::pair<char32_t, int8_t>{0x0D6F, 9},
    std::pair<char32_t, int8_t>{0x0D70, 10},   std::pair<char32_t, int8_t>{0x0D71, 100},
    std::pair<char32_t, int8_t>{0x0D73, 1},    std::pair<char32_t, int8_t>{0x0D74, 1},
    std::pair<char32_t, int8_t>{0x0D75, 3},    std::pair<char32_t, int8_t>{0x0D76, 1},
    std::pair<char32_t, int8_t>{0x0D77, 1},    std::pair<char32_t, int8_t>{0x0D78, 3},
    std::pair<char32_t, int8_t>{0x0DE6, 0},    std::pair<char32_t, int8_t>{0x0DE7, 1},
    std::pair<char32_t, int8_t>{0x0DE8, 2},    std::pair<char32_t, int8_t>{0x0DE9, 3},
    std::pair<char32_t, int8_t>{0x0DEA, 4},    std::pair<char32_t, int8_t>{0x0DEB, 5},
    std::pair<char32_t, int8_t>{0x0DEC, 6},    std::pair<char32_t, int8_t>{0x0DED, 7},
    std::pair<char32_t, int8_t>{0x0DEE, 8},    std::pair<char32_t, int8_t>{0x0DEF, 9},
    std::pair<char32_t, int8_t>{0x0E50, 0},    std::pair<char32_t, int8_t>{0x0E51, 1},
    std::pair<char32_t, int8_t>{0x0E52, 2},    std::pair<char32_t, int8_t>{0x0E53, 3},
    std::pair<char32_t, int8_t>{0x0E54, 4},    std::pair<char32_t, int8_t>{0x0E55, 5},
    std::pair<char32_t, int8_t>{0x0E56, 6},    std::pair<char32_t, int8_t>{0x0E57, 7},
    std::pair<char32_t, int8_t>{0x0E58, 8},    std::pair<char32_t, int8_t>{0x0E59, 9},
    std::pair<char32_t, int8_t>{0x0ED0, 0},    std::pair<char32_t, int8_t>{0x0ED1, 1},
    std::pair<char32_t, int8_t>{0x0ED2, 2},    std::pair<char32_t, int8_t>{0x0ED3, 3},
    std::pair<char32_t, int8_t>{0x0ED4, 4},    std::pair<char32_t, int8_t>{0x0ED5, 5},
    std::pair<char32_t, int8_t>{0x0ED6, 6},    std::pair<char32_t, int8_t>{0x0ED7, 7},
    std::pair<char32_t, int8_t>{0x0ED8, 8},    std::pair<char32_t, int8_t>{0x0ED9, 9},
    std::pair<char32_t, int8_t>{0x0F20, 0},    std::pair<char32_t, int8_t>{0x0F21, 1},
    std::pair<char32_t, int8_t>{0x0F22, 2},    std::pair<char32_t, int8_t>{0x0F23, 3},
    std::pair<char32_t, int8_t>{0x0F24, 4},    std::pair<char32_t, int8_t>{0x0F25, 5},
    std::pair<char32_t, int8_t>{0x0F26, 6},    std::pair<char32_t, int8_t>{0x0F27, 7},
    std::pair<char32_t, int8_t>{0x0F28, 8},    std::pair<char32_t, int8_t>{0x0F29, 9},
    std::pair<char32_t, int8_t>{0x0F2A, 1},    std::pair<char32_t, int8_t>{0x0F2B, 3},
    std::pair<char32_t, int8_t>{0x0F2C, 5},    std::pair<char32_t, int8_t>{0x0F2D, 7},
    std::pair<char32_t, int8_t>{0x0F2E, 9},    std::pair<char32_t, int8_t>{0x0F2F, 11},
    std::pair<char32_t, int8_t>{0x0F30, 13},   std::pair<char32_t, int8_t>{0x0F31, 15},
    std::pair<char32_t, int8_t>{0x0F32, 17},   std::pair<char32_t, int8_t>{0x0F33, -1},
    std::pair<char32_t, int8_t>{0x1040, 0},    std::pair<char32_t, int8_t>{0x1041, 1},
    std::pair<char32_t, int8_t>{0x1042, 2},    std::pair<char32_t, int8_t>{0x1043, 3},
    std::pair<char32_t, int8_t>{0x1044, 4},    std::pair<char32_t, int8_t>{0x1045, 5},
    std::pair<char32_t, int8_t>{0x1046, 6},    std::pair<char32_t, int8_t>{0x1047, 7},
    std::pair<char32_t, int8_t>{0x1048, 8},    std::pair<char32_t, int8_t>{0x1049, 9},
    std::pair<char32_t, int8_t>{0x1090, 0},    std::pair<char32_t, int8_t>{0x1091, 1},
    std::pair<char32_t, int8_t>{0x1092, 2},    std::pair<char32_t, int8_t>{0x1093, 3},
    std::pair<char32_t, int8_t>{0x1094, 4},    std::pair<char32_t, int8_t>{0x1095, 5},
    std::pair<char32_t, int8_t>{0x1096, 6},    std::pair<char32_t, int8_t>{0x1097, 7},
    std::pair<char32_t, int8_t>{0x1098, 8},    std::pair<char32_t, int8_t>{0x1099, 9},
    std::pair<char32_t, int8_t>{0x1369, 1},    std::pair<char32_t, int8_t>{0x136A, 2},
    std::pair<char32_t, int8_t>{0x136B, 3},    std::pair<char32_t, int8_t>{0x136C, 4},
    std::pair<char32_t, int8_t>{0x136D, 5},    std::pair<char32_t, int8_t>{0x136E, 6},
    std::pair<char32_t, int8_t>{0x136F, 7},    std::pair<char32_t, int8_t>{0x1370, 8},
    std::pair<char32_t, int8_t>{0x1371, 9},    std::pair<char32_t, int8_t>{0x1372, 10},
    std::pair<char32_t, int8_t>{0x1373, 20},   std::pair<char32_t, int8_t>{0x1374, 30},
    std::pair<char32_t, int8_t>{0x1375, 40},   std::pair<char32_t, int8_t>{0x1376, 50},
    std::pair<char32_t, int8_t>{0x1377, 60},   std::pair<char32_t, int8_t>{0x1378, 70},
    std::pair<char32_t, int8_t>{0x1379, 80},   std::pair<char32_t, int8_t>{0x137A, 90},
    std::pair<char32_t, int8_t>{0x137B, 100},  std::pair<char32_t, int8_t>{0x16EE, 17},
    std::pair<char32_t, int8_t>{0x16EF, 18},   std::pair<char32_t, int8_t>{0x16F0, 19},
    std::pair<char32_t, int8_t>{0x17E0, 0},    std::pair<char32_t, int8_t>{0x17E1, 1},
    std::pair<char32_t, int8_t>{0x17E2, 2},    std::pair<char32_t, int8_t>{0x17E3, 3},
    std::pair<char32_t, int8_t>{0x17E4, 4},    std::pair<char32_t, int8_t>{0x17E5, 5},
    std::pair<char32_t, int8_t>{0x17E6, 6},    std::pair<char32_t, int8_t>{0x17E7, 7},
    std::pair<char32_t, int8_t>{0x17E8, 8},    std::pair<char32_t, int8_t>{0x17E9, 9},
    std::pair<char32_t, int8_t>{0x17F0, 0},    std::pair<char32_t, int8_t>{0x17F1, 1},
    std::pair<char32_t, int8_t>{0x17F2, 2},    std::pair<char32_t, int8_t>{0x17F3, 3},
    std::pair<char32_t, int8_t>{0x17F4, 4},    std::pair<char32_t, int8_t>{0x17F5, 5},
    std::pair<char32_t, int8_t>{0x17F6, 6},    std::pair<char32_t, int8_t>{0x17F7, 7},
    std::pair<char32_t, int8_t>{0x17F8, 8},    std::pair<char32_t, int8_t>{0x17F9, 9},
    std::pair<char32_t, int8_t>{0x1810, 0},    std::pair<char32_t, int8_t>{0x1811, 1},
    std::pair<char32_t, int8_t>{0x1812, 2},    std::pair<char32_t, int8_t>{0x1813, 3},
    std::pair<char32_t, int8_t>{0x1814, 4},    std::pair<char32_t, int8_t>{0x1815, 5},
    std::pair<char32_t, int8_t>{0x1816, 6},    std::pair<char32_t, int8_t>{0x1817, 7},
    std::pair<char32_t, int8_t>{0x1818, 8},    std::pair<char32_t, int8_t>{0x1819, 9},
    std::pair<char32_t, int8_t>{0x1946, 0},    std::pair<char32_t, int8_t>{0x1947, 1},
    std::pair<char32_t, int8_t>{0x1948, 2},    std::pair<char32_t, int8_t>{0x1949, 3},
    std::pair<char32_t, int8_t>{0x194A, 4},    std::pair<char32_t, int8_t>{0x194B, 5},
    std::pair<char32_t, int8_t>{0x194C, 6},    std::pair<char32_t, int8_t>{0x194D, 7},
    std::pair<char32_t, int8_t>{0x194E, 8},    std::pair<char32_t, int8_t>{0x194F, 9},
    std::pair<char32_t, int8_t>{0x19D0, 0},    std::pair<char32_t, int8_t>{0x19D1, 1},
    std::pair<char32_t, int8_t>{0x19D2, 2},    std::pair<char32_t, int8_t>{0x19D3, 3},
    std::pair<char32_t, int8_t>{0x19D4, 4},    std::pair<char32_t, int8_t>{0x19D5, 5},
    std::pair<char32_t, int8_t>{0x19D6, 6},    std::pair<char32_t, int8_t>{0x19D7, 7},
    std::pair<char32_t, int8_t>{0x19D8, 8},    std::pair<char32_t, int8_t>{0x19D9, 9},
    std::pair<char32_t, int8_t>{0x19DA, 1},    std::pair<char32_t, int8_t>{0x1A80, 0},
    std::pair<char32_t, int8_t>{0x1A81, 1},    std::pair<char32_t, int8_t>{0x1A82, 2},
    std::pair<char32_t, int8_t>{0x1A83, 3},    std::pair<char32_t, int8_t>{0x1A84, 4},
    std::pair<char32_t, int8_t>{0x1A85, 5},    std::pair<char32_t, int8_t>{0x1A86, 6},
    std::pair<char32_t, int8_t>{0x1A87, 7},    std::pair<char32_t, int8_t>{0x1A88, 8},
    std::pair<char32_t, int8_t>{0x1A89, 9},    std::pair<char32_t, int8_t>{0x1A90, 0},
    std::pair<char32_t, int8_t>{0x1A91, 1},    std::pair<char32_t, int8_t>{0x1A92, 2},
    std::pair<char32_t, int8_t>{0x1A93, 3},    std::pair<char32_t, int8_t>{0x1A94, 4},
    std::pair<char32_t, int8_t>{0x1A95, 5},    std::pair<char32_t, int8_t>{0x1A96, 6},
    std::pair<char32_t, int8_t>{0x1A97, 7},    std::pair<char32_t, int8_t>{0x1A98, 8},
    std::pair<char32_t, int8_t>{0x1A99, 9},    std::pair<char32_t, int8_t>{0x1B50, 0},
    std::pair<char32_t, int8_t>{0x1B51, 1},    std::pair<char32_t, int8_t>{0x1B52, 2},
    std::pair<char32_t, int8_t>{0x1B53, 3},    std::pair<char32_t, int8_t>{0x1B54, 4},
    std::pair<char32_t, int8_t>{0x1B55, 5},    std::pair<char32_t, int8_t>{0x1B56, 6},
    std::pair<char32_t, int8_t>{0x1B57, 7},    std::pair<char32_t, int8_t>{0x1B58, 8},
    std::pair<char32_t, int8_t>{0x1B59, 9},    std::pair<char32_t, int8_t>{0x1BB0, 0},
    std::pair<char32_t, int8_t>{0x1BB1, 1},    std::pair<char32_t, int8_t>{0x1BB2, 2},
    std::pair<char32_t, int8_t>{0x1BB3, 3},    std::pair<char32_t, int8_t>{0x1BB4, 4},
    std::pair<char32_t, int8_t>{0x1BB5, 5},    std::pair<char32_t, int8_t>{0x1BB6, 6},
    std::pair<char32_t, int8_t>{0x1BB7, 7},    std::pair<char32_t, int8_t>{0x1BB8, 8},
    std::pair<char32_t, int8_t>{0x1BB9, 9},    std::pair<char32_t, int8_t>{0x1C40, 0},
    std::pair<char32_t, int8_t>{0x1C41, 1},    std::pair<char32_t, int8_t>{0x1C42, 2},
    std::pair<char32_t, int8_t>{0x1C43, 3},    std::pair<char32_t, int8_t>{0x1C44, 4},
    std::pair<char32_t, int8_t>{0x1C45, 5},    std::pair<char32_t, int8_t>{0x1C46, 6},
    std::pair<char32_t, int8_t>{0x1C47, 7},    std::pair<char32_t, int8_t>{0x1C48, 8},
    std::pair<char32_t, int8_t>{0x1C49, 9},    std::pair<char32_t, int8_t>{0x1C50, 0},
    std::pair<char32_t, int8_t>{0x1C51, 1},    std::pair<char32_t, int8_t>{0x1C52, 2},
    std::pair<char32_t, int8_t>{0x1C53, 3},    std::pair<char32_t, int8_t>{0x1C54, 4},
    std::pair<char32_t, int8_t>{0x1C55, 5},    std::pair<char32_t, int8_t>{0x1C56, 6},
    std::pair<char32_t, int8_t>{0x1C57, 7},    std::pair<char32_t, int8_t>{0x1C58, 8},
    std::pair<char32_t, int8_t>{0x1C59, 9},    std::pair<char32_t, int8_t>{0x2070, 0},
    std::pair<char32_t, int8_t>{0x2074, 4},    std::pair<char32_t, int8_t>{0x2075, 5},
    std::pair<char32_t, int8_t>{0x2076, 6},    std::pair<char32_t, int8_t>{0x2077, 7},
    std::pair<char32_t, int8_t>{0x2078, 8},    std::pair<char32_t, int8_t>{0x2079, 9},
    std::pair<char32_t, int8_t>{0x2080, 0},    std::pair<char32_t, int8_t>{0x2081, 1},
    std::pair<char32_t, int8_t>{0x2082, 2},    std::pair<char32_t, int8_t>{0x2083, 3},
    std::pair<char32_t, int8_t>{0x2084, 4},    std::pair<char32_t, int8_t>{0x2085, 5},
    std::pair<char32_t, int8_t>{0x2086, 6},    std::pair<char32_t, int8_t>{0x2087, 7},
    std::pair<char32_t, int8_t>{0x2088, 8},    std::pair<char32_t, int8_t>{0x2089, 9},
    std::pair<char32_t, int8_t>{0x2150, 1},    std::pair<char32_t, int8_t>{0x2151, 1},
    std::pair<char32_t, int8_t>{0x2152, 1},    std::pair<char32_t, int8_t>{0x2153, 1},
    std::pair<char32_t, int8_t>{0x2154, 2},    std::pair<char32_t, int8_t>{0x2155, 1},
    std::pair<char32_t, int8_t>{0x2156, 2},    std::pair<char32_t, int8_t>{0x2157, 3},
    std::pair<char32_t, int8_t>{0x2158, 4},    std::pair<char32_t, int8_t>{0x2159, 1},
    std::pair<char32_t, int8_t>{0x215A, 5},    std::pair<char32_t, int8_t>{0x215B, 1},
    std::pair<char32_t, int8_t>{0x215C, 3},    std::pair<char32_t, int8_t>{0x215D, 5},
    std::pair<char32_t, int8_t>{0x215E, 7},    std::pair<char32_t, int8_t>{0x215F, 1},
    std::pair<char32_t, int8_t>{0x2160, 1},    std::pair<char32_t, int8_t>{0x2161, 2},
    std::pair<char32_t, int8_t>{0x2162, 3},    std::pair<char32_t, int8_t>{0x2163, 4},
    std::pair<char32_t, int8_t>{0x2164, 5},    std::pair<char32_t, int8_t>{0x2165, 6},
    std::pair<char32_t, int8_t>{0x2166, 7},    std::pair<char32_t, int8_t>{0x2167, 8},
    std::pair<char32_t, int8_t>{0x2168, 9},    std::pair<char32_t, int8_t>{0x2169, 10},
    std::pair<char32_t, int8_t>{0x216A, 11},   std::pair<char32_t, int8_t>{0x216B, 12},
    std::pair<char32_t, int8_t>{0x216C, 50},   std::pair<char32_t, int8_t>{0x216D, 100},
    std::pair<char32_t, int8_t>{0x2170, 1},    std::pair<char32_t, int8_t>{0x2171, 2},
    std::pair<char32_t, int8_t>{0x2172, 3},    std::pair<char32_t, int8_t>{0x2173, 4},
    std::pair<char32_t, int8_t>{0x2174, 5},    std::pair<char32_t, int8_t>{0x2175, 6},
    std::pair<char32_t, int8_t>{0x2176, 7},    std::pair<char32_t, int8_t>{0x2177, 8},
    std::pair<char32_t, int8_t>{0x2178, 9},    std::pair<char32_t, int8_t>{0x2179, 10},
    std::pair<char32_t, int8_t>{0x217A, 11},   std::pair<char32_t, int8_t>{0x217B, 12},
    std::pair<char32_t, int8_t>{0x217C, 50},   std::pair<char32_t, int8_t>{0x217D, 100},
    std::pair<char32_t, int8_t>{0x2185, 6},    std::pair<char32_t, int8_t>{0x2186, 50},
    std::pair<char32_t, int8_t>{0x2189, 0},    std::pair<char32_t, int8_t>{0x2460, 1},
    std::pair<char32_t, int8_t>{0x2461, 2},    std::pair<char32_t, int8_t>{0x2462, 3},
    std::pair<char32_t, int8_t>{0x2463, 4},    std::pair<char32_t, int8_t>{0x2464, 5},
    std::pair<char32_t, int8_t>{0x2465, 6},    std::pair<char32_t, int8_t>{0x2466, 7},
    std::pair<char32_t, int8_t>{0x2467, 8},    std::pair<char32_t, int8_t>{0x2468, 9},
    std::pair<char32_t, int8_t>{0x2469, 10},   std::pair<char32_t, int8_t>{0x246A, 11},
    std::pair<char32_t, int8_t>{0x246B, 12},   std::pair<char32_t, int8_t>{0x246C, 13},
    std::pair<char32_t, int8_t>{0x246D, 14},   std::pair<char32_t, int8_t>{0x246E, 15},
    std::pair<char32_t, int8_t>{0x246F, 16},   std::pair<char32_t, int8_t>{0x2470, 17},
    std::pair<char32_t, int8_t>{0x2471, 18},   std::pair<char32_t, int8_t>{0x2472, 19},
    std::pair<char32_t, int8_t>{0x2473, 20},   std::pair<char32_t, int8_t>{0x2474, 1},
    std::pair<char32_t, int8_t>{0x2475, 2},    std::pair<char32_t, int8_t>{0x2476, 3},
    std::pair<char32_t, int8_t>{0x2477, 4},    std::pair<char32_t, int8_t>{0x2478, 5},
    std::pair<char32_t, int8_t>{0x2479, 6},    std::pair<char32_t, int8_t>{0x247A, 7},
    std::pair<char32_t, int8_t>{0x247B, 8},    std::pair<char32_t, int8_t>{0x247C, 9},
    std::pair<char32_t, int8_t>{0x247D, 10},   std::pair<char32_t, int8_t>{0x247E, 11},
    std::pair<char32_t, int8_t>{0x247F, 12},   std::pair<char32_t, int8_t>{0x2480, 13},
    std::pair<char32_t, int8_t>{0x2481, 14},   std::pair<char32_t, int8_t>{0x2482, 15},
    std::pair<char32_t, int8_t>{0x2483, 16},   std::pair<char32_t, int8_t>{0x2484, 17},
    std::pair<char32_t, int8_t>{0x2485, 18},   std::pair<char32_t, int8_t>{0x2486, 19},
    std::pair<char32_t, int8_t>{0x2487, 20},   std::pair<char32_t, int8_t>{0x2488, 1},
    std::pair<char32_t, int8_t>{0x2489, 2},    std::pair<char32_t, int8_t>{0x248A, 3},
    std::pair<char32_t, int8_t>{0x248B, 4},    std::pair<char32_t, int8_t>{0x248C, 5},
    std::pair<char32_t, int8_t>{0x248D, 6},    std::pair<char32_t, int8_t>{0x248E, 7},
    std::pair<char32_t, int8_t>{0x248F, 8},    std::pair<char32_t, int8_t>{0x2490, 9},
    std::pair<char32_t, int8_t>{0x2491, 10},   std::pair<char32_t, int8_t>{0x2492, 11},
    std::pair<char32_t, int8_t>{0x2493, 12},   std::pair<char32_t, int8_t>{0x2494, 13},
    std::pair<char32_t, int8_t>{0x2495, 14},   std::pair<char32_t, int8_t>{0x2496, 15},
    std::pair<char32_t, int8_t>{0x2497, 16},   std::pair<char32_t, int8_t>{0x2498, 17},
    std::pair<char32_t, int8_t>{0x2499, 18},   std::pair<char32_t, int8_t>{0x249A, 19},
    std::pair<char32_t, int8_t>{0x249B, 20},   std::pair<char32_t, int8_t>{0x24EA, 0},
    std::pair<char32_t, int8_t>{0x24EB, 11},   std::pair<char32_t, int8_t>{0x24EC, 12},
    std::pair<char32_t, int8_t>{0x24ED, 13},   std::pair<char32_t, int8_t>{0x24EE, 14},
    std::pair<char32_t, int8_t>{0x24EF, 15},   std::pair<char32_t, int8_t>{0x24F0, 16},
    std::pair<char32_t, int8_t>{0x24F1, 17},   std::pair<char32_t, int8_t>{0x24F2, 18},
    std::pair<char32_t, int8_t>{0x24F3, 19},   std::pair<char32_t, int8_t>{0x24F4, 20},
    std::pair<char32_t, int8_t>{0x24F5, 1},    std::pair<char32_t, int8_t>{0x24F6, 2},
    std::pair<char32_t, int8_t>{0x24F7, 3},    std::pair<char32_t, int8_t>{0x24F8, 4},
    std::pair<char32_t, int8_t>{0x24F9, 5},    std::pair<char32_t, int8_t>{0x24FA, 6},
    std::pair<char32_t, int8_t>{0x24FB, 7},    std::pair<char32_t, int8_t>{0x24FC, 8},
    std::pair<char32_t, int8_t>{0x24FD, 9},    std::pair<char32_t, int8_t>{0x24FE, 10},
    std::pair<char32_t, int8_t>{0x24FF, 0},    std::pair<char32_t, int8_t>{0x2776, 1},
    std::pair<char32_t, int8_t>{0x2777, 2},    std::pair<char32_t, int8_t>{0x2778, 3},
    std::pair<char32_t, int8_t>{0x2779, 4},    std::pair<char32_t, int8_t>{0x277A, 5},
    std::pair<char32_t, int8_t>{0x277B, 6},    std::pair<char32_t, int8_t>{0x277C, 7},
    std::pair<char32_t, int8_t>{0x277D, 8},    std::pair<char32_t, int8_t>{0x277E, 9},
    std::pair<char32_t, int8_t>{0x277F, 10},   std::pair<char32_t, int8_t>{0x2780, 1},
    std::pair<char32_t, int8_t>{0x2781, 2},    std::pair<char32_t, int8_t>{0x2782, 3},
    std::pair<char32_t, int8_t>{0x2783, 4},    std::pair<char32_t, int8_t>{0x2784, 5},
    std::pair<char32_t, int8_t>{0x2785, 6},    std::pair<char32_t, int8_t>{0x2786, 7},
    std::pair<char32_t, int8_t>{0x2787, 8},    std::pair<char32_t, int8_t>{0x2788, 9},
    std::pair<char32_t, int8_t>{0x2789, 10},   std::pair<char32_t, int8_t>{0x278A, 1},
    std::pair<char32_t, int8_t>{0x278B, 2},    std::pair<char32_t, int8_t>{0x278C, 3},
    std::pair<char32_t, int8_t>{0x278D, 4},    std::pair<char32_t, int8_t>{0x278E, 5},
    std::pair<char32_t, int8_t>{0x278F, 6},    std::pair<char32_t, int8_t>{0x2790, 7},
    std::pair<char32_t, int8_t>{0x2791, 8},    std::pair<char32_t, int8_t>{0x2792, 9},
    std::pair<char32_t, int8_t>{0x2793, 10},   std::pair<char32_t, int8_t>{0x2CFD, 1},
    std::pair<char32_t, int8_t>{0x3007, 0},    std::pair<char32_t, int8_t>{0x3021, 1},
    std::pair<char32_t, int8_t>{0x3022, 2},    std::pair<char32_t, int8_t>{0x3023, 3},
    std::pair<char32_t, int8_t>{0x3024, 4},    std::pair<char32_t, int8_t>{0x3025, 5},
    std::pair<char32_t, int8_t>{0x3026, 6},    std::pair<char32_t, int8_t>{0x3027, 7},
    std::pair<char32_t, int8_t>{0x3028, 8},    std::pair<char32_t, int8_t>{0x3029, 9},
    std::pair<char32_t, int8_t>{0x3038, 10},   std::pair<char32_t, int8_t>{0x3039, 20},
    std::pair<char32_t, int8_t>{0x303A, 30},   std::pair<char32_t, int8_t>{0x3192, 1},
    std::pair<char32_t, int8_t>{0x3193, 2},    std::pair<char32_t, int8_t>{0x3194, 3},
    std::pair<char32_t, int8_t>{0x3195, 4},    std::pair<char32_t, int8_t>{0x3220, 1},
    std::pair<char32_t, int8_t>{0x3221, 2},    std::pair<char32_t, int8_t>{0x3222, 3},
    std::pair<char32_t, int8_t>{0x3223, 4},    std::pair<char32_t, int8_t>{0x3224, 5},
    std::pair<char32_t, int8_t>{0x3225, 6},    std::pair<char32_t, int8_t>{0x3226, 7},
    std::pair<char32_t, int8_t>{0x3227, 8},    std::pair<char32_t, int8_t>{0x3228, 9},
    std::pair<char32_t, int8_t>{0x3229, 10},   std::pair<char32_t, int8_t>{0x3248, 10},
    std::pair<char32_t, int8_t>{0x3249, 20},   std::pair<char32_t, int8_t>{0x324A, 30},
    std::pair<char32_t, int8_t>{0x324B, 40},   std::pair<char32_t, int8_t>{0x324C, 50},
    std::pair<char32_t, int8_t>{0x324D, 60},   std::pair<char32_t, int8_t>{0x324E, 70},
    std::pair<char32_t, int8_t>{0x324F, 80},   std::pair<char32_t, int8_t>{0x3251, 21},
    std::pair<char32_t, int8_t>{0x3252, 22},   std::pair<char32_t, int8_t>{0x3253, 23},
    std::pair<char32_t, int8_t>{0x3254, 24},   std::pair<char32_t, int8_t>{0x3255, 25},
    std::pair<char32_t, int8_t>{0x3256, 26},   std::pair<char32_t, int8_t>{0x3257, 27},
    std::pair<char32_t, int8_t>{0x3258, 28},   std::pair<char32_t, int8_t>{0x3259, 29},
    std::pair<char32_t, int8_t>{0x325A, 30},   std::pair<char32_t, int8_t>{0x325B, 31},
    std::pair<char32_t, int8_t>{0x325C, 32},   std::pair<char32_t, int8_t>{0x325D, 33},
    std::pair<char32_t, int8_t>{0x325E, 34},   std::pair<char32_t, int8_t>{0x325F, 35},
    std::pair<char32_t, int8_t>{0x3280, 1},    std::pair<char32_t, int8_t>{0x3281, 2},
    std::pair<char32_t, int8_t>{0x3282, 3},    std::pair<char32_t, int8_t>{0x3283, 4},
    std::pair<char32_t, int8_t>{0x3284, 5},    std::pair<char32_t, int8_t>{0x3285, 6},
    std::pair<char32_t, int8_t>{0x3286, 7},    std::pair<char32_t, int8_t>{0x3287, 8},
    std::pair<char32_t, int8_t>{0x3288, 9},    std::pair<char32_t, int8_t>{0x3289, 10},
    std::pair<char32_t, int8_t>{0x32B1, 36},   std::pair<char32_t, int8_t>{0x32B2, 37},
    std::pair<char32_t, int8_t>{0x32B3, 38},   std::pair<char32_t, int8_t>{0x32B4, 39},
    std::pair<char32_t, int8_t>{0x32B5, 40},   std::pair<char32_t, int8_t>{0x32B6, 41},
    std::pair<char32_t, int8_t>{0x32B7, 42},   std::pair<char32_t, int8_t>{0x32B8, 43},
    std::pair<char32_t, int8_t>{0x32B9, 44},   std::pair<char32_t, int8_t>{0x32BA, 45},
    std::pair<char32_t, int8_t>{0x32BB, 46},   std::pair<char32_t, int8_t>{0x32BC, 47},
    std::pair<char32_t, int8_t>{0x32BD, 48},   std::pair<char32_t, int8_t>{0x32BE, 49},
    std::pair<char32_t, int8_t>{0x32BF, 50},   std::pair<char32_t, int8_t>{0x3405, 5},
    std::pair<char32_t, int8_t>{0x3483, 2},    std::pair<char32_t, int8_t>{0x382A, 5},
    std::pair<char32_t, int8_t>{0x3B4D, 7},    std::pair<char32_t, int8_t>{0x4E00, 1},
    std::pair<char32_t, int8_t>{0x4E03, 7},    std::pair<char32_t, int8_t>{0x4E09, 3},
    std::pair<char32_t, int8_t>{0x4E5D, 9},    std::pair<char32_t, int8_t>{0x4E8C, 2},
    std::pair<char32_t, int8_t>{0x4E94, 5},    std::pair<char32_t, int8_t>{0x4E96, 4},
    std::pair<char32_t, int8_t>{0x4EC0, 10},   std::pair<char32_t, int8_t>{0x4EE8, 3},
    std::pair<char32_t, int8_t>{0x4F0D, 5},    std::pair<char32_t, int8_t>{0x4F70, 100},
    std::pair<char32_t, int8_t>{0x5169, 2},    std::pair<char32_t, int8_t>{0x516B, 8},
    std::pair<char32_t, int8_t>{0x516D, 6},    std::pair<char32_t, int8_t>{0x5341, 10},
    std::pair<char32_t, int8_t>{0x5344, 20},   std::pair<char32_t, int8_t>{0x5345, 30},
    std::pair<char32_t, int8_t>{0x534C, 40},   std::pair<char32_t, int8_t>{0x53C1, 3},
    std::pair<char32_t, int8_t>{0x53C2, 3},    std::pair<char32_t, int8_t>{0x53C3, 3},
    std::pair<char32_t, int8_t>{0x53C4, 3},    std::pair<char32_t, int8_t>{0x56DB, 4},
    std::pair<char32_t, int8_t>{0x58F1, 1},    std::pair<char32_t, int8_t>{0x58F9, 1},
    std::pair<char32_t, int8_t>{0x5E7A, 1},    std::pair<char32_t, int8_t>{0x5EFE, 9},
    std::pair<char32_t, int8_t>{0x5EFF, 20},   std::pair<char32_t, int8_t>{0x5F0C, 1},
    std::pair<char32_t, int8_t>{0x5F0D, 2},    std::pair<char32_t, int8_t>{0x5F0E, 3},
    std::pair<char32_t, int8_t>{0x5F10, 2},    std::pair<char32_t, int8_t>{0x62FE, 10},
    std::pair<char32_t, int8_t>{0x634C, 8},    std::pair<char32_t, int8_t>{0x67D2, 7},
    std::pair<char32_t, int8_t>{0x6F06, 7},    std::pair<char32_t, int8_t>{0x7396, 9},
    std::pair<char32_t, int8_t>{0x767E, 100},  std::pair<char32_t, int8_t>{0x8086, 4},
    std::pair<char32_t, int8_t>{0x8CAE, 2},    std::pair<char32_t, int8_t>{0x8CB3, 2},
    std::pair<char32_t, int8_t>{0x8D30, 2},    std::pair<char32_t, int8_t>{0x9646, 6},
    std::pair<char32_t, int8_t>{0x964C, 100},  std::pair<char32_t, int8_t>{0x9678, 6},
    std::pair<char32_t, int8_t>{0x96F6, 0},    std::pair<char32_t, int8_t>{0xA620, 0},
    std::pair<char32_t, int8_t>{0xA621, 1},    std::pair<char32_t, int8_t>{0xA622, 2},
    std::pair<char32_t, int8_t>{0xA623, 3},    std::pair<char32_t, int8_t>{0xA624, 4},
    std::pair<char32_t, int8_t>{0xA625, 5},    std::pair<char32_t, int8_t>{0xA626, 6},
    std::pair<char32_t, int8_t>{0xA627, 7},    std::pair<char32_t, int8_t>{0xA628, 8},
    std::pair<char32_t, int8_t>{0xA629, 9},    std::pair<char32_t, int8_t>{0xA6E6, 1},
    std::pair<char32_t, int8_t>{0xA6E7, 2},    std::pair<char32_t, int8_t>{0xA6E8, 3},
    std::pair<char32_t, int8_t>{0xA6E9, 4},    std::pair<char32_t, int8_t>{0xA6EA, 5},
    std::pair<char32_t, int8_t>{0xA6EB, 6},    std::pair<char32_t, int8_t>{0xA6EC, 7},
    std::pair<char32_t, int8_t>{0xA6ED, 8},    std::pair<char32_t, int8_t>{0xA6EE, 9},
    std::pair<char32_t, int8_t>{0xA6EF, 0},    std::pair<char32_t, int8_t>{0xA830, 1},
    std::pair<char32_t, int8_t>{0xA831, 1},    std::pair<char32_t, int8_t>{0xA832, 3},
    std::pair<char32_t, int8_t>{0xA833, 1},    std::pair<char32_t, int8_t>{0xA834, 1},
    std::pair<char32_t, int8_t>{0xA835, 3},    std::pair<char32_t, int8_t>{0xA8D0, 0},
    std::pair<char32_t, int8_t>{0xA8D1, 1},    std::pair<char32_t, int8_t>{0xA8D2, 2},
    std::pair<char32_t, int8_t>{0xA8D3, 3},    std::pair<char32_t, int8_t>{0xA8D4, 4},
    std::pair<char32_t, int8_t>{0xA8D5, 5},    std::pair<char32_t, int8_t>{0xA8D6, 6},
    std::pair<char32_t, int8_t>{0xA8D7, 7},    std::pair<char32_t, int8_t>{0xA8D8, 8},
    std::pair<char32_t, int8_t>{0xA8D9, 9},    std::pair<char32_t, int8_t>{0xA900, 0},
    std::pair<char32_t, int8_t>{0xA901, 1},    std::pair<char32_t, int8_t>{0xA902, 2},
    std::pair<char32_t, int8_t>{0xA903, 3},    std::pair<char32_t, int8_t>{0xA904, 4},
    std::pair<char32_t, int8_t>{0xA905, 5},    std::pair<char32_t, int8_t>{0xA906, 6},
    std::pair<char32_t, int8_t>{0xA907, 7},    std::pair<char32_t, int8_t>{0xA908, 8},
    std::pair<char32_t, int8_t>{0xA909, 9},    std::pair<char32_t, int8_t>{0xA9D0, 0},
    std::pair<char32_t, int8_t>{0xA9D1, 1},    std::pair<char32_t, int8_t>{0xA9D2, 2},
    std::pair<char32_t, int8_t>{0xA9D3, 3},    std::pair<char32_t, int8_t>{0xA9D4, 4},
    std::pair<char32_t, int8_t>{0xA9D5, 5},    std::pair<char32_t, int8_t>{0xA9D6, 6},
    std::pair<char32_t, int8_t>{0xA9D7, 7},    std::pair<char32_t, int8_t>{0xA9D8, 8},
    std::pair<char32_t, int8_t>{0xA9D9, 9},    std::pair<char32_t, int8_t>{0xA9F0, 0},
    std::pair<char32_t, int8_t>{0xA9F1, 1},    std::pair<char32_t, int8_t>{0xA9F2, 2},
    std::pair<char32_t, int8_t>{0xA9F3, 3},    std::pair<char32_t, int8_t>{0xA9F4, 4},
    std::pair<char32_t, int8_t>{0xA9F5, 5},    std::pair<char32_t, int8_t>{0xA9F6, 6},
    std::pair<char32_t, int8_t>{0xA9F7, 7},    std::pair<char32_t, int8_t>{0xA9F8, 8},
    std::pair<char32_t, int8_t>{0xA9F9, 9},    std::pair<char32_t, int8_t>{0xAA50, 0},
    std::pair<char32_t, int8_t>{0xAA51, 1},    std::pair<char32_t, int8_t>{0xAA52, 2},
    std::pair<char32_t, int8_t>{0xAA53, 3},    std::pair<char32_t, int8_t>{0xAA54, 4},
    std::pair<char32_t, int8_t>{0xAA55, 5},    std::pair<char32_t, int8_t>{0xAA56, 6},
    std::pair<char32_t, int8_t>{0xAA57, 7},    std::pair<char32_t, int8_t>{0xAA58, 8},
    std::pair<char32_t, int8_t>{0xAA59, 9},    std::pair<char32_t, int8_t>{0xABF0, 0},
    std::pair<char32_t, int8_t>{0xABF1, 1},    std::pair<char32_t, int8_t>{0xABF2, 2},
    std::pair<char32_t, int8_t>{0xABF3, 3},    std::pair<char32_t, int8_t>{0xABF4, 4},
    std::pair<char32_t, int8_t>{0xABF5, 5},    std::pair<char32_t, int8_t>{0xABF6, 6},
    std::pair<char32_t, int8_t>{0xABF7, 7},    std::pair<char32_t, int8_t>{0xABF8, 8},
    std::pair<char32_t, int8_t>{0xABF9, 9},    std::pair<char32_t, int8_t>{0xF96B, 3},
    std::pair<char32_t, int8_t>{0xF973, 10},   std::pair<char32_t, int8_t>{0xF978, 2},
    std::pair<char32_t, int8_t>{0xF9B2, 0},    std::pair<char32_t, int8_t>{0xF9D1, 6},
    std::pair<char32_t, int8_t>{0xF9D3, 6},    std::pair<char32_t, int8_t>{0xF9FD, 10},
    std::pair<char32_t, int8_t>{0xFF10, 0},    std::pair<char32_t, int8_t>{0xFF11, 1},
    std::pair<char32_t, int8_t>{0xFF12, 2},    std::pair<char32_t, int8_t>{0xFF13, 3},
    std::pair<char32_t, int8_t>{0xFF14, 4},    std::pair<char32_t, int8_t>{0xFF15, 5},
    std::pair<char32_t, int8_t>{0xFF16, 6},    std::pair<char32_t, int8_t>{0xFF17, 7},
    std::pair<char32_t, int8_t>{0xFF18, 8},    std::pair<char32_t, int8_t>{0xFF19, 9},
    std::pair<char32_t, int8_t>{0x10107, 1},   std::pair<char32_t, int8_t>{0x10108, 2},
    std::pair<char32_t, int8_t>{0x10109, 3},   std::pair<char32_t, int8_t>{0x1010A, 4},
    std::pair<char32_t, int8_t>{0x1010B, 5},   std::pair<char32_t, int8_t>{0x1010C, 6},
    std::pair<char32_t, int8_t>{0x1010D, 7},   std::pair<char32_t, int8_t>{0x1010E, 8},
    std::pair<char32_t, int8_t>{0x1010F, 9},   std::pair<char32_t, int8_t>{0x10110, 10},
    std::pair<char32_t, int8_t>{0x10111, 20},  std::pair<char32_t, int8_t>{0x10112, 30},
    std::pair<char32_t, int8_t>{0x10113, 40},  std::pair<char32_t, int8_t>{0x10114, 50},
    std::pair<char32_t, int8_t>{0x10115, 60},  std::pair<char32_t, int8_t>{0x10116, 70},
    std::pair<char32_t, int8_t>{0x10117, 80},  std::pair<char32_t, int8_t>{0x10118, 90},
    std::pair<char32_t, int8_t>{0x10119, 100}, std::pair<char32_t, int8_t>{0x10140, 1},
    std::pair<char32_t, int8_t>{0x10141, 1},   std::pair<char32_t, int8_t>{0x10142, 1},
    std::pair<char32_t, int8_t>{0x10143, 5},   std::pair<char32_t, int8_t>{0x10144, 50},
    std::pair<char32_t, int8_t>{0x10148, 5},   std::pair<char32_t, int8_t>{0x10149, 10},
    std::pair<char32_t, int8_t>{0x1014A, 50},  std::pair<char32_t, int8_t>{0x1014B, 100},
    std::pair<char32_t, int8_t>{0x1014F, 5},   std::pair<char32_t, int8_t>{0x10150, 10},
    std::pair<char32_t, int8_t>{0x10151, 50},  std::pair<char32_t, int8_t>{0x10152, 100},
    std::pair<char32_t, int8_t>{0x10157, 10},  std::pair<char32_t, int8_t>{0x10158, 1},
    std::pair<char32_t, int8_t>{0x10159, 1},   std::pair<char32_t, int8_t>{0x1015A, 1},
    std::pair<char32_t, int8_t>{0x1015B, 2},   std::pair<char32_t, int8_t>{0x1015C, 2},
    std::pair<char32_t, int8_t>{0x1015D, 2},   std::pair<char32_t, int8_t>{0x1015E, 2},
    std::pair<char32_t, int8_t>{0x1015F, 5},   std::pair<char32_t, int8_t>{0x10160, 10},
    std::pair<char32_t, int8_t>{0x10161, 10},  std::pair<char32_t, int8_t>{0x10162, 10},
    std::pair<char32_t, int8_t>{0x10163, 10},  std::pair<char32_t, int8_t>{0x10164, 10},
    std::pair<char32_t, int8_t>{0x10165, 30},  std::pair<char32_t, int8_t>{0x10166, 50},
    std::pair<char32_t, int8_t>{0x10167, 50},  std::pair<char32_t, int8_t>{0x10168, 50},
    std::pair<char32_t, int8_t>{0x10169, 50},  std::pair<char32_t, int8_t>{0x1016A, 100},
    std::pair<char32_t, int8_t>{0x10173, 5},   std::pair<char32_t, int8_t>{0x10174, 50},
    std::pair<char32_t, int8_t>{0x10175, 1},   std::pair<char32_t, int8_t>{0x10176, 1},
    std::pair<char32_t, int8_t>{0x10177, 2},   std::pair<char32_t, int8_t>{0x10178, 3},
    std::pair<char32_t, int8_t>{0x1018A, 0},   std::pair<char32_t, int8_t>{0x1018B, 1},
    std::pair<char32_t, int8_t>{0x102E1, 1},   std::pair<char32_t, int8_t>{0x102E2, 2},
    std::pair<char32_t, int8_t>{0x102E3, 3},   std::pair<char32_t, int8_t>{0x102E4, 4},
    std::pair<char32_t, int8_t>{0x102E5, 5},   std::pair<char32_t, int8_t>{0x102E6, 6},
    std::pair<char32_t, int8_t>{0x102E7, 7},   std::pair<char32_t, int8_t>{0x102E8, 8},
    std::pair<char32_t, int8_t>{0x102E9, 9},   std::pair<char32_t, int8_t>{0x102EA, 10},
    std::pair<char32_t, int8_t>{0x102EB, 20},  std::pair<char32_t, int8_t>{0x102EC, 30},
    std::pair<char32_t, int8_t>{0x102ED, 40},  std::pair<char32_t, int8_t>{0x102EE, 50},
    std::pair<char32_t, int8_t>{0x102EF, 60},  std::pair<char32_t, int8_t>{0x102F0, 70},
    std::pair<char32_t, int8_t>{0x102F1, 80},  std::pair<char32_t, int8_t>{0x102F2, 90},
    std::pair<char32_t, int8_t>{0x102F3, 100}, std::pair<char32_t, int8_t>{0x10320, 1},
    std::pair<char32_t, int8_t>{0x10321, 5},   std::pair<char32_t, int8_t>{0x10322, 10},
    std::pair<char32_t, int8_t>{0x10323, 50},  std::pair<char32_t, int8_t>{0x10341, 90},
    std::pair<char32_t, int8_t>{0x103D1, 1},   std::pair<char32_t, int8_t>{0x103D2, 2},
    std::pair<char32_t, int8_t>{0x103D3, 10},  std::pair<char32_t, int8_t>{0x103D4, 20},
    std::pair<char32_t, int8_t>{0x103D5, 100}, std::pair<char32_t, int8_t>{0x104A0, 0},
    std::pair<char32_t, int8_t>{0x104A1, 1},   std::pair<char32_t, int8_t>{0x104A2, 2},
    std::pair<char32_t, int8_t>{0x104A3, 3},   std::pair<char32_t, int8_t>{0x104A4, 4},
    std::pair<char32_t, int8_t>{0x104A5, 5},   std::pair<char32_t, int8_t>{0x104A6, 6},
    std::pair<char32_t, int8_t>{0x104A7, 7},   std::pair<char32_t, int8_t>{0x104A8, 8},
    std::pair<char32_t, int8_t>{0x104A9, 9},   std::pair<char32_t, int8_t>{0x10858, 1},
    std::pair<char32_t, int8_t>{0x10859, 2},   std::pair<char32_t, int8_t>{0x1085A, 3},
    std::pair<char32_t, int8_t>{0x1085B, 10},  std::pair<char32_t, int8_t>{0x1085C, 20},
    std::pair<char32_t, int8_t>{0x1085D, 100}, std::pair<char32_t, int8_t>{0x10879, 1},
    std::pair<char32_t, int8_t>{0x1087A, 2},   std::pair<char32_t, int8_t>{0x1087B, 3},
    std::pair<char32_t, int8_t>{0x1087C, 4},   std::pair<char32_t, int8_t>{0x1087D, 5},
    std::pair<char32_t, int8_t>{0x1087E, 10},  std::pair<char32_t, int8_t>{0x1087F, 20},
    std::pair<char32_t, int8_t>{0x108A7, 1},   std::pair<char32_t, int8_t>{0x108A8, 2},
    std::pair<char32_t, int8_t>{0x108A9, 3},   std::pair<char32_t, int8_t>{0x108AA, 4},
    std::pair<char32_t, int8_t>{0x108AB, 4},   std::pair<char32_t, int8_t>{0x108AC, 5},
    std::pair<char32_t, int8_t>{0x108AD, 10},  std::pair<char32_t, int8_t>{0x108AE, 20},
    std::pair<char32_t, int8_t>{0x108AF, 100}, std::pair<char32_t, int8_t>{0x108FB, 1},
    std::pair<char32_t, int8_t>{0x108FC, 5},   std::pair<char32_t, int8_t>{0x108FD, 10},
    std::pair<char32_t, int8_t>{0x108FE, 20},  std::pair<char32_t, int8_t>{0x108FF, 100},
    std::pair<char32_t, int8_t>{0x10916, 1},   std::pair<char32_t, int8_t>{0x10917, 10},
    std::pair<char32_t, int8_t>{0x10918, 20},  std::pair<char32_t, int8_t>{0x10919, 100},
    std::pair<char32_t, int8_t>{0x1091A, 2},   std::pair<char32_t, int8_t>{0x1091B, 3},
    std::pair<char32_t, int8_t>{0x109BC, 11},  std::pair<char32_t, int8_t>{0x109BD, 1},
    std::pair<char32_t, int8_t>{0x109C0, 1},   std::pair<char32_t, int8_t>{0x109C1, 2},
    std::pair<char32_t, int8_t>{0x109C2, 3},   std::pair<char32_t, int8_t>{0x109C3, 4},
    std::pair<char32_t, int8_t>{0x109C4, 5},   std::pair<char32_t, int8_t>{0x109C5, 6},
    std::pair<char32_t, int8_t>{0x109C6, 7},   std::pair<char32_t, int8_t>{0x109C7, 8},
    std::pair<char32_t, int8_t>{0x109C8, 9},   std::pair<char32_t, int8_t>{0x109C9, 10},
    std::pair<char32_t, int8_t>{0x109CA, 20},  std::pair<char32_t, int8_t>{0x109CB, 30},
    std::pair<char32_t, int8_t>{0x109CC, 40},  std::pair<char32_t, int8_t>{0x109CD, 50},
    std::pair<char32_t, int8_t>{0x109CE, 60},  std::pair<char32_t, int8_t>{0x109CF, 70},
    std::pair<char32_t, int8_t>{0x109D2, 100}, std::pair<char32_t, int8_t>{0x109F6, 1},
    std::pair<char32_t, int8_t>{0x109F7, 2},   std::pair<char32_t, int8_t>{0x109F8, 3},
    std::pair<char32_t, int8_t>{0x109F9, 4},   std::pair<char32_t, int8_t>{0x109FA, 5},
    std::pair<char32_t, int8_t>{0x109FB, 6},   std::pair<char32_t, int8_t>{0x109FC, 7},
    std::pair<char32_t, int8_t>{0x109FD, 8},   std::pair<char32_t, int8_t>{0x109FE, 9},
    std::pair<char32_t, int8_t>{0x109FF, 10},  std::pair<char32_t, int8_t>{0x10A40, 1},
    std::pair<char32_t, int8_t>{0x10A41, 2},   std::pair<char32_t, int8_t>{0x10A42, 3},
    std::pair<char32_t, int8_t>{0x10A43, 4},   std::pair<char32_t, int8_t>{0x10A44, 10},
    std::pair<char32_t, int8_t>{0x10A45, 20},  std::pair<char32_t, int8_t>{0x10A46, 100},
    std::pair<char32_t, int8_t>{0x10A48, 1},   std::pair<char32_t, int8_t>{0x10A7D, 1},
    std::pair<char32_t, int8_t>{0x10A7E, 50},  std::pair<char32_t, int8_t>{0x10A9D, 1},
    std::pair<char32_t, int8_t>{0x10A9E, 10},  std::pair<char32_t, int8_t>{0x10A9F, 20},
    std::pair<char32_t, int8_t>{0x10AEB, 1},   std::pair<char32_t, int8_t>{0x10AEC, 5},
    std::pair<char32_t, int8_t>{0x10AED, 10},  std::pair<char32_t, int8_t>{0x10AEE, 20},
    std::pair<char32_t, int8_t>{0x10AEF, 100}, std::pair<char32_t, int8_t>{0x10B58, 1},
    std::pair<char32_t, int8_t>{0x10B59, 2},   std::pair<char32_t, int8_t>{0x10B5A, 3},
    std::pair<char32_t, int8_t>{0x10B5B, 4},   std::pair<char32_t, int8_t>{0x10B5C, 10},
    std::pair<char32_t, int8_t>{0x10B5D, 20},  std::pair<char32_t, int8_t>{0x10B5E, 100},
    std::pair<char32_t, int8_t>{0x10B78, 1},   std::pair<char32_t, int8_t>{0x10B79, 2},
    std::pair<char32_t, int8_t>{0x10B7A, 3},   std::pair<char32_t, int8_t>{0x10B7B, 4},
    std::pair<char32_t, int8_t>{0x10B7C, 10},  std::pair<char32_t, int8_t>{0x10B7D, 20},
    std::pair<char32_t, int8_t>{0x10B7E, 100}, std::pair<char32_t, int8_t>{0x10BA9, 1},
    std::pair<char32_t, int8_t>{0x10BAA, 2},   std::pair<char32_t, int8_t>{0x10BAB, 3},
    std::pair<char32_t, int8_t>{0x10BAC, 4},   std::pair<char32_t, int8_t>{0x10BAD, 10},
    std::pair<char32_t, int8_t>{0x10BAE, 20},  std::pair<char32_t, int8_t>{0x10BAF, 100},
    std::pair<char32_t, int8_t>{0x10CFA, 1},   std::pair<char32_t, int8_t>{0x10CFB, 5},
    std::pair<char32_t, int8_t>{0x10CFC, 10},  std::pair<char32_t, int8_t>{0x10CFD, 50},
    std::pair<char32_t, int8_t>{0x10CFE, 100}, std::pair<char32_t, int8_t>{0x10D30, 0},
    std::pair<char32_t, int8_t>{0x10D31, 1},   std::pair<char32_t, int8_t>{0x10D32, 2},
    std::pair<char32_t, int8_t>{0x10D33, 3},   std::pair<char32_t, int8_t>{0x10D34, 4},
    std::pair<char32_t, int8_t>{0x10D35, 5},   std::pair<char32_t, int8_t>{0x10D36, 6},
    std::pair<char32_t, int8_t>{0x10D37, 7},   std::pair<char32_t, int8_t>{0x10D38, 8},
    std::pair<char32_t, int8_t>{0x10D39, 9},   std::pair<char32_t, int8_t>{0x10E60, 1},
    std::pair<char32_t, int8_t>{0x10E61, 2},   std::pair<char32_t, int8_t>{0x10E62, 3},
    std::pair<char32_t, int8_t>{0x10E63, 4},   std::pair<char32_t, int8_t>{0x10E64, 5},
    std::pair<char32_t, int8_t>{0x10E65, 6},   std::pair<char32_t, int8_t>{0x10E66, 7},
    std::pair<char32_t, int8_t>{0x10E67, 8},   std::pair<char32_t, int8_t>{0x10E68, 9},
    std::pair<char32_t, int8_t>{0x10E69, 10},  std::pair<char32_t, int8_t>{0x10E6A, 20},
    std::pair<char32_t, int8_t>{0x10E6B, 30},  std::pair<char32_t, int8_t>{0x10E6C, 40},
    std::pair<char32_t, int8_t>{0x10E6D, 50},  std::pair<char32_t, int8_t>{0x10E6E, 60},
    std::pair<char32_t, int8_t>{0x10E6F, 70},  std::pair<char32_t, int8_t>{0x10E70, 80},
    std::pair<char32_t, int8_t>{0x10E71, 90},  std::pair<char32_t, int8_t>{0x10E72, 100},
    std::pair<char32_t, int8_t>{0x10E7B, 1},   std::pair<char32_t, int8_t>{0x10E7C, 1},
    std::pair<char32_t, int8_t>{0x10E7D, 1},   std::pair<char32_t, int8_t>{0x10E7E, 2},
    std::pair<char32_t, int8_t>{0x10F1D, 1},   std::pair<char32_t, int8_t>{0x10F1E, 2},
    std::pair<char32_t, int8_t>{0x10F1F, 3},   std::pair<char32_t, int8_t>{0x10F20, 4},
    std::pair<char32_t, int8_t>{0x10F21, 5},   std::pair<char32_t, int8_t>{0x10F22, 10},
    std::pair<char32_t, int8_t>{0x10F23, 20},  std::pair<char32_t, int8_t>{0x10F24, 30},
    std::pair<char32_t, int8_t>{0x10F25, 100}, std::pair<char32_t, int8_t>{0x10F26, 1},
    std::pair<char32_t, int8_t>{0x10F51, 1},   std::pair<char32_t, int8_t>{0x10F52, 10},
    std::pair<char32_t, int8_t>{0x10F53, 20},  std::pair<char32_t, int8_t>{0x10F54, 100},
    std::pair<char32_t, int8_t>{0x11052, 1},   std::pair<char32_t, int8_t>{0x11053, 2},
    std::pair<char32_t, int8_t>{0x11054, 3},   std::pair<char32_t, int8_t>{0x11055, 4},
    std::pair<char32_t, int8_t>{0x11056, 5},   std::pair<char32_t, int8_t>{0x11057, 6},
    std::pair<char32_t, int8_t>{0x11058, 7},   std::pair<char32_t, int8_t>{0x11059, 8},
    std::pair<char32_t, int8_t>{0x1105A, 9},   std::pair<char32_t, int8_t>{0x1105B, 10},
    std::pair<char32_t, int8_t>{0x1105C, 20},  std::pair<char32_t, int8_t>{0x1105D, 30},
    std::pair<char32_t, int8_t>{0x1105E, 40},  std::pair<char32_t, int8_t>{0x1105F, 50},
    std::pair<char32_t, int8_t>{0x11060, 60},  std::pair<char32_t, int8_t>{0x11061, 70},
    std::pair<char32_t, int8_t>{0x11062, 80},  std::pair<char32_t, int8_t>{0x11063, 90},
    std::pair<char32_t, int8_t>{0x11064, 100}, std::pair<char32_t, int8_t>{0x11066, 0},
    std::pair<char32_t, int8_t>{0x11067, 1},   std::pair<char32_t, int8_t>{0x11068, 2},
    std::pair<char32_t, int8_t>{0x11069, 3},   std::pair<char32_t, int8_t>{0x1106A, 4},
    std::pair<char32_t, int8_t>{0x1106B, 5},   std::pair<char32_t, int8_t>{0x1106C, 6},
    std::pair<char32_t, int8_t>{0x1106D, 7},   std::pair<char32_t, int8_t>{0x1106E, 8},
    std::pair<char32_t, int8_t>{0x1106F, 9},   std::pair<char32_t, int8_t>{0x110F0, 0},
    std::pair<char32_t, int8_t>{0x110F1, 1},   std::pair<char32_t, int8_t>{0x110F2, 2},
    std::pair<char32_t, int8_t>{0x110F3, 3},   std::pair<char32_t, int8_t>{0x110F4, 4},
    std::pair<char32_t, int8_t>{0x110F5, 5},   std::pair<char32_t, int8_t>{0x110F6, 6},
    std::pair<char32_t, int8_t>{0x110F7, 7},   std::pair<char32_t, int8_t>{0x110F8, 8},
    std::pair<char32_t, int8_t>{0x110F9, 9},   std::pair<char32_t, int8_t>{0x11136, 0},
    std::pair<char32_t, int8_t>{0x11137, 1},   std::pair<char32_t, int8_t>{0x11138, 2},
    std::pair<char32_t, int8_t>{0x11139, 3},   std::pair<char32_t, int8_t>{0x1113A, 4},
    std::pair<char32_t, int8_t>{0x1113B, 5},   std::pair<char32_t, int8_t>{0x1113C, 6},
    std::pair<char32_t, int8_t>{0x1113D, 7},   std::pair<char32_t, int8_t>{0x1113E, 8},
    std::pair<char32_t, int8_t>{0x1113F, 9},   std::pair<char32_t, int8_t>{0x111D0, 0},
    std::pair<char32_t, int8_t>{0x111D1, 1},   std::pair<char32_t, int8_t>{0x111D2, 2},
    std::pair<char32_t, int8_t>{0x111D3, 3},   std::pair<char32_t, int8_t>{0x111D4, 4},
    std::pair<char32_t, int8_t>{0x111D5, 5},   std::pair<char32_t, int8_t>{0x111D6, 6},
    std::pair<char32_t, int8_t>{0x111D7, 7},   std::pair<char32_t, int8_t>{0x111D8, 8},
    std::pair<char32_t, int8_t>{0x111D9, 9},   std::pair<char32_t, int8_t>{0x111E1, 1},
    std::pair<char32_t, int8_t>{0x111E2, 2},   std::pair<char32_t, int8_t>{0x111E3, 3},
    std::pair<char32_t, int8_t>{0x111E4, 4},   std::pair<char32_t, int8_t>{0x111E5, 5},
    std::pair<char32_t, int8_t>{0x111E6, 6},   std::pair<char32_t, int8_t>{0x111E7, 7},
    std::pair<char32_t, int8_t>{0x111E8, 8},   std::pair<char32_t, int8_t>{0x111E9, 9},
    std::pair<char32_t, int8_t>{0x111EA, 10},  std::pair<char32_t, int8_t>{0x111EB, 20},
    std::pair<char32_t, int8_t>{0x111EC, 30},  std::pair<char32_t, int8_t>{0x111ED, 40},
    std::pair<char32_t, int8_t>{0x111EE, 50},  std::pair<char32_t, int8_t>{0x111EF, 60},
    std::pair<char32_t, int8_t>{0x111F0, 70},  std::pair<char32_t, int8_t>{0x111F1, 80},
    std::pair<char32_t, int8_t>{0x111F2, 90},  std::pair<char32_t, int8_t>{0x111F3, 100},
    std::pair<char32_t, int8_t>{0x112F0, 0},   std::pair<char32_t, int8_t>{0x112F1, 1},
    std::pair<char32_t, int8_t>{0x112F2, 2},   std::pair<char32_t, int8_t>{0x112F3, 3},
    std::pair<char32_t, int8_t>{0x112F4, 4},   std::pair<char32_t, int8_t>{0x112F5, 5},
    std::pair<char32_t, int8_t>{0x112F6, 6},   std::pair<char32_t, int8_t>{0x112F7, 7},
    std::pair<char32_t, int8_t>{0x112F8, 8},   std::pair<char32_t, int8_t>{0x112F9, 9},
    std::pair<char32_t, int8_t>{0x11450, 0},   std::pair<char32_t, int8_t>{0x11451, 1},
    std::pair<char32_t, int8_t>{0x11452, 2},   std::pair<char32_t, int8_t>{0x11453, 3},
    std::pair<char32_t, int8_t>{0x11454, 4},   std::pair<char32_t, int8_t>{0x11455, 5},
    std::pair<char32_t, int8_t>{0x11456, 6},   std::pair<char32_t, int8_t>{0x11457, 7},
    std::pair<char32_t, int8_t>{0x11458, 8},   std::pair<char32_t, int8_t>{0x11459, 9},
    std::pair<char32_t, int8_t>{0x114D0, 0},   std::pair<char32_t, int8_t>{0x114D1, 1},
    std::pair<char32_t, int8_t>{0x114D2, 2},   std::pair<char32_t, int8_t>{0x114D3, 3},
    std::pair<char32_t, int8_t>{0x114D4, 4},   std::pair<char32_t, int8_t>{0x114D5, 5},
    std::pair<char32_t, int8_t>{0x114D6, 6},   std::pair<char32_t, int8_t>{0x114D7, 7},
    std::pair<char32_t, int8_t>{0x114D8, 8},   std::pair<char32_t, int8_t>{0x114D9, 9},
    std::pair<char32_t, int8_t>{0x11650, 0},   std::pair<char32_t, int8_t>{0x11651, 1},
    std::pair<char32_t, int8_t>{0x11652, 2},   std::pair<char32_t, int8_t>{0x11653, 3},
    std::pair<char32_t, int8_t>{0x11654, 4},   std::pair<char32_t, int8_t>{0x11655, 5},
    std::pair<char32_t, int8_t>{0x11656, 6},   std::pair<char32_t, int8_t>{0x11657, 7},
    std::pair<char32_t, int8_t>{0x11658, 8},   std::pair<char32_t, int8_t>{0x11659, 9},
    std::pair<char32_t, int8_t>{0x116C0, 0},   std::pair<char32_t, int8_t>{0x116C1, 1},
    std::pair<char32_t, int8_t>{0x116C2, 2},   std::pair<char32_t, int8_t>{0x116C3, 3},
    std::pair<char32_t, int8_t>{0x116C4, 4},   std::pair<char32_t, int8_t>{0x116C5, 5},
    std::pair<char32_t, int8_t>{0x116C6, 6},   std::pair<char32_t, int8_t>{0x116C7, 7},
    std::pair<char32_t, int8_t>{0x116C8, 8},   std::pair<char32_t, int8_t>{0x116C9, 9},
    std::pair<char32_t, int8_t>{0x11730, 0},   std::pair<char32_t, int8_t>{0x11731, 1},
    std::pair<char32_t, int8_t>{0x11732, 2},   std::pair<char32_t, int8_t>{0x11733, 3},
    std::pair<char32_t, int8_t>{0x11734, 4},   std::pair<char32_t, int8_t>{0x11735, 5},
    std::pair<char32_t, int8_t>{0x11736, 6},   std::pair<char32_t, int8_t>{0x11737, 7},
    std::pair<char32_t, int8_t>{0x11738, 8},   std::pair<char32_t, int8_t>{0x11739, 9},
    std::pair<char32_t, int8_t>{0x1173A, 10},  std::pair<char32_t, int8_t>{0x1173B, 20},
    std::pair<char32_t, int8_t>{0x118E0, 0},   std::pair<char32_t, int8_t>{0x118E1, 1},
    std::pair<char32_t, int8_t>{0x118E2, 2},   std::pair<char32_t, int8_t>{0x118E3, 3},
    std::pair<char32_t, int8_t>{0x118E4, 4},   std::pair<char32_t, int8_t>{0x118E5, 5},
    std::pair<char32_t, int8_t>{0x118E6, 6},   std::pair<char32_t, int8_t>{0x118E7, 7},
    std::pair<char32_t, int8_t>{0x118E8, 8},   std::pair<char32_t, int8_t>{0x118E9, 9},
    std::pair<char32_t, int8_t>{0x118EA, 10},  std::pair<char32_t, int8_t>{0x118EB, 20},
    std::pair<char32_t, int8_t>{0x118EC, 30},  std::pair<char32_t, int8_t>{0x118ED, 40},
    std::pair<char32_t, int8_t>{0x118EE, 50},  std::pair<char32_t, int8_t>{0x118EF, 60},
    std::pair<char32_t, int8_t>{0x118F0, 70},  std::pair<char32_t, int8_t>{0x118F1, 80},
    std::pair<char32_t, int8_t>{0x118F2, 90},  std::pair<char32_t, int8_t>{0x11C50, 0},
    std::pair<char32_t, int8_t>{0x11C51, 1},   std::pair<char32_t, int8_t>{0x11C52, 2},
    std::pair<char32_t, int8_t>{0x11C53, 3},   std::pair<char32_t, int8_t>{0x11C54, 4},
    std::pair<char32_t, int8_t>{0x11C55, 5},   std::pair<char32_t, int8_t>{0x11C56, 6},
    std::pair<char32_t, int8_t>{0x11C57, 7},   std::pair<char32_t, int8_t>{0x11C58, 8},
    std::pair<char32_t, int8_t>{0x11C59, 9},   std::pair<char32_t, int8_t>{0x11C5A, 1},
    std::pair<char32_t, int8_t>{0x11C5B, 2},   std::pair<char32_t, int8_t>{0x11C5C, 3},
    std::pair<char32_t, int8_t>{0x11C5D, 4},   std::pair<char32_t, int8_t>{0x11C5E, 5},
    std::pair<char32_t, int8_t>{0x11C5F, 6},   std::pair<char32_t, int8_t>{0x11C60, 7},
    std::pair<char32_t, int8_t>{0x11C61, 8},   std::pair<char32_t, int8_t>{0x11C62, 9},
    std::pair<char32_t, int8_t>{0x11C63, 10},  std::pair<char32_t, int8_t>{0x11C64, 20},
    std::pair<char32_t, int8_t>{0x11C65, 30},  std::pair<char32_t, int8_t>{0x11C66, 40},
    std::pair<char32_t, int8_t>{0x11C67, 50},  std::pair<char32_t, int8_t>{0x11C68, 60},
    std::pair<char32_t, int8_t>{0x11C69, 70},  std::pair<char32_t, int8_t>{0x11C6A, 80},
    std::pair<char32_t, int8_t>{0x11C6B, 90},  std::pair<char32_t, int8_t>{0x11C6C, 100},
    std::pair<char32_t, int8_t>{0x11D50, 0},   std::pair<char32_t, int8_t>{0x11D51, 1},
    std::pair<char32_t, int8_t>{0x11D52, 2},   std::pair<char32_t, int8_t>{0x11D53, 3},
    std::pair<char32_t, int8_t>{0x11D54, 4},   std::pair<char32_t, int8_t>{0x11D55, 5},
    std::pair<char32_t, int8_t>{0x11D56, 6},   std::pair<char32_t, int8_t>{0x11D57, 7},
    std::pair<char32_t, int8_t>{0x11D58, 8},   std::pair<char32_t, int8_t>{0x11D59, 9},
    std::pair<char32_t, int8_t>{0x11DA0, 0},   std::pair<char32_t, int8_t>{0x11DA1, 1},
    std::pair<char32_t, int8_t>{0x11DA2, 2},   std::pair<char32_t, int8_t>{0x11DA3, 3},
    std::pair<char32_t, int8_t>{0x11DA4, 4},   std::pair<char32_t, int8_t>{0x11DA5, 5},
    std::pair<char32_t, int8_t>{0x11DA6, 6},   std::pair<char32_t, int8_t>{0x11DA7, 7},
    std::pair<char32_t, int8_t>{0x11DA8, 8},   std::pair<char32_t, int8_t>{0x11DA9, 9},
    std::pair<char32_t, int8_t>{0x11FC0, 1},   std::pair<char32_t, int8_t>{0x11FC1, 1},
    std::pair<char32_t, int8_t>{0x11FC2, 1},   std::pair<char32_t, int8_t>{0x11FC3, 1},
    std::pair<char32_t, int8_t>{0x11FC4, 1},   std::pair<char32_t, int8_t>{0x11FC5, 1},
    std::pair<char32_t, int8_t>{0x11FC6, 3},   std::pair<char32_t, int8_t>{0x11FC7, 3},
    std::pair<char32_t, int8_t>{0x11FC8, 1},   std::pair<char32_t, int8_t>{0x11FC9, 1},
    std::pair<char32_t, int8_t>{0x11FCA, 1},   std::pair<char32_t, int8_t>{0x11FCB, 1},
    std::pair<char32_t, int8_t>{0x11FCC, 1},   std::pair<char32_t, int8_t>{0x11FCD, 3},
    std::pair<char32_t, int8_t>{0x11FCE, 3},   std::pair<char32_t, int8_t>{0x11FCF, 1},
    std::pair<char32_t, int8_t>{0x11FD0, 1},   std::pair<char32_t, int8_t>{0x11FD1, 1},
    std::pair<char32_t, int8_t>{0x11FD2, 1},   std::pair<char32_t, int8_t>{0x11FD3, 3},
    std::pair<char32_t, int8_t>{0x11FD4, 1},   std::pair<char32_t, int8_t>{0x12400, 2},
    std::pair<char32_t, int8_t>{0x12401, 3},   std::pair<char32_t, int8_t>{0x12402, 4},
    std::pair<char32_t, int8_t>{0x12403, 5},   std::pair<char32_t, int8_t>{0x12404, 6},
    std::pair<char32_t, int8_t>{0x12405, 7},   std::pair<char32_t, int8_t>{0x12406, 8},
    std::pair<char32_t, int8_t>{0x12407, 9},   std::pair<char32_t, int8_t>{0x12408, 3},
    std::pair<char32_t, int8_t>{0x12409, 4},   std::pair<char32_t, int8_t>{0x1240A, 5},
    std::pair<char32_t, int8_t>{0x1240B, 6},   std::pair<char32_t, int8_t>{0x1240C, 7},
    std::pair<char32_t, int8_t>{0x1240D, 8},   std::pair<char32_t, int8_t>{0x1240E, 9},
    std::pair<char32_t, int8_t>{0x1240F, 4},   std::pair<char32_t, int8_t>{0x12410, 5},
    std::pair<char32_t, int8_t>{0x12411, 6},   std::pair<char32_t, int8_t>{0x12412, 7},
    std::pair<char32_t, int8_t>{0x12413, 8},   std::pair<char32_t, int8_t>{0x12414, 9},
    std::pair<char32_t, int8_t>{0x12415, 1},   std::pair<char32_t, int8_t>{0x12416, 2},
    std::pair<char32_t, int8_t>{0x12417, 3},   std::pair<char32_t, int8_t>{0x12418, 4},
    std::pair<char32_t, int8_t>{0x12419, 5},   std::pair<char32_t, int8_t>{0x1241A, 6},
    std::pair<char32_t, int8_t>{0x1241B, 7},   std::pair<char32_t, int8_t>{0x1241C, 8},
    std::pair<char32_t, int8_t>{0x1241D, 9},   std::pair<char32_t, int8_t>{0x1241E, 1},
    std::pair<char32_t, int8_t>{0x1241F, 2},   std::pair<char32_t, int8_t>{0x12420, 3},
    std::pair<char32_t, int8_t>{0x12421, 4},   std::pair<char32_t, int8_t>{0x12422, 5},
    std::pair<char32_t, int8_t>{0x12423, 2},   std::pair<char32_t, int8_t>{0x12424, 3},
    std::pair<char32_t, int8_t>{0x12425, 3},   std::pair<char32_t, int8_t>{0x12426, 4},
    std::pair<char32_t, int8_t>{0x12427, 5},   std::pair<char32_t, int8_t>{0x12428, 6},
    std::pair<char32_t, int8_t>{0x12429, 7},   std::pair<char32_t, int8_t>{0x1242A, 8},
    std::pair<char32_t, int8_t>{0x1242B, 9},   std::pair<char32_t, int8_t>{0x1242C, 1},
    std::pair<char32_t, int8_t>{0x1242D, 2},   std::pair<char32_t, int8_t>{0x1242E, 3},
    std::pair<char32_t, int8_t>{0x1242F, 3},   std::pair<char32_t, int8_t>{0x12430, 4},
    std::pair<char32_t, int8_t>{0x12431, 5},   std::pair<char32_t, int8_t>{0x12434, 1},
    std::pair<char32_t, int8_t>{0x12435, 2},   std::pair<char32_t, int8_t>{0x12436, 3},
    std::pair<char32_t, int8_t>{0x12437, 3},   std::pair<char32_t, int8_t>{0x12438, 4},
    std::pair<char32_t, int8_t>{0x12439, 5},   std::pair<char32_t, int8_t>{0x1243A, 3},
    std::pair<char32_t, int8_t>{0x1243B, 3},   std::pair<char32_t, int8_t>{0x1243C, 4},
    std::pair<char32_t, int8_t>{0x1243D, 4},   std::pair<char32_t, int8_t>{0x1243E, 4},
    std::pair<char32_t, int8_t>{0x1243F, 4},   std::pair<char32_t, int8_t>{0x12440, 6},
    std::pair<char32_t, int8_t>{0x12441, 7},   std::pair<char32_t, int8_t>{0x12442, 7},
    std::pair<char32_t, int8_t>{0x12443, 7},   std::pair<char32_t, int8_t>{0x12444, 8},
    std::pair<char32_t, int8_t>{0x12445, 8},   std::pair<char32_t, int8_t>{0x12446, 9},
    std::pair<char32_t, int8_t>{0x12447, 9},   std::pair<char32_t, int8_t>{0x12448, 9},
    std::pair<char32_t, int8_t>{0x12449, 9},   std::pair<char32_t, int8_t>{0x1244A, 2},
    std::pair<char32_t, int8_t>{0x1244B, 3},   std::pair<char32_t, int8_t>{0x1244C, 4},
    std::pair<char32_t, int8_t>{0x1244D, 5},   std::pair<char32_t, int8_t>{0x1244E, 6},
    std::pair<char32_t, int8_t>{0x1244F, 1},   std::pair<char32_t, int8_t>{0x12450, 2},
    std::pair<char32_t, int8_t>{0x12451, 3},   std::pair<char32_t, int8_t>{0x12452, 4},
    std::pair<char32_t, int8_t>{0x12453, 4},   std::pair<char32_t, int8_t>{0x12454, 5},
    std::pair<char32_t, int8_t>{0x12455, 5},   std::pair<char32_t, int8_t>{0x12456, 2},
    std::pair<char32_t, int8_t>{0x12457, 3},   std::pair<char32_t, int8_t>{0x12458, 1},
    std::pair<char32_t, int8_t>{0x12459, 2},   std::pair<char32_t, int8_t>{0x1245A, 1},
    std::pair<char32_t, int8_t>{0x1245B, 2},   std::pair<char32_t, int8_t>{0x1245C, 5},
    std::pair<char32_t, int8_t>{0x1245D, 1},   std::pair<char32_t, int8_t>{0x1245E, 2},
    std::pair<char32_t, int8_t>{0x1245F, 1},   std::pair<char32_t, int8_t>{0x12460, 1},
    std::pair<char32_t, int8_t>{0x12461, 1},   std::pair<char32_t, int8_t>{0x12462, 1},
    std::pair<char32_t, int8_t>{0x12463, 1},   std::pair<char32_t, int8_t>{0x12464, 1},
    std::pair<char32_t, int8_t>{0x12465, 1},   std::pair<char32_t, int8_t>{0x12466, 2},
    std::pair<char32_t, int8_t>{0x12467, 40},  std::pair<char32_t, int8_t>{0x12468, 50},
    std::pair<char32_t, int8_t>{0x12469, 4},   std::pair<char32_t, int8_t>{0x1246A, 5},
    std::pair<char32_t, int8_t>{0x1246B, 6},   std::pair<char32_t, int8_t>{0x1246C, 7},
    std::pair<char32_t, int8_t>{0x1246D, 8},   std::pair<char32_t, int8_t>{0x1246E, 9},
    std::pair<char32_t, int8_t>{0x16A60, 0},   std::pair<char32_t, int8_t>{0x16A61, 1},
    std::pair<char32_t, int8_t>{0x16A62, 2},   std::pair<char32_t, int8_t>{0x16A63, 3},
    std::pair<char32_t, int8_t>{0x16A64, 4},   std::pair<char32_t, int8_t>{0x16A65, 5},
    std::pair<char32_t, int8_t>{0x16A66, 6},   std::pair<char32_t, int8_t>{0x16A67, 7},
    std::pair<char32_t, int8_t>{0x16A68, 8},   std::pair<char32_t, int8_t>{0x16A69, 9},
    std::pair<char32_t, int8_t>{0x16B50, 0},   std::pair<char32_t, int8_t>{0x16B51, 1},
    std::pair<char32_t, int8_t>{0x16B52, 2},   std::pair<char32_t, int8_t>{0x16B53, 3},
    std::pair<char32_t, int8_t>{0x16B54, 4},   std::pair<char32_t, int8_t>{0x16B55, 5},
    std::pair<char32_t, int8_t>{0x16B56, 6},   std::pair<char32_t, int8_t>{0x16B57, 7},
    std::pair<char32_t, int8_t>{0x16B58, 8},   std::pair<char32_t, int8_t>{0x16B59, 9},
    std::pair<char32_t, int8_t>{0x16B5B, 10},  std::pair<char32_t, int8_t>{0x16B5C, 100},
    std::pair<char32_t, int8_t>{0x16E80, 0},   std::pair<char32_t, int8_t>{0x16E81, 1},
    std::pair<char32_t, int8_t>{0x16E82, 2},   std::pair<char32_t, int8_t>{0x16E83, 3},
    std::pair<char32_t, int8_t>{0x16E84, 4},   std::pair<char32_t, int8_t>{0x16E85, 5},
    std::pair<char32_t, int8_t>{0x16E86, 6},   std::pair<char32_t, int8_t>{0x16E87, 7},
    std::pair<char32_t, int8_t>{0x16E88, 8},   std::pair<char32_t, int8_t>{0x16E89, 9},
    std::pair<char32_t, int8_t>{0x16E8A, 10},  std::pair<char32_t, int8_t>{0x16E8B, 11},
    std::pair<char32_t, int8_t>{0x16E8C, 12},  std::pair<char32_t, int8_t>{0x16E8D, 13},
    std::pair<char32_t, int8_t>{0x16E8E, 14},  std::pair<char32_t, int8_t>{0x16E8F, 15},
    std::pair<char32_t, int8_t>{0x16E90, 16},  std::pair<char32_t, int8_t>{0x16E91, 17},
    std::pair<char32_t, int8_t>{0x16E92, 18},  std::pair<char32_t, int8_t>{0x16E93, 19},
    std::pair<char32_t, int8_t>{0x16E94, 1},   std::pair<char32_t, int8_t>{0x16E95, 2},
    std::pair<char32_t, int8_t>{0x16E96, 3},   std::pair<char32_t, int8_t>{0x1D2E0, 0},
    std::pair<char32_t, int8_t>{0x1D2E1, 1},   std::pair<char32_t, int8_t>{0x1D2E2, 2},
    std::pair<char32_t, int8_t>{0x1D2E3, 3},   std::pair<char32_t, int8_t>{0x1D2E4, 4},
    std::pair<char32_t, int8_t>{0x1D2E5, 5},   std::pair<char32_t, int8_t>{0x1D2E6, 6},
    std::pair<char32_t, int8_t>{0x1D2E7, 7},   std::pair<char32_t, int8_t>{0x1D2E8, 8},
    std::pair<char32_t, int8_t>{0x1D2E9, 9},   std::pair<char32_t, int8_t>{0x1D2EA, 10},
    std::pair<char32_t, int8_t>{0x1D2EB, 11},  std::pair<char32_t, int8_t>{0x1D2EC, 12},
    std::pair<char32_t, int8_t>{0x1D2ED, 13},  std::pair<char32_t, int8_t>{0x1D2EE, 14},
    std::pair<char32_t, int8_t>{0x1D2EF, 15},  std::pair<char32_t, int8_t>{0x1D2F0, 16},
    std::pair<char32_t, int8_t>{0x1D2F1, 17},  std::pair<char32_t, int8_t>{0x1D2F2, 18},
    std::pair<char32_t, int8_t>{0x1D2F3, 19},  std::pair<char32_t, int8_t>{0x1D360, 1},
    std::pair<char32_t, int8_t>{0x1D361, 2},   std::pair<char32_t, int8_t>{0x1D362, 3},
    std::pair<char32_t, int8_t>{0x1D363, 4},   std::pair<char32_t, int8_t>{0x1D364, 5},
    std::pair<char32_t, int8_t>{0x1D365, 6},   std::pair<char32_t, int8_t>{0x1D366, 7},
    std::pair<char32_t, int8_t>{0x1D367, 8},   std::pair<char32_t, int8_t>{0x1D368, 9},
    std::pair<char32_t, int8_t>{0x1D369, 10},  std::pair<char32_t, int8_t>{0x1D36A, 20},
    std::pair<char32_t, int8_t>{0x1D36B, 30},  std::pair<char32_t, int8_t>{0x1D36C, 40},
    std::pair<char32_t, int8_t>{0x1D36D, 50},  std::pair<char32_t, int8_t>{0x1D36E, 60},
    std::pair<char32_t, int8_t>{0x1D36F, 70},  std::pair<char32_t, int8_t>{0x1D370, 80},
    std::pair<char32_t, int8_t>{0x1D371, 90},  std::pair<char32_t, int8_t>{0x1D372, 1},
    std::pair<char32_t, int8_t>{0x1D373, 2},   std::pair<char32_t, int8_t>{0x1D374, 3},
    std::pair<char32_t, int8_t>{0x1D375, 4},   std::pair<char32_t, int8_t>{0x1D376, 5},
    std::pair<char32_t, int8_t>{0x1D377, 1},   std::pair<char32_t, int8_t>{0x1D378, 5},
    std::pair<char32_t, int8_t>{0x1D7CE, 0},   std::pair<char32_t, int8_t>{0x1D7CF, 1},
    std::pair<char32_t, int8_t>{0x1D7D0, 2},   std::pair<char32_t, int8_t>{0x1D7D1, 3},
    std::pair<char32_t, int8_t>{0x1D7D2, 4},   std::pair<char32_t, int8_t>{0x1D7D3, 5},
    std::pair<char32_t, int8_t>{0x1D7D4, 6},   std::pair<char32_t, int8_t>{0x1D7D5, 7},
    std::pair<char32_t, int8_t>{0x1D7D6, 8},   std::pair<char32_t, int8_t>{0x1D7D7, 9},
    std::pair<char32_t, int8_t>{0x1D7D8, 0},   std::pair<char32_t, int8_t>{0x1D7D9, 1},
    std::pair<char32_t, int8_t>{0x1D7DA, 2},   std::pair<char32_t, int8_t>{0x1D7DB, 3},
    std::pair<char32_t, int8_t>{0x1D7DC, 4},   std::pair<char32_t, int8_t>{0x1D7DD, 5},
    std::pair<char32_t, int8_t>{0x1D7DE, 6},   std::pair<char32_t, int8_t>{0x1D7DF, 7},
    std::pair<char32_t, int8_t>{0x1D7E0, 8},   std::pair<char32_t, int8_t>{0x1D7E1, 9},
    std::pair<char32_t, int8_t>{0x1D7E2, 0},   std::pair<char32_t, int8_t>{0x1D7E3, 1},
    std::pair<char32_t, int8_t>{0x1D7E4, 2},   std::pair<char32_t, int8_t>{0x1D7E5, 3},
    std::pair<char32_t, int8_t>{0x1D7E6, 4},   std::pair<char32_t, int8_t>{0x1D7E7, 5},
    std::pair<char32_t, int8_t>{0x1D7E8, 6},   std::pair<char32_t, int8_t>{0x1D7E9, 7},
    std::pair<char32_t, int8_t>{0x1D7EA, 8},   std::pair<char32_t, int8_t>{0x1D7EB, 9},
    std::pair<char32_t, int8_t>{0x1D7EC, 0},   std::pair<char32_t, int8_t>{0x1D7ED, 1},
    std::pair<char32_t, int8_t>{0x1D7EE, 2},   std::pair<char32_t, int8_t>{0x1D7EF, 3},
    std::pair<char32_t, int8_t>{0x1D7F0, 4},   std::pair<char32_t, int8_t>{0x1D7F1, 5},
    std::pair<char32_t, int8_t>{0x1D7F2, 6},   std::pair<char32_t, int8_t>{0x1D7F3, 7},
    std::pair<char32_t, int8_t>{0x1D7F4, 8},   std::pair<char32_t, int8_t>{0x1D7F5, 9},
    std::pair<char32_t, int8_t>{0x1D7F6, 0},   std::pair<char32_t, int8_t>{0x1D7F7, 1},
    std::pair<char32_t, int8_t>{0x1D7F8, 2},   std::pair<char32_t, int8_t>{0x1D7F9, 3},
    std::pair<char32_t, int8_t>{0x1D7FA, 4},   std::pair<char32_t, int8_t>{0x1D7FB, 5},
    std::pair<char32_t, int8_t>{0x1D7FC, 6},   std::pair<char32_t, int8_t>{0x1D7FD, 7},
    std::pair<char32_t, int8_t>{0x1D7FE, 8},   std::pair<char32_t, int8_t>{0x1D7FF, 9},
    std::pair<char32_t, int8_t>{0x1E140, 0},   std::pair<char32_t, int8_t>{0x1E141, 1},
    std::pair<char32_t, int8_t>{0x1E142, 2},   std::pair<char32_t, int8_t>{0x1E143, 3},
    std::pair<char32_t, int8_t>{0x1E144, 4},   std::pair<char32_t, int8_t>{0x1E145, 5},
    std::pair<char32_t, int8_t>{0x1E146, 6},   std::pair<char32_t, int8_t>{0x1E147, 7},
    std::pair<char32_t, int8_t>{0x1E148, 8},   std::pair<char32_t, int8_t>{0x1E149, 9},
    std::pair<char32_t, int8_t>{0x1E2F0, 0},   std::pair<char32_t, int8_t>{0x1E2F1, 1},
    std::pair<char32_t, int8_t>{0x1E2F2, 2},   std::pair<char32_t, int8_t>{0x1E2F3, 3},
    std::pair<char32_t, int8_t>{0x1E2F4, 4},   std::pair<char32_t, int8_t>{0x1E2F5, 5},
    std::pair<char32_t, int8_t>{0x1E2F6, 6},   std::pair<char32_t, int8_t>{0x1E2F7, 7},
    std::pair<char32_t, int8_t>{0x1E2F8, 8},   std::pair<char32_t, int8_t>{0x1E2F9, 9},
    std::pair<char32_t, int8_t>{0x1E8C7, 1},   std::pair<char32_t, int8_t>{0x1E8C8, 2},
    std::pair<char32_t, int8_t>{0x1E8C9, 3},   std::pair<char32_t, int8_t>{0x1E8CA, 4},
    std::pair<char32_t, int8_t>{0x1E8CB, 5},   std::pair<char32_t, int8_t>{0x1E8CC, 6},
    std::pair<char32_t, int8_t>{0x1E8CD, 7},   std::pair<char32_t, int8_t>{0x1E8CE, 8},
    std::pair<char32_t, int8_t>{0x1E8CF, 9},   std::pair<char32_t, int8_t>{0x1E950, 0},
    std::pair<char32_t, int8_t>{0x1E951, 1},   std::pair<char32_t, int8_t>{0x1E952, 2},
    std::pair<char32_t, int8_t>{0x1E953, 3},   std::pair<char32_t, int8_t>{0x1E954, 4},
    std::pair<char32_t, int8_t>{0x1E955, 5},   std::pair<char32_t, int8_t>{0x1E956, 6},
    std::pair<char32_t, int8_t>{0x1E957, 7},   std::pair<char32_t, int8_t>{0x1E958, 8},
    std::pair<char32_t, int8_t>{0x1E959, 9},   std::pair<char32_t, int8_t>{0x1EC71, 1},
    std::pair<char32_t, int8_t>{0x1EC72, 2},   std::pair<char32_t, int8_t>{0x1EC73, 3},
    std::pair<char32_t, int8_t>{0x1EC74, 4},   std::pair<char32_t, int8_t>{0x1EC75, 5},
    std::pair<char32_t, int8_t>{0x1EC76, 6},   std::pair<char32_t, int8_t>{0x1EC77, 7},
    std::pair<char32_t, int8_t>{0x1EC78, 8},   std::pair<char32_t, int8_t>{0x1EC79, 9},
    std::pair<char32_t, int8_t>{0x1EC7A, 10},  std::pair<char32_t, int8_t>{0x1EC7B, 20},
    std::pair<char32_t, int8_t>{0x1EC7C, 30},  std::pair<char32_t, int8_t>{0x1EC7D, 40},
    std::pair<char32_t, int8_t>{0x1EC7E, 50},  std::pair<char32_t, int8_t>{0x1EC7F, 60},
    std::pair<char32_t, int8_t>{0x1EC80, 70},  std::pair<char32_t, int8_t>{0x1EC81, 80},
    std::pair<char32_t, int8_t>{0x1EC82, 90},  std::pair<char32_t, int8_t>{0x1EC83, 100},
    std::pair<char32_t, int8_t>{0x1ECA3, 1},   std::pair<char32_t, int8_t>{0x1ECA4, 2},
    std::pair<char32_t, int8_t>{0x1ECA5, 3},   std::pair<char32_t, int8_t>{0x1ECA6, 4},
    std::pair<char32_t, int8_t>{0x1ECA7, 5},   std::pair<char32_t, int8_t>{0x1ECA8, 6},
    std::pair<char32_t, int8_t>{0x1ECA9, 7},   std::pair<char32_t, int8_t>{0x1ECAA, 8},
    std::pair<char32_t, int8_t>{0x1ECAB, 9},   std::pair<char32_t, int8_t>{0x1ECAD, 1},
    std::pair<char32_t, int8_t>{0x1ECAE, 1},   std::pair<char32_t, int8_t>{0x1ECAF, 3},
    std::pair<char32_t, int8_t>{0x1ECB1, 1},   std::pair<char32_t, int8_t>{0x1ECB2, 2},
    std::pair<char32_t, int8_t>{0x1ED01, 1},   std::pair<char32_t, int8_t>{0x1ED02, 2},
    std::pair<char32_t, int8_t>{0x1ED03, 3},   std::pair<char32_t, int8_t>{0x1ED04, 4},
    std::pair<char32_t, int8_t>{0x1ED05, 5},   std::pair<char32_t, int8_t>{0x1ED06, 6},
    std::pair<char32_t, int8_t>{0x1ED07, 7},   std::pair<char32_t, int8_t>{0x1ED08, 8},
    std::pair<char32_t, int8_t>{0x1ED09, 9},   std::pair<char32_t, int8_t>{0x1ED0A, 10},
    std::pair<char32_t, int8_t>{0x1ED0B, 20},  std::pair<char32_t, int8_t>{0x1ED0C, 30},
    std::pair<char32_t, int8_t>{0x1ED0D, 40},  std::pair<char32_t, int8_t>{0x1ED0E, 50},
    std::pair<char32_t, int8_t>{0x1ED0F, 60},  std::pair<char32_t, int8_t>{0x1ED10, 70},
    std::pair<char32_t, int8_t>{0x1ED11, 80},  std::pair<char32_t, int8_t>{0x1ED12, 90},
    std::pair<char32_t, int8_t>{0x1ED13, 100}, std::pair<char32_t, int8_t>{0x1ED2F, 2},
    std::pair<char32_t, int8_t>{0x1ED30, 3},   std::pair<char32_t, int8_t>{0x1ED31, 4},
    std::pair<char32_t, int8_t>{0x1ED32, 5},   std::pair<char32_t, int8_t>{0x1ED33, 6},
    std::pair<char32_t, int8_t>{0x1ED34, 7},   std::pair<char32_t, int8_t>{0x1ED35, 8},
    std::pair<char32_t, int8_t>{0x1ED36, 9},   std::pair<char32_t, int8_t>{0x1ED37, 10},
    std::pair<char32_t, int8_t>{0x1ED3C, 1},   std::pair<char32_t, int8_t>{0x1ED3D, 1},
    std::pair<char32_t, int8_t>{0x1F100, 0},   std::pair<char32_t, int8_t>{0x1F101, 0},
    std::pair<char32_t, int8_t>{0x1F102, 1},   std::pair<char32_t, int8_t>{0x1F103, 2},
    std::pair<char32_t, int8_t>{0x1F104, 3},   std::pair<char32_t, int8_t>{0x1F105, 4},
    std::pair<char32_t, int8_t>{0x1F106, 5},   std::pair<char32_t, int8_t>{0x1F107, 6},
    std::pair<char32_t, int8_t>{0x1F108, 7},   std::pair<char32_t, int8_t>{0x1F109, 8},
    std::pair<char32_t, int8_t>{0x1F10A, 9},   std::pair<char32_t, int8_t>{0x1F10B, 0},
    std::pair<char32_t, int8_t>{0x1F10C, 0},   std::pair<char32_t, int8_t>{0x20001, 7},
    std::pair<char32_t, int8_t>{0x20064, 4},   std::pair<char32_t, int8_t>{0x200E2, 4},
    std::pair<char32_t, int8_t>{0x20121, 5},   std::pair<char32_t, int8_t>{0x2092A, 1},
    std::pair<char32_t, int8_t>{0x20983, 30},  std::pair<char32_t, int8_t>{0x2098C, 40},
    std::pair<char32_t, int8_t>{0x2099C, 40},  std::pair<char32_t, int8_t>{0x20AEA, 6},
    std::pair<char32_t, int8_t>{0x20AFD, 3},   std::pair<char32_t, int8_t>{0x20B19, 3},
    std::pair<char32_t, int8_t>{0x22390, 2},   std::pair<char32_t, int8_t>{0x22998, 3},
    std::pair<char32_t, int8_t>{0x23B1B, 3},   std::pair<char32_t, int8_t>{0x2626D, 4},
    std::pair<char32_t, int8_t>{0x2F890, 9},   std::pair<char32_t, int8_t>{0x110000, 0}};
static constexpr std::array __numeric_data16 = {
    std::pair<char32_t, int16_t>{0x0BF2, 1000},   std::pair<char32_t, int16_t>{0x0D72, 1000},
    std::pair<char32_t, int16_t>{0x137C, 10000},  std::pair<char32_t, int16_t>{0x216E, 500},
    std::pair<char32_t, int16_t>{0x216F, 1000},   std::pair<char32_t, int16_t>{0x217E, 500},
    std::pair<char32_t, int16_t>{0x217F, 1000},   std::pair<char32_t, int16_t>{0x2180, 1000},
    std::pair<char32_t, int16_t>{0x2181, 5000},   std::pair<char32_t, int16_t>{0x2182, 10000},
    std::pair<char32_t, int16_t>{0x4E07, 10000},  std::pair<char32_t, int16_t>{0x4EDF, 1000},
    std::pair<char32_t, int16_t>{0x5343, 1000},   std::pair<char32_t, int16_t>{0x842C, 10000},
    std::pair<char32_t, int16_t>{0x9621, 1000},   std::pair<char32_t, int16_t>{0x1011A, 200},
    std::pair<char32_t, int16_t>{0x1011B, 300},   std::pair<char32_t, int16_t>{0x1011C, 400},
    std::pair<char32_t, int16_t>{0x1011D, 500},   std::pair<char32_t, int16_t>{0x1011E, 600},
    std::pair<char32_t, int16_t>{0x1011F, 700},   std::pair<char32_t, int16_t>{0x10120, 800},
    std::pair<char32_t, int16_t>{0x10121, 900},   std::pair<char32_t, int16_t>{0x10122, 1000},
    std::pair<char32_t, int16_t>{0x10123, 2000},  std::pair<char32_t, int16_t>{0x10124, 3000},
    std::pair<char32_t, int16_t>{0x10125, 4000},  std::pair<char32_t, int16_t>{0x10126, 5000},
    std::pair<char32_t, int16_t>{0x10127, 6000},  std::pair<char32_t, int16_t>{0x10128, 7000},
    std::pair<char32_t, int16_t>{0x10129, 8000},  std::pair<char32_t, int16_t>{0x1012A, 9000},
    std::pair<char32_t, int16_t>{0x1012B, 10000}, std::pair<char32_t, int16_t>{0x1012C, 20000},
    std::pair<char32_t, int16_t>{0x1012D, 30000}, std::pair<char32_t, int16_t>{0x10145, 500},
    std::pair<char32_t, int16_t>{0x10146, 5000},  std::pair<char32_t, int16_t>{0x1014C, 500},
    std::pair<char32_t, int16_t>{0x1014D, 1000},  std::pair<char32_t, int16_t>{0x1014E, 5000},
    std::pair<char32_t, int16_t>{0x10153, 500},   std::pair<char32_t, int16_t>{0x10154, 1000},
    std::pair<char32_t, int16_t>{0x10155, 10000}, std::pair<char32_t, int16_t>{0x1016B, 300},
    std::pair<char32_t, int16_t>{0x1016C, 500},   std::pair<char32_t, int16_t>{0x1016D, 500},
    std::pair<char32_t, int16_t>{0x1016E, 500},   std::pair<char32_t, int16_t>{0x1016F, 500},
    std::pair<char32_t, int16_t>{0x10170, 500},   std::pair<char32_t, int16_t>{0x10171, 1000},
    std::pair<char32_t, int16_t>{0x10172, 5000},  std::pair<char32_t, int16_t>{0x102F4, 200},
    std::pair<char32_t, int16_t>{0x102F5, 300},   std::pair<char32_t, int16_t>{0x102F6, 400},
    std::pair<char32_t, int16_t>{0x102F7, 500},   std::pair<char32_t, int16_t>{0x102F8, 600},
    std::pair<char32_t, int16_t>{0x102F9, 700},   std::pair<char32_t, int16_t>{0x102FA, 800},
    std::pair<char32_t, int16_t>{0x102FB, 900},   std::pair<char32_t, int16_t>{0x1034A, 900},
    std::pair<char32_t, int16_t>{0x1085E, 1000},  std::pair<char32_t, int16_t>{0x1085F, 10000},
    std::pair<char32_t, int16_t>{0x109D3, 200},   std::pair<char32_t, int16_t>{0x109D4, 300},
    std::pair<char32_t, int16_t>{0x109D5, 400},   std::pair<char32_t, int16_t>{0x109D6, 500},
    std::pair<char32_t, int16_t>{0x109D7, 600},   std::pair<char32_t, int16_t>{0x109D8, 700},
    std::pair<char32_t, int16_t>{0x109D9, 800},   std::pair<char32_t, int16_t>{0x109DA, 900},
    std::pair<char32_t, int16_t>{0x109DB, 1000},  std::pair<char32_t, int16_t>{0x109DC, 2000},
    std::pair<char32_t, int16_t>{0x109DD, 3000},  std::pair<char32_t, int16_t>{0x109DE, 4000},
    std::pair<char32_t, int16_t>{0x109DF, 5000},  std::pair<char32_t, int16_t>{0x109E0, 6000},
    std::pair<char32_t, int16_t>{0x109E1, 7000},  std::pair<char32_t, int16_t>{0x109E2, 8000},
    std::pair<char32_t, int16_t>{0x109E3, 9000},  std::pair<char32_t, int16_t>{0x109E4, 10000},
    std::pair<char32_t, int16_t>{0x109E5, 20000}, std::pair<char32_t, int16_t>{0x109E6, 30000},
    std::pair<char32_t, int16_t>{0x10A47, 1000},  std::pair<char32_t, int16_t>{0x10B5F, 1000},
    std::pair<char32_t, int16_t>{0x10B7F, 1000},  std::pair<char32_t, int16_t>{0x10CFF, 1000},
    std::pair<char32_t, int16_t>{0x10E73, 200},   std::pair<char32_t, int16_t>{0x10E74, 300},
    std::pair<char32_t, int16_t>{0x10E75, 400},   std::pair<char32_t, int16_t>{0x10E76, 500},
    std::pair<char32_t, int16_t>{0x10E77, 600},   std::pair<char32_t, int16_t>{0x10E78, 700},
    std::pair<char32_t, int16_t>{0x10E79, 800},   std::pair<char32_t, int16_t>{0x10E7A, 900},
    std::pair<char32_t, int16_t>{0x11065, 1000},  std::pair<char32_t, int16_t>{0x111F4, 1000},
    std::pair<char32_t, int16_t>{0x16B5D, 10000}, std::pair<char32_t, int16_t>{0x1EC84, 200},
    std::pair<char32_t, int16_t>{0x1EC85, 300},   std::pair<char32_t, int16_t>{0x1EC86, 400},
    std::pair<char32_t, int16_t>{0x1EC87, 500},   std::pair<char32_t, int16_t>{0x1EC88, 600},
    std::pair<char32_t, int16_t>{0x1EC89, 700},   std::pair<char32_t, int16_t>{0x1EC8A, 800},
    std::pair<char32_t, int16_t>{0x1EC8B, 900},   std::pair<char32_t, int16_t>{0x1EC8C, 1000},
    std::pair<char32_t, int16_t>{0x1EC8D, 2000},  std::pair<char32_t, int16_t>{0x1EC8E, 3000},
    std::pair<char32_t, int16_t>{0x1EC8F, 4000},  std::pair<char32_t, int16_t>{0x1EC90, 5000},
    std::pair<char32_t, int16_t>{0x1EC91, 6000},  std::pair<char32_t, int16_t>{0x1EC92, 7000},
    std::pair<char32_t, int16_t>{0x1EC93, 8000},  std::pair<char32_t, int16_t>{0x1EC94, 9000},
    std::pair<char32_t, int16_t>{0x1EC95, 10000}, std::pair<char32_t, int16_t>{0x1EC96, 20000},
    std::pair<char32_t, int16_t>{0x1EC97, 30000}, std::pair<char32_t, int16_t>{0x1ECB3, 10000},
    std::pair<char32_t, int16_t>{0x1ED14, 200},   std::pair<char32_t, int16_t>{0x1ED15, 300},
    std::pair<char32_t, int16_t>{0x1ED16, 400},   std::pair<char32_t, int16_t>{0x1ED17, 500},
    std::pair<char32_t, int16_t>{0x1ED18, 600},   std::pair<char32_t, int16_t>{0x1ED19, 700},
    std::pair<char32_t, int16_t>{0x1ED1A, 800},   std::pair<char32_t, int16_t>{0x1ED1B, 900},
    std::pair<char32_t, int16_t>{0x1ED1C, 1000},  std::pair<char32_t, int16_t>{0x1ED1D, 2000},
    std::pair<char32_t, int16_t>{0x1ED1E, 3000},  std::pair<char32_t, int16_t>{0x1ED1F, 4000},
    std::pair<char32_t, int16_t>{0x1ED20, 5000},  std::pair<char32_t, int16_t>{0x1ED21, 6000},
    std::pair<char32_t, int16_t>{0x1ED22, 7000},  std::pair<char32_t, int16_t>{0x1ED23, 8000},
    std::pair<char32_t, int16_t>{0x1ED24, 9000},  std::pair<char32_t, int16_t>{0x1ED25, 10000},
    std::pair<char32_t, int16_t>{0x1ED26, 20000}, std::pair<char32_t, int16_t>{0x1ED27, 30000},
    std::pair<char32_t, int16_t>{0x1ED38, 400},   std::pair<char32_t, int16_t>{0x1ED39, 600},
    std::pair<char32_t, int16_t>{0x1ED3A, 2000},  std::pair<char32_t, int16_t>{0x1ED3B, 10000},
    std::pair<char32_t, int16_t>{0x110000, 0}};
static constexpr std::array __numeric_data32 = {std::pair<char32_t, int32_t>{0x2187, 50000},
                                                std::pair<char32_t, int32_t>{0x2188, 100000},
                                                std::pair<char32_t, int32_t>{0x4EBF, 100000000},
                                                std::pair<char32_t, int32_t>{0x5104, 100000000},
                                                std::pair<char32_t, int32_t>{0x1012E, 40000},
                                                std::pair<char32_t, int32_t>{0x1012F, 50000},
                                                std::pair<char32_t, int32_t>{0x10130, 60000},
                                                std::pair<char32_t, int32_t>{0x10131, 70000},
                                                std::pair<char32_t, int32_t>{0x10132, 80000},
                                                std::pair<char32_t, int32_t>{0x10133, 90000},
                                                std::pair<char32_t, int32_t>{0x10147, 50000},
                                                std::pair<char32_t, int32_t>{0x10156, 50000},
                                                std::pair<char32_t, int32_t>{0x109E7, 40000},
                                                std::pair<char32_t, int32_t>{0x109E8, 50000},
                                                std::pair<char32_t, int32_t>{0x109E9, 60000},
                                                std::pair<char32_t, int32_t>{0x109EA, 70000},
                                                std::pair<char32_t, int32_t>{0x109EB, 80000},
                                                std::pair<char32_t, int32_t>{0x109EC, 90000},
                                                std::pair<char32_t, int32_t>{0x109ED, 100000},
                                                std::pair<char32_t, int32_t>{0x109EE, 200000},
                                                std::pair<char32_t, int32_t>{0x109EF, 300000},
                                                std::pair<char32_t, int32_t>{0x109F0, 400000},
                                                std::pair<char32_t, int32_t>{0x109F1, 500000},
                                                std::pair<char32_t, int32_t>{0x109F2, 600000},
                                                std::pair<char32_t, int32_t>{0x109F3, 700000},
                                                std::pair<char32_t, int32_t>{0x109F4, 800000},
                                                std::pair<char32_t, int32_t>{0x109F5, 900000},
                                                std::pair<char32_t, int32_t>{0x12432, 216000},
                                                std::pair<char32_t, int32_t>{0x12433, 432000},
                                                std::pair<char32_t, int32_t>{0x16B5E, 1000000},
                                                std::pair<char32_t, int32_t>{0x16B5F, 100000000},
                                                std::pair<char32_t, int32_t>{0x1EC98, 40000},
                                                std::pair<char32_t, int32_t>{0x1EC99, 50000},
                                                std::pair<char32_t, int32_t>{0x1EC9A, 60000},
                                                std::pair<char32_t, int32_t>{0x1EC9B, 70000},
                                                std::pair<char32_t, int32_t>{0x1EC9C, 80000},
                                                std::pair<char32_t, int32_t>{0x1EC9D, 90000},
                                                std::pair<char32_t, int32_t>{0x1EC9E, 100000},
                                                std::pair<char32_t, int32_t>{0x1EC9F, 200000},
                                                std::pair<char32_t, int32_t>{0x1ECA0, 100000},
                                                std::pair<char32_t, int32_t>{0x1ECA1, 10000000},
                                                std::pair<char32_t, int32_t>{0x1ECA2, 20000000},
                                                std::pair<char32_t, int32_t>{0x1ECB4, 100000},
                                                std::pair<char32_t, int32_t>{0x1ED28, 40000},
                                                std::pair<char32_t, int32_t>{0x1ED29, 50000},
                                                std::pair<char32_t, int32_t>{0x1ED2A, 60000},
                                                std::pair<char32_t, int32_t>{0x1ED2B, 70000},
                                                std::pair<char32_t, int32_t>{0x1ED2C, 80000},
                                                std::pair<char32_t, int32_t>{0x1ED2D, 90000},
                                                std::pair<char32_t, int32_t>{0x110000, 0}};
static constexpr std::array __numeric_data64 = {
    std::pair<char32_t, int64_t>{0x5146, 1000000000000},
    std::pair<char32_t, int64_t>{0x16B60, 10000000000},
    std::pair<char32_t, int64_t>{0x16B61, 1000000000000},
    std::pair<char32_t, int64_t>{0x110000, 0}};
static constexpr std::array __numeric_data_d = {
    std::pair<char32_t, int16_t>{0x00BC, 4},    std::pair<char32_t, int16_t>{0x00BD, 2},
    std::pair<char32_t, int16_t>{0x00BE, 4},    std::pair<char32_t, int16_t>{0x09F4, 16},
    std::pair<char32_t, int16_t>{0x09F5, 8},    std::pair<char32_t, int16_t>{0x09F6, 16},
    std::pair<char32_t, int16_t>{0x09F7, 4},    std::pair<char32_t, int16_t>{0x09F8, 4},
    std::pair<char32_t, int16_t>{0x0B72, 4},    std::pair<char32_t, int16_t>{0x0B73, 2},
    std::pair<char32_t, int16_t>{0x0B74, 4},    std::pair<char32_t, int16_t>{0x0B75, 16},
    std::pair<char32_t, int16_t>{0x0B76, 8},    std::pair<char32_t, int16_t>{0x0B77, 16},
    std::pair<char32_t, int16_t>{0x0D58, 160},  std::pair<char32_t, int16_t>{0x0D59, 40},
    std::pair<char32_t, int16_t>{0x0D5A, 80},   std::pair<char32_t, int16_t>{0x0D5B, 20},
    std::pair<char32_t, int16_t>{0x0D5C, 10},   std::pair<char32_t, int16_t>{0x0D5D, 20},
    std::pair<char32_t, int16_t>{0x0D5E, 5},    std::pair<char32_t, int16_t>{0x0D73, 4},
    std::pair<char32_t, int16_t>{0x0D74, 2},    std::pair<char32_t, int16_t>{0x0D75, 4},
    std::pair<char32_t, int16_t>{0x0D76, 16},   std::pair<char32_t, int16_t>{0x0D77, 8},
    std::pair<char32_t, int16_t>{0x0D78, 16},   std::pair<char32_t, int16_t>{0x0F2A, 2},
    std::pair<char32_t, int16_t>{0x0F2B, 2},    std::pair<char32_t, int16_t>{0x0F2C, 2},
    std::pair<char32_t, int16_t>{0x0F2D, 2},    std::pair<char32_t, int16_t>{0x0F2E, 2},
    std::pair<char32_t, int16_t>{0x0F2F, 2},    std::pair<char32_t, int16_t>{0x0F30, 2},
    std::pair<char32_t, int16_t>{0x0F31, 2},    std::pair<char32_t, int16_t>{0x0F32, 2},
    std::pair<char32_t, int16_t>{0x0F33, 2},    std::pair<char32_t, int16_t>{0x2150, 7},
    std::pair<char32_t, int16_t>{0x2151, 9},    std::pair<char32_t, int16_t>{0x2152, 10},
    std::pair<char32_t, int16_t>{0x2153, 3},    std::pair<char32_t, int16_t>{0x2154, 3},
    std::pair<char32_t, int16_t>{0x2155, 5},    std::pair<char32_t, int16_t>{0x2156, 5},
    std::pair<char32_t, int16_t>{0x2157, 5},    std::pair<char32_t, int16_t>{0x2158, 5},
    std::pair<char32_t, int16_t>{0x2159, 6},    std::pair<char32_t, int16_t>{0x215A, 6},
    std::pair<char32_t, int16_t>{0x215B, 8},    std::pair<char32_t, int16_t>{0x215C, 8},
    std::pair<char32_t, int16_t>{0x215D, 8},    std::pair<char32_t, int16_t>{0x215E, 8},
    std::pair<char32_t, int16_t>{0x2CFD, 2},    std::pair<char32_t, int16_t>{0xA830, 4},
    std::pair<char32_t, int16_t>{0xA831, 2},    std::pair<char32_t, int16_t>{0xA832, 4},
    std::pair<char32_t, int16_t>{0xA833, 16},   std::pair<char32_t, int16_t>{0xA834, 8},
    std::pair<char32_t, int16_t>{0xA835, 16},   std::pair<char32_t, int16_t>{0x10140, 4},
    std::pair<char32_t, int16_t>{0x10141, 2},   std::pair<char32_t, int16_t>{0x10175, 2},
    std::pair<char32_t, int16_t>{0x10176, 2},   std::pair<char32_t, int16_t>{0x10177, 3},
    std::pair<char32_t, int16_t>{0x10178, 4},   std::pair<char32_t, int16_t>{0x1018B, 4},
    std::pair<char32_t, int16_t>{0x109BC, 12},  std::pair<char32_t, int16_t>{0x109BD, 2},
    std::pair<char32_t, int16_t>{0x109F6, 12},  std::pair<char32_t, int16_t>{0x109F7, 12},
    std::pair<char32_t, int16_t>{0x109F8, 12},  std::pair<char32_t, int16_t>{0x109F9, 12},
    std::pair<char32_t, int16_t>{0x109FA, 12},  std::pair<char32_t, int16_t>{0x109FB, 12},
    std::pair<char32_t, int16_t>{0x109FC, 12},  std::pair<char32_t, int16_t>{0x109FD, 12},
    std::pair<char32_t, int16_t>{0x109FE, 12},  std::pair<char32_t, int16_t>{0x109FF, 12},
    std::pair<char32_t, int16_t>{0x10A48, 2},   std::pair<char32_t, int16_t>{0x10E7B, 2},
    std::pair<char32_t, int16_t>{0x10E7C, 4},   std::pair<char32_t, int16_t>{0x10E7D, 3},
    std::pair<char32_t, int16_t>{0x10E7E, 3},   std::pair<char32_t, int16_t>{0x10F26, 2},
    std::pair<char32_t, int16_t>{0x11FC0, 320}, std::pair<char32_t, int16_t>{0x11FC1, 160},
    std::pair<char32_t, int16_t>{0x11FC2, 80},  std::pair<char32_t, int16_t>{0x11FC3, 64},
    std::pair<char32_t, int16_t>{0x11FC4, 40},  std::pair<char32_t, int16_t>{0x11FC5, 32},
    std::pair<char32_t, int16_t>{0x11FC6, 80},  std::pair<char32_t, int16_t>{0x11FC7, 64},
    std::pair<char32_t, int16_t>{0x11FC8, 20},  std::pair<char32_t, int16_t>{0x11FC9, 16},
    std::pair<char32_t, int16_t>{0x11FCA, 16},  std::pair<char32_t, int16_t>{0x11FCB, 10},
    std::pair<char32_t, int16_t>{0x11FCC, 8},   std::pair<char32_t, int16_t>{0x11FCD, 20},
    std::pair<char32_t, int16_t>{0x11FCE, 16},  std::pair<char32_t, int16_t>{0x11FCF, 5},
    std::pair<char32_t, int16_t>{0x11FD0, 4},   std::pair<char32_t, int16_t>{0x11FD1, 2},
    std::pair<char32_t, int16_t>{0x11FD2, 2},   std::pair<char32_t, int16_t>{0x11FD3, 4},
    std::pair<char32_t, int16_t>{0x11FD4, 320}, std::pair<char32_t, int16_t>{0x1245A, 3},
    std::pair<char32_t, int16_t>{0x1245B, 3},   std::pair<char32_t, int16_t>{0x1245C, 6},
    std::pair<char32_t, int16_t>{0x1245D, 3},   std::pair<char32_t, int16_t>{0x1245E, 3},
    std::pair<char32_t, int16_t>{0x1245F, 8},   std::pair<char32_t, int16_t>{0x12460, 4},
    std::pair<char32_t, int16_t>{0x12461, 6},   std::pair<char32_t, int16_t>{0x12462, 4},
    std::pair<char32_t, int16_t>{0x12463, 4},   std::pair<char32_t, int16_t>{0x12464, 2},
    std::pair<char32_t, int16_t>{0x12465, 3},   std::pair<char32_t, int16_t>{0x12466, 3},
    std::pair<char32_t, int16_t>{0x1ECAD, 4},   std::pair<char32_t, int16_t>{0x1ECAE, 2},
    std::pair<char32_t, int16_t>{0x1ECAF, 4},   std::pair<char32_t, int16_t>{0x1ED3C, 2},
    std::pair<char32_t, int16_t>{0x1ED3D, 6},   std::pair<char32_t, int16_t>{0x110000, 0}};
enum class property {
    ahex,
    ascii_hex_digit = ahex,
    alpha,
    alphabetic = alpha,
    bidi_c,
    bidi_control = bidi_c,
    bidi_m,
    bidi_mirrored = bidi_m,
    cased,
    ci,
    case_ignorable = ci,
    cwcf,
    changes_when_casefolded = cwcf,
    cwcm,
    changes_when_casemapped = cwcm,
    cwkcf,
    changes_when_nfkc_casefolded = cwkcf,
    cwl,
    changes_when_lowercased = cwl,
    cwt,
    changes_when_titlecased = cwt,
    cwu,
    changes_when_uppercased = cwu,
    dash,
    dep,
    deprecated = dep,
    di,
    default_ignorable_code_point = di,
    dia,
    diacritic = dia,
    emoji,
    emoji_component,
    emoji_modifier,
    emoji_modifier_base,
    emoji_presentation,
    ext,
    extender = ext,
    extended_pictographic,
    gr_base,
    grapheme_base = gr_base,
    gr_ext,
    grapheme_extend = gr_ext,
    hex,
    hex_digit = hex,
    idc,
    id_continue = idc,
    ideo,
    ideographic = ideo,
    ids,
    id_start = ids,
    idsb,
    ids_binary_operator = idsb,
    idst,
    ids_trinary_operator = idst,
    join_c,
    join_control = join_c,
    loe,
    logical_order_exception = loe,
    lower,
    lowercase = lower,
    math,
    nchar,
    noncharacter_code_point = nchar,
    pat_syn,
    pattern_syntax = pat_syn,
    pat_ws,
    pattern_white_space = pat_ws,
    pcm,
    prepended_concatenation_mark = pcm,
    qmark,
    quotation_mark = qmark,
    radical,
    ri,
    regional_indicator = ri,
    sd,
    soft_dotted = sd,
    sterm,
    sentence_terminal = sterm,
    term,
    terminal_punctuation = term,
    uideo,
    unified_ideograph = uideo,
    upper,
    uppercase = upper,
    vs,
    variation_selector = vs,
    wspace,
    white_space = wspace,
    space = wspace,
    xidc,
    xid_continue = xidc,
    xids,
    xid_start = xids,
    __max
};
static constexpr __range_array<7> __prop_ahex_data = {
    {__range_array_elem{0x0000, 0} /*48*/, __range_array_elem{0x0030, 1} /*10*/,
     __range_array_elem{0x003A, 0} /*7*/, __range_array_elem{0x0041, 1} /*6*/,
     __range_array_elem{0x0047, 0} /*26*/, __range_array_elem{0x0061, 1} /*6*/,
     __range_array_elem{0x0067, 0} /*1114008*/}};
static constexpr __bool_trie<32, 991, 1, 0, 162, 255, 1, 0, 1151, 1, 0, 120> __prop_alpha_data{
    {0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0x0000501f0003ffc3,
     0x0000000000000000, 0xbcdf000000000020, 0xfffffffbffffd740, 0xffbfffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffc03, 0xffffffffffffffff,
     0xfffeffffffffffff, 0xffffffff027fffff, 0xbfff0000000001ff, 0x000787ffffff00b6,
     0xffffffff07ff0000, 0xffffc000feffffff, 0xffffffffffffffff, 0x9c00e1fe1fefffff,
     0xffffffffffff0000, 0xffffffffffffe000, 0x0003ffffffffffff, 0x043007fffffffc00},
    {1,   2,   3,   4,   5,   6,   7,   8,   9,   10, 11,  12,  13,  14,  15,  16,  17,  18,  19,
     20,  21,  22,  23,  24,  25,  26,  27,  28,  29, 30,  31,  32,  33,  34,  35,  36,  36,  36,
     36,  36,  37,  38,  39,  40,  41,  42,  43,  44, 36,  36,  36,  36,  36,  36,  36,  36,  45,
     46,  47,  48,  49,  50,  51,  52,  53,  54,  55, 56,  57,  58,  59,  60,  61,  62,  31,  63,
     64,  65,  66,  67,  68,  69,  70,  36,  36,  36, 71,  36,  36,  36,  36,  72,  73,  74,  75,
     31,  76,  77,  31,  78,  79,  80,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  81,
     82,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 83,  84,  36,  85,  86,  87,  88,  89,  90,
     31,  31,  31,  31,  31,  31,  31,  91,  44,  92, 93,  94,  36,  95,  96,  31,  31,  31,  31,
     31,  31,  31,  31,  97,  31,  98,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  99,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  100, 31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  101, 102, 103, 104, 100, 105,
     31,  31,  31,  31,  31,  31,  106, 107, 31,  31, 31,  31,  31,  31,  31,  108, 31,  109, 31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 110, 31,  31,  31,  31,  31,  31,  31,  111,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  112, 31,  113, 114, 31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  115, 31,  116, 31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  117, 31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  118, 31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  119, 31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  115, 31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  118, 31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  120, 31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  121, 31,  105,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  122, 123, 31,
     124, 31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  116, 36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  125, 126,
     36,  36,  36,  36,  127, 128, 36,  129, 130, 36, 131, 132, 133, 134, 36,  135, 136, 137, 138,
     139, 67,  140, 141, 142, 143, 144, 36,  145, 36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  146, 147, 31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  31,  31,  31,  31,  31,  31,
     31,  31,  31,  31,  31,  31,  31,  31,  31,  31, 31,  31,  31,  36,  36,  36,  36,  36,  148,
     36,  149, 150, 151, 152, 153, 36,  36,  36,  36, 154, 33,  155, 156, 31,  157, 36,  158, 159,
     160, 141, 161},
    {0x00001ffffcffffff, 0x000007ff01ffffff, 0x3fdfffff00000000, 0xffff03f8fff00000,
     0xefffffffffffffff, 0xfffe000fffe1dfff, 0xe3c5fdfffff99fef, 0x1003000fb080599f,
     0xc36dfdfffff987ee, 0x003f00005e021987, 0xe3edfdfffffbbfee, 0x1e00000f00011bbf,
     0xe3edfdfffff99fee, 0x0002000fb0c0199f, 0xc3ffc718d63dc7ec, 0x0000000000811dc7,
     0xe3fffdfffffddfef, 0x0000000f07601ddf, 0xe3effdfffffddfef, 0x0006000f40601ddf,
     0xe7fffffffffddfef, 0xfc00000f80f05ddf, 0x2ffbfffffc7fffec, 0x000c0000ff5f807f,
     0x07fffffffffffffe, 0x000000000000207f, 0x3bffffaffffff7d6, 0x00000000f000205f,
     0x0000000000000001, 0xfffe1ffffffffeff, 0x1ffffffffeffff03, 0x0000000000000000,
     0xf97fffffffffffff, 0xffffffffffff0000, 0xffffffff3c00ffff, 0xf7ffffffffff20bf,
     0xffffffffffffffff, 0xffffffff3d7f3dff, 0x7f3dffffffff3dff, 0xffffffffff7fff3d,
     0xffffffffff3dffff, 0x0000000007ffffff, 0xffffffff0000ffff, 0x3f3fffffffffffff,
     0xfffffffffffffffe, 0xffff9fffffffffff, 0xffffffff07fffffe, 0x01ffc7ffffffffff,
     0x000fffff000fdfff, 0x000ddfff000fffff, 0xffcfffffffffffff, 0x00000000108001ff,
     0xffffffff00000000, 0x01ffffffffffffff, 0xffff07ffffffffff, 0x003fffffffffffff,
     0x01ff0fff7fffffff, 0x001f3fffffff0000, 0xffff0fffffffffff, 0x00000000000003ff,
     0xffffffff0fffffff, 0x001ffffe7fffffff, 0x0000008000000000, 0xffefffffffffffff,
     0x0000000000000fef, 0xfc00f3ffffffffff, 0x0003ffbfffffffff, 0x007fffffffffffff,
     0x3ffffffffc00e000, 0xe7ffffffffff01ff, 0x046fde0000000000, 0x001fff8000000000,
     0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0x5fdfffffffffffff, 0x1fdc1fff0fcf1fdc,
     0x8002000000000000, 0x000000001fff0000, 0xf3ffbd503e2ffc84, 0xffffffff000043e0,
     0x00000000000001ff, 0xffc0000000000000, 0x000003ffffffffff, 0xffff7fffffffffff,
     0xffffffff7fffffff, 0x000c781fffffffff, 0xffff20bfffffffff, 0x000080ffffffffff,
     0x7f7f7f7f007fffff, 0xffffffff7f7f7f7f, 0x0000800000000000, 0x1f3e03fe000000e0,
     0xfffffffee07fffff, 0xf7ffffffffffffff, 0xfffeffffffffffe0, 0x07ffffff00007fff,
     0xffff000000000000, 0x0000000000000020, 0x0000000000000008, 0x0000040000000000,
     0x0000000000002000, 0x0000000000000389, 0x0000000020000000, 0x8000000000701000,
     0x0000010080000001, 0x0001000000000000, 0x0000000000000010, 0x00003e0000000040,
     0x000000000000103e, 0x000000000000001e, 0x0000000008000000, 0x0202000000000000,
     0x0400000000000000, 0xc000000000000000, 0x000000000001f000, 0x4000000000000000,
     0x0000000000001000, 0x0000000000040000, 0x0000000000000040, 0x0000000000400000,
     0x0000100000000000, 0x0008400000000000, 0x0000000200000000, 0x0100000000001040,
     0x0040000000000000, 0x0000000000001fff, 0x3fffffffffff0000, 0x00000c00ffff1fff,
     0x8ff07fffffffffff, 0x0000ffffffffffff, 0xfffffffcff800000, 0xfffffffffffff9ff,
     0xff8000000000007c, 0x000000ffffffffbf, 0x000fffffffffffff, 0xe8fc00000000002f,
     0xffff07fffffffc00, 0x1fffffff0007ffff, 0xfff7ffffffffffff, 0x7c00ffff00008000,
     0xfc7fffff00003fff, 0x7fffffffffffffff, 0x003cffff38000005, 0xffff7f7f007e7e7e,
     0xffff00fff7ffffff, 0x000007ffffffffff, 0xffff000fffffffff, 0x0ffffffffffff87f,
     0xffff3fffffffffff, 0x0000000003ffffff, 0x5f7ffdffe0f8007f, 0xffffffffffffffdb,
     0x0003ffffffffffff, 0xfffffffffff80000, 0x3fffffffffffffff, 0xfffffffffffcffff,
     0x0fff0000000000ff, 0xffdf000000000000, 0x1fffffffffffffff, 0x07fffffe00000000,
     0xffffffc007fffffe, 0x000000001cfcfcfc},
    {1, 2,  3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 10, 11, 12, 13, 5, 14, 15, 5, 5, 16, 5, 5, 5, 5, 5, 5, 5,
     5, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5},
    {1,  2,  3,  4,   5,   4,   4,   4,  4,   6,   7,  8,  9,   10,  11,  2,   2,   12,  13, 14, 15,
     4,  4,  2,  2,   2,   2,   16,  17, 4,   4,   18, 19, 20,  21,  22,  4,   23,  4,   24, 25, 26,
     27, 28, 29, 30,  4,   2,   31,  32, 32,  33,  4,  4,  4,   4,   4,   4,   4,   34,  35, 4,  36,
     2,  35, 37, 38,  32,  39,  2,   40, 41,  4,   42, 43, 44,  45,  4,   4,   2,   46,  2,  47, 4,
     4,  48, 49, 50,  51,  52,  4,   53, 4,   4,   4,  54, 4,   55,  56,  4,   4,   57,  58, 59, 60,
     61, 54, 4,  4,   4,   4,   62,  63, 64,  4,   65, 66, 67,  4,   4,   4,   4,   36,  4,  4,  4,
     4,  2,  2,  2,   2,   2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   68,  4,   2,   69, 2,  2,
     2,  70, 4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  2,  2,   2,   2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,   69, 4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  2,  2,
     2,  2,  2,  2,   2,   2,   2,   71, 4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   2,   2,   2,  2,  2,
     2,  2,  2,  54,  20,  4,   72,  73, 74,  75,  4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  2,
     4,  4,  2,  76,  77,  78,  2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,   2,  2,  2,
     2,  2,  2,  2,   2,   2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,   2,  2,  2,
     2,  2,  2,  2,   2,   2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,   2,  2,  2,
     2,  2,  2,  2,   2,   2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,   2,  2,  2,
     2,  2,  2,  2,   2,   2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   79,  2,  2,  2,
     2,  2,  2,  2,   2,   2,   2,   2,  32,  4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  2,   2,   2,  2,  20,  80,  2,   2,   2,   2,   2,  81, 4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   2,   82,  83,  4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   2,   84,  85,  86, 87,  88,  2,  2,  2,   2,   89,  90,  91,  92,  93, 94, 4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   95, 4,  4,   4,   96,  97,  4,   4,   4,  4,  4,
     98, 4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     2,  2,  2,  99,  2,   100, 4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  101, 102, 103, 4,   4,  4,   4,   4,  4,  4,   4,   4,   104, 105, 106, 4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  107, 108, 4,   109, 110, 4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   111, 4,  112, 4,   4,  4,  4,   113, 114, 4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   115, 4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   116, 4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   117, 4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  118, 4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   2,   2,  2,   2,   2,  2,  2,   2,   119, 4,   4,   4,   4,  4,  4,
     4,  4,  4,  4,   4,   4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4},
    {0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,
     0x0000000000000000, 0x001fffffffffffff, 0xffffffff1fffffff, 0x000000000001ffff,
     0xffffe000ffffffff, 0x07ffffffffff07ff, 0xffffffff3fffffff, 0x00000000003eff0f,
     0xffff00003fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff, 0x0000000fffffffff,
     0x007fffffffffffff, 0x000000ff003fffff, 0x91bffffffffffd3f, 0x007fffff003fffff,
     0x000000007fffffff, 0x0037ffff00000000, 0x03ffffff003fffff, 0xc0ffffffffffffff,
     0x003ffffffeeff06f, 0x1fffffff00000000, 0x000000001fffffff, 0x0000001ffffffeff,
     0x003fffffffffffff, 0x0007ffff003fffff, 0x000000000003ffff, 0x00000000000001ff,
     0x0007ffffffffffff, 0x000000ffffffffff, 0xffff00801fffffff, 0x000000000000003f,
     0x007fffff00000000, 0x01fffffffffffffc, 0x000001ffffff0000, 0x0047ffffffff0070,
     0x000000001400001e, 0x409ffffffffbffff, 0xffff01ffbfffbd7f, 0x000001ffffffffff,
     0xe3edfdfffff99fef, 0x0000000fe081199f, 0x00000000800007bb, 0x00000000000000b3,
     0x7f3fffffffffffff, 0x000000003f000000, 0x7fffffffffffffff, 0x0000000000000011,
     0x013fffffffffffff, 0x000007ffe7ffffff, 0x01ffffffffffffff, 0xffffffff00000000,
     0x80000000ffffffff, 0xfffffcff00000000, 0x0000001afcffffff, 0x7fe7ffffffffffff,
     0xffffffffffff0000, 0x0000000020ffffff, 0x7f7ffffffffffdff, 0xfffc000000000001,
     0x007ffefffffcffff, 0xb47ffffffffffb7f, 0xfffffdbf000000cb, 0x00000000017b7fff,
     0x0000000003ffffff, 0x00007fffffffffff, 0x000000000000000f, 0x000000000000007f,
     0x00003fffffff0000, 0x0000ffffffffffff, 0xe0fffff80000000f, 0x000000000000ffff,
     0xffffffffffff87ff, 0x00000000ffff80ff, 0x0000000b00000000, 0x00ffffffffffffff,
     0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff, 0x0000000043ff01ff,
     0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef, 0x7bffffffdfdfe7bf,
     0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xf7fffffff7fffffd, 0xffdfffffffdfffff,
     0xffff7fffffff7fff, 0xfffffdfffffffdff, 0x0000000000000ff7, 0x000007dbf9ffff7f,
     0x3f801fffffffffff, 0x0000000000004000, 0x00000fffffffffff, 0x000000000000001f,
     0x000000000000088f, 0x0af7fe96ffffffef, 0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff,
     0xffff000000000000, 0xffff03ffffff03ff, 0x00000000000003ff, 0x0000000000000003,
     0x0000001000000000, 0x0000000400000000, 0x0000000200000000, 0x0000040000000000,
     0x0000000010001008, 0x2000040000000000, 0x0000000002000000, 0x0000000000010000,
     0x0000000001000000, 0x0000000008000000, 0x0000200000000000, 0x000000003fffffff}};
static constexpr __range_array<9> __prop_bidi_c_data = {
    {__range_array_elem{0x0000, 0} /*1564*/, __range_array_elem{0x061C, 1} /*1*/,
     __range_array_elem{0x061D, 0} /*6641*/, __range_array_elem{0x200E, 1} /*2*/,
     __range_array_elem{0x2010, 0} /*26*/, __range_array_elem{0x202A, 1} /*5*/,
     __range_array_elem{0x202F, 0} /*55*/, __range_array_elem{0x2066, 1} /*4*/,
     __range_array_elem{0x206A, 0} /*1105813*/}};
static constexpr __bool_trie<32, 962, 28, 2, 26, 1, 13, 242, 5, 91, 32, 6> __prop_bidi_m_data{
    {0x5000030000000000, 0x2800000028000000, 0x0800080000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  2,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 3, 4,  5,  0, 0,  6, 0, 0, 7, 8, 9,  10, 11,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  12, 0, 13, 0, 0, 0, 0, 0, 0,  14, 15,
     16, 17, 18, 19, 0, 0, 0, 20, 0, 0, 0, 0, 0,  0, 0, 0,  21, 0, 0,  0, 0, 0, 0, 0, 22, 0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0, 0,  0,  0,
     0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0, 0, 23, 0, 0, 24, 25},
    {0x0000000000000000, 0x3c00000000000000, 0x0000000018000000, 0x0600000000000000,
     0x6000000000000060, 0x0000000000006000, 0x0000000000000001, 0xfa0ff857bc623f1e,
     0xffffcff5803c1fff, 0xc1ffffcc01079fff, 0xffff3fffffc33e00, 0x0000060300000f00,
     0x003fff0000000000, 0x0000fffc70783b79, 0x0100fffdf9fffff8, 0x33f0033a1f37c23f,
     0x70307a53dffffc00, 0xfe19bc3001800000, 0xffffbfcfffffffff, 0x2f88707c507fffff,
     0x4000000000000000, 0x000003ff3000363c, 0x000000000ff3ff00, 0x000000307e000000,
     0x2800000050000300, 0x0000000da8000000},
    {1},
    {1, 2, 3, 4, 5},
    {0x0000000000000000, 0x0000000008000000, 0x0000000000200000, 0x0000000000008000,
     0x0000000000000200, 0x0000000000000008}};
static constexpr __bool_trie<0, 969, 5, 18, 11, 1, 13, 242, 3, 69, 56, 4> __prop_ce_data{
    {},
    {1, 0, 2, 3, 4, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 7, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 9, 10},
    {0x0000000000000000, 0x00000000ff000000, 0x00000000b0000000, 0x0048000000000000,
     0x000000004e000000, 0x0000000030000000, 0x0140020010842008, 0x0200108420080000,
     0x0000000010000000, 0x5f7ffc00a0000000, 0x0000000000007fdb},
    {1},
    {1, 2, 3},
    {0x0000000000000000, 0x0000001fc0000000, 0xf800000000000000, 0x0000000000000001}};
static constexpr __bool_trie<32, 969, 5, 18, 21, 19, 13, 224, 100, 69, 23, 6> __prop_comp_ex_data{
    {0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x401000000000001b, 0x0000000000000080, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1, 0, 2, 3, 4, 0, 0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 6, 7, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 8, 9, 10, 11, 0,  0,  0,  12, 0,  0,  0,  0,  0, 0, 0, 13, 0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 14, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0, 0,  0, 0, 0,  0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0,  15, 15, 15, 15, 16, 17, 15, 18, 19, 20},
    {0x0000000000000000, 0x00000000ff000000, 0x00000000b0000000, 0x0048000000000000,
     0x000000004e000000, 0x0000000030000000, 0x0168020010842008, 0x0200108420080002,
     0x2aaa000000000000, 0x4800000000000000, 0x2a00c80808080a00, 0x0000000000000003,
     0x00000c4000000000, 0x0000060000000000, 0x0000000010000000, 0xffffffffffffffff,
     0xfffffc657fe53fff, 0xffff3fffffffffff, 0x0000000003ffffff, 0x5f7ffc00a0000000,
     0x0000000000007fdb},
    {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2},
    {1, 2, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4, 5},
    {0x0000000000000000, 0x0000001fc0000000, 0xf800000000000000, 0x0000000000000001,
     0xffffffffffffffff, 0x000000003fffffff}};
static constexpr flat_array<28> __prop_dash_data{
    {0x002D, 0x058A, 0x05BE, 0x1400, 0x1806, 0x2010, 0x2011, 0x2012, 0x2013, 0x2014,
     0x2015, 0x2053, 0x207B, 0x208B, 0x2212, 0x2E17, 0x2E1A, 0x2E3A, 0x2E3B, 0x2E40,
     0x301C, 0x3030, 0x30A0, 0xFE31, 0xFE32, 0xFE58, 0xFE63, 0xFF0D}};
static constexpr flat_array<15> __prop_dep_data{{0x0149, 0x0673, 0x0F77, 0x0F79, 0x17A3, 0x17A4,
                                                 0x206A, 0x206B, 0x206C, 0x206D, 0x206E, 0x206F,
                                                 0x2329, 0x232A, 0xE0001}};
static constexpr __bool_trie<32, 991, 1, 0, 60, 255, 1, 0, 347, 11, 26, 32> __prop_dia_data{
    {0x0000000000000000, 0x0000000140000000, 0x0190810000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0xffff000000000000, 0xffffffffffffffff,
     0xffffffffffffffff, 0x04300007e0ff7fff, 0x0000000000000030, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x00000000000000f8, 0x0000000000000000,
     0x0000000000000000, 0x0000000002000000, 0xbffffffbfffe0000, 0x0000000000000016,
     0x0000000000000000, 0x000000000187f800, 0x0000000000000000, 0x00001c6180000000,
     0xffff000000000000, 0x00000000000007ff, 0x0001ffc000000000, 0x003ff80000000000},
    {1,  1,  2,  3,  4,  3,  5,  3,  5,  3,  6,  3,  5,  1,  5,  1,  5, 3,  5,  7,  5,  1,  8,  1,
     9,  10, 11, 12, 1,  13, 14, 15, 16, 17, 1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  18, 1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  19, 1,  1, 1,  1,  20, 1,  1,  1,  1,
     21, 22, 1,  23, 24, 25, 1,  26, 27, 1,  28, 29, 30, 1,  31, 1,  1, 1,  1,  1,  1,  32, 33, 1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  34, 1,  1,  1,  1,  35, 1,  1,  1,  1,  1,  1,  1,  36, 1, 37, 3,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  38, 39, 40, 41, 1,  42, 43, 1,  1, 1,  44, 45, 46, 47, 48, 1,
     49, 50, 51, 1,  52, 1,  53, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  54, 1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  55,
     1,  1,  1,  56, 57, 58, 59},
    {0x0000000003000000, 0x0000000000000000, 0x7ffffff800000000, 0x1000000000000000,
     0x00020000001e2000, 0x0000000000002000, 0xe000000000002000, 0x1800000000000000,
     0x0000000000000400, 0x0000000000005f80, 0x0400000000000000, 0x0000000000001f00,
     0xc2a0000003000000, 0x00000000000000dc, 0x0000000000000040, 0x0680000000000000,
     0x00003e1800000000, 0x000000000c00bf80, 0x00000000e0000000, 0x00000000200ffe00,
     0x0e00000000000000, 0x9fe0000000000000, 0x3fff000000000000, 0x0010000000000000,
     0x000ff80000000010, 0x00000c0000000000, 0x00c0000000000000, 0x3f00000000000000,
     0x039021ffffff0000, 0xfffff00000000000, 0x000007ffffffffff, 0xe3e000000000fff0,
     0xa000000000000000, 0x6000e000e000e003, 0x0003800000000000, 0x0000800000000000,
     0x0000fc0000000000, 0x000000001e000000, 0xb000800000000000, 0x0000000030000000,
     0x0003000000000000, 0x00000003ffffffff, 0x0000000000000700, 0x0300000000000000,
     0x0003ffff00000010, 0x0000780000000000, 0x0000000000080000, 0x0008000000000000,
     0x0000002000000001, 0x3800000000000000, 0x8000000000000000, 0x0040000000000007,
     0x00000000f8000000, 0x0000300000000000, 0x0000000040000000, 0x0000ffff00000000,
     0x4000000000000000, 0x0001000000000001, 0x00000000c0000000, 0x0000000800000000},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 2, 2, 4, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  2,  0, 0, 0, 0, 0, 0,  0,  0,  3,  0, 0,  0,  0,  0, 0,  0, 0,
     4,  0,  0,  0, 0,  5, 0,  6,  7, 0, 8, 9, 0, 0,  10, 11, 12, 0, 0,  0,  13, 0, 14, 0, 0,
     15, 16, 15, 0, 17, 0, 18, 0,  0, 0, 5, 0, 0, 0,  0,  0,  0,  1, 19, 20, 21, 0, 0,  0, 0,
     0,  15, 0,  0, 0,  0, 22, 23, 0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 24,
     25, 0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 26, 0,  0,  0, 0,  0, 0,
     27, 28, 0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 25, 0,  0,  0,  0, 0,  0,  29, 0, 0,  0, 0,
     0,  0,  0,  0, 0,  0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0, 0,  30, 0,  31},
    {0x0000000000000000, 0x0000000100000000, 0x0000006000000000, 0x000000fc00000000,
     0x000000000001ffc0, 0x0600000000000000, 0x0018000000000000, 0x0008000000000000,
     0x0000000000001c01, 0x0060000000000000, 0x0000060000000000, 0x1000000000000000,
     0x001f1fc000002000, 0x0000000000000044, 0x000000000000000c, 0x8000000000000000,
     0x0000000000000001, 0x00c0000000000000, 0x0000080000000000, 0x0010000000000000,
     0x0000000000000080, 0x0000000002000000, 0x0000000000000034, 0x0000000000800000,
     0x001f000000000000, 0x007f000000000000, 0x00000000ffff8000, 0xf807e38000000000,
     0x00003c0000000fe7, 0x0000f00000000000, 0x00000000007f0000, 0x0000000000000770}};
static constexpr __bool_trie<32, 39, 102, 851, 15, 1, 15, 240, 38, 69, 21, 28> __prop_emoji_data{
    {0x03ff000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1, 0, 0,  0,  0,  0, 2, 0, 0, 3, 0,  0, 0, 0, 0, 0, 4, 5, 6, 7,
     8, 9, 10, 11, 12, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14},
    {0x0000000000000000, 0x0000060003f00000, 0x000000000c000000, 0x070ffe0000000000,
     0x00000c0000000000, 0x7800000000000000, 0x0700c00c0030001f, 0xc0000061800fff00,
     0x60030c0318fc0000, 0x07bf060000180030, 0x0018000000003f00, 0x0000001800380000,
     0x0000000000e00000, 0x0030000000000000, 0x00000000180000e0},
    {1},
    {1,  2,  3,  4,  5, 0, 0, 6,  7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
     18, 19, 12, 20, 0, 0, 0, 21, 0, 0, 0, 0,  22, 23, 24, 25, 0,  26, 27},
    {0x0000000000000000, 0x0003000000000000, 0x0000000007fe0000, 0xffffffc000000000,
     0x07fc000000000006, 0x0000000000030000, 0xffbffff1ffffffff, 0xdfffffffffffffff,
     0xffffffffcecfffff, 0xff39ffffffffffdf, 0x7fffffffffffffff, 0xfffffffffffffffc,
     0xffffffffffffffff, 0x1effffffffffffff, 0x3fffffffffffffff, 0x03f980ffffff7e00,
     0x0006000000603c00, 0xf8000000700e001c, 0xffefcfff701dfffe, 0x000000000000ffff,
     0x01f0183f0006f83f, 0x00000fff00000000, 0x77feffff7fffe000, 0xf079ffffffffefbf,
     0xffffc7e7ffffffff, 0xffffffffffffe7fe, 0x070f000000000000, 0x00000000003f0007}};
static constexpr __range_array<11> __prop_emoji_component_data = {
    {__range_array_elem{0x0000, 0} /*48*/, __range_array_elem{0x0030, 1} /*10*/,
     __range_array_elem{0x003A, 0} /*127404*/, __range_array_elem{0x1F1E6, 1} /*26*/,
     __range_array_elem{0x1F200, 0} /*507*/, __range_array_elem{0x1F3FB, 1} /*5*/,
     __range_array_elem{0x1F400, 0} /*1456*/, __range_array_elem{0x1F9B0, 1} /*4*/,
     __range_array_elem{0x1F9B4, 0} /*788076*/, __range_array_elem{0xE0020, 1} /*96*/,
     __range_array_elem{0xE0080, 0} /*196479*/}};
static constexpr __range_array<3> __prop_emoji_modifier_data = {
    {__range_array_elem{0x0000, 0} /*127995*/, __range_array_elem{0x1F3FB, 1} /*5*/,
     __range_array_elem{0x1F400, 0} /*986111*/}};
static constexpr __range_array<41> __prop_emoji_modifier_base_data = {
    {__range_array_elem{0x0000, 0} /*9994*/,
     __range_array_elem{0x270A, 1} /*4*/,
     __range_array_elem{0x270E, 0} /*117940*/,
     __range_array_elem{0x1F3C2, 1} /*3*/,
     __range_array_elem{0x1F3C5, 0} /*6*/,
     __range_array_elem{0x1F3CB, 1} /*2*/,
     __range_array_elem{0x1F3CD, 0} /*117*/,
     __range_array_elem{0x1F442, 1} /*2*/,
     __range_array_elem{0x1F444, 0} /*2*/,
     __range_array_elem{0x1F446, 1} /*11*/,
     __range_array_elem{0x1F451, 0} /*21*/,
     __range_array_elem{0x1F466, 1} /*19*/,
     __range_array_elem{0x1F479, 0} /*8*/,
     __range_array_elem{0x1F481, 1} /*3*/,
     __range_array_elem{0x1F484, 0} /*1*/,
     __range_array_elem{0x1F485, 1} /*3*/,
     __range_array_elem{0x1F488, 0} /*236*/,
     __range_array_elem{0x1F574, 1} /*2*/,
     __range_array_elem{0x1F576, 0} /*31*/,
     __range_array_elem{0x1F595, 1} /*2*/,
     __range_array_elem{0x1F597, 0} /*174*/,
     __range_array_elem{0x1F645, 1} /*3*/,
     __range_array_elem{0x1F648, 0} /*3*/,
     __range_array_elem{0x1F64B, 1} /*5*/,
     __range_array_elem{0x1F650, 0} /*100*/,
     __range_array_elem{0x1F6B4, 1} /*3*/,
     __range_array_elem{0x1F6B7, 0} /*610*/,
     __range_array_elem{0x1F919, 1} /*6*/,
     __range_array_elem{0x1F91F, 0} /*18*/,
     __range_array_elem{0x1F931, 1} /*9*/,
     __range_array_elem{0x1F93A, 0} /*2*/,
     __range_array_elem{0x1F93C, 1} /*3*/,
     __range_array_elem{0x1F93F, 0} /*118*/,
     __range_array_elem{0x1F9B5, 1} /*2*/,
     __range_array_elem{0x1F9B7, 0} /*1*/,
     __range_array_elem{0x1F9B8, 1} /*2*/,
     __range_array_elem{0x1F9BA, 0} /*19*/,
     __range_array_elem{0x1F9CD, 1} /*3*/,
     __range_array_elem{0x1F9D0, 0} /*1*/,
     __range_array_elem{0x1F9D1, 1} /*13*/,
     __range_array_elem{0x1F9DE, 0} /*984609*/}};
static constexpr __bool_trie<0, 33, 108, 851, 12, 1, 15, 240, 37, 70, 21, 27>
    __prop_emoji_presentation_data{
        {},
        {1, 0,  0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 4, 5, 6, 7, 8,
         9, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11},
        {0x0000000000000000, 0x000000000c000000, 0x00001e0000000000, 0x6000000000000000,
         0x0000000000300000, 0x00000000000fff00, 0x60000c0000000000, 0x000c000000000030,
         0x0000000000000c00, 0x0000000000380000, 0x0000000000e00000, 0x0000000018000000},
        {1},
        {1,  2,  3,  4, 0, 0, 5,  6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,
         18, 11, 19, 0, 0, 0, 20, 0, 0, 0, 0, 21, 22, 23, 24, 0,  25, 26},
        {0x0000000000000000, 0x0000000007fe0000, 0xffffffc000000000, 0x077c000000000000,
         0x0000000000030000, 0xffbfe001ffffffff, 0xdfffffffffffffff, 0xffffffff000fffff,
         0xff01ffff000f87df, 0x7fffffffffffffff, 0xfffffffffffffffc, 0xffffffffffffffff,
         0x1effffffffffffff, 0x3fffffffffffffff, 0x000000ffffff7800, 0x0000000000600000,
         0xf800000000000000, 0xffefcfff701dfffe, 0x000000000000ffff, 0x01f018000006003f,
         0x00000fff00000000, 0x77feffff7fffe000, 0xf079ffffffffefbf, 0xffffc7e7ffffffff,
         0xffffffffffffe7fe, 0x070f000000000000, 0x00000000003f0007}};
static constexpr flat_array<47> __prop_ext_data{
    {0x00B7,  0x02D0,  0x02D1,  0x0640,  0x07FA,  0x0E46,  0x0EC6,  0x180A,  0x1843,  0x1AA7,
     0x1C36,  0x1C7B,  0x3005,  0x3031,  0x3032,  0x3033,  0x3034,  0x3035,  0x309D,  0x309E,
     0x30FC,  0x30FD,  0x30FE,  0xA015,  0xA60C,  0xA9CF,  0xA9E6,  0xAA70,  0xAADD,  0xAAF3,
     0xAAF4,  0xFF70,  0x1135D, 0x115C6, 0x115C7, 0x115C8, 0x11A98, 0x16B42, 0x16B43, 0x16FE0,
     0x16FE1, 0x16FE3, 0x1E13C, 0x1E13D, 0x1E944, 0x1E945, 0x1E946}};
static constexpr __bool_trie<0, 39, 102, 851, 15, 1, 15, 240, 43, 64, 21, 28>
    __prop_extended_pictographic_data{
        {},
        {1, 0, 0,  0,  0,  0, 2, 0, 0, 3, 0,  0, 0, 0, 0, 0, 4, 5, 6, 7,
         8, 9, 10, 11, 12, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 14},
        {0x0000000000000000, 0x0000060003f00000, 0x000000000c000000, 0x070ffe0000000000,
         0x00000c0000000000, 0x7800000000000000, 0xfffffffffcf7ffbf, 0xffffffffffffffff,
         0xfffbffffdfff003f, 0xfffffff3ffffbfff, 0x001800000007ff1e, 0x000000f800380000,
         0x0000000000e00000, 0x0030000000000000, 0x00000000180000e0},
        {1},
        {1,  2, 3,  4,  0, 5,  6, 0, 7, 8,  0, 0, 9, 10, 2,  11, 12, 13, 2, 14, 15, 16,
         17, 2, 18, 19, 2, 20, 0, 0, 0, 21, 0, 0, 0, 0,  22, 23, 24, 25, 2, 26, 27},
        {0x0000000000000000, 0xffff0fffffffffff, 0xffffffffffffffff, 0x7ffe7fff000fffff,
         0x003ffffffffefffe, 0x0003000000000000, 0x0000000007fe0000, 0x07fc000000000006,
         0x0000003f00030000, 0xffbfffffffffffff, 0xdfffffffffffffff, 0x07ffffffffffffdf,
         0x7fffffffffffffff, 0xfffffffffffffffc, 0x7effffffffffffff, 0x3fffffffffffffff,
         0xfbffffffffffffc0, 0xffffffefffffffff, 0xffefcfff701dfffe, 0x000000000000ffff,
         0x01ff1fff001effff, 0x00000fff01e00000, 0x77feffff7fffe000, 0xf079ffffffffefbf,
         0xffffc7e7ffffffff, 0xffffffffffffe7fe, 0x070f3fff000fffff, 0x00000000003f0007}};
static constexpr __bool_trie<32, 991, 1, 0, 161, 255, 1, 0, 1151, 1, 0, 165> __prop_gr_base_data{
    {0xffffffff00000000, 0x7fffffffffffffff, 0xffffdfff00000000, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0x0000000000000000, 0xfcff000000000000, 0xfffffffbffffd7f0, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffc07, 0xffffffffffffffff,
     0xfffeffffffffffff, 0xfffffffffe7fffff, 0x400000000000e7ff, 0x001f87ffffff0049,
     0xffffffffc800ffc0, 0xfffeffff000007ff, 0xffffffffffffffff, 0xffffc260403fffff,
     0x0000fffffffd3fff, 0xffffffffffffe000, 0x0002003fffffffff, 0xc7f007ffffffffff},
    {1,   2,   3,   4,   5,   6,   7,   8,   9,   10, 11,  12,  13,  14,  15,  16,  17,  18,  19,
     20,  21,  22,  23,  24,  25,  26,  27,  28,  29, 30,  31,  32,  33,  34,  35,  36,  36,  36,
     36,  36,  37,  38,  39,  40,  41,  42,  43,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     44,  45,  46,  47,  48,  49,  50,  45,  51,  52, 53,  54,  55,  56,  57,  58,  59,  3,   60,
     61,  62,  63,  64,  65,  66,  67,  36,  36,  36, 3,   36,  36,  36,  36,  68,  69,  70,  71,
     72,  73,  74,  3,   36,  36,  75,  36,  36,  36, 36,  36,  36,  36,  36,  36,  76,  77,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  78,  79,  36, 80,  81,  36,  82,  83,  84,  85,  86,  36,
     87,  88,  89,  36,  36,  36,  90,  91,  92,  93, 36,  94,  36,  95,  96,  81,  36,  36,  97,
     36,  36,  36,  36,  98,  3,   99,  3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   100, 3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   101, 3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   36,  102, 103, 104, 105, 101, 106,
     3,   3,   3,   3,   3,   3,   107, 108, 3,   3,  3,   3,   3,   3,   3,   109, 3,   110, 3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  111, 3,   3,   3,   3,   3,   3,   3,   112,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   113, 3,   114, 115, 3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   116, 3,   117, 3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   118, 3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   119, 3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   120, 3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   116, 3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   119, 3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   121, 3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   122, 3,   106,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   123, 124, 3,
     125, 3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   117, 36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  126, 127,
     36,  36,  36,  36,  128, 129, 130, 131, 36,  36, 36,  132, 133, 134, 36,  135, 136, 137, 138,
     139, 140, 141, 142, 143, 144, 145, 36,  146, 36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  36,  36,  36,  36,  36,  36,  36,
     36,  36,  36,  36,  36,  36,  36,  36,  36,  36, 36,  36,  96,  147, 3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   36,  36,  36,  36,  36,  148,
     36,  149, 150, 151, 36,  152, 36,  36,  36,  36, 36,  153, 154, 155, 156, 157, 36,  158, 92,
     36,  159, 160},
    {0x7fff0110043fffff, 0x000007ff41ffffff, 0x3fdfffff00000000, 0x0000000000000000,
     0xebfffffffffffff8, 0xfffffff3ff01de01, 0xa3c5fdfffff99fed, 0x3fffffc3b0005981,
     0xc36dfdfffff987e8, 0x005cffc05e000001, 0xe3edfdfffffbbfe8, 0x0203ffc300011a01,
     0x23edfdfffff99fec, 0x00ffffc3b0001981, 0x83ffc718d63dc7e8, 0x07ffffc000011dc6,
     0x23fffdfffffddfee, 0xff80ffc30700001e, 0x63effdfffffddffd, 0x0006ffc340000d9b,
     0xa7fffffffffddfec, 0xffffffc3ff70ddc1, 0x2ffbfffffc7fffec, 0x001cffc07f03007f,
     0x800dfffffffffffe, 0x000000000fff807f, 0x200dffaffffff7d6, 0x00000000f3ff005f,
     0xfd5ffffffcffffff, 0x80001ffffffffeff, 0xc000000000001f20, 0x0000000007ffdfbf,
     0x99021fffffffffff, 0xffe1fffe3cffffff, 0xffffffffdfffdf9b, 0xffffffffffff20bf,
     0xffffffffffffffff, 0xffffffff3d7f3dff, 0x7f3dffffffff3dff, 0xffffffffff7fff3d,
     0xffffffffff3dffff, 0x1fffffff07ffffff, 0xffffffff03ffffff, 0x3f3fffffffffffff,
     0xffffffff1fffffff, 0x01ffffffffffffff, 0x0063ffff0003dfff, 0x0001dfff0003ffff,
     0xc04fffffffffffff, 0x03ff03ff1ff001bf, 0xffffffff03ff07ff, 0xffff05ffffffff9f,
     0x003fffffffffffff, 0x01fb0e787fffffff, 0x001f3ffffffffff1, 0xffff0fffffffffff,
     0xffffffffc7ff03ff, 0xffffffffc67fffff, 0x0007e01a00bfffff, 0x00003fff03ff03ff,
     0xe80ffffffffffff0, 0x1ff007ffffff0ffb, 0xffffc4c3fffffffc, 0xf00c5cbfffffffff,
     0xf8300fffffffffff, 0xffffffffffffe3ff, 0xe7ffffffffff01ff, 0x04efde02000800ff,
     0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0xffdfffffffffffff, 0x7fdcffffefcfffdf,
     0xffff80ffffff07ff, 0xfff30000ffffffff, 0xffffffff1fff7fff, 0xffffffffffff0fff,
     0x0000007fffffffff, 0xffffffff000007ff, 0xffcfffffffffffff, 0xffffffffff3fffff,
     0xffff7fffffffffff, 0xffffffff7fffffff, 0xfe0c7fffffffffff, 0xffff20bfffffffff,
     0x000180ffffffffff, 0x7f7f7f7f007fffff, 0x000000007f7f7f7f, 0x000000000000ffff,
     0xfffffffffbffffff, 0x000fffffffffffff, 0x0fff0000003fffff, 0xffff03ffffffffff,
     0xfffffffffffffffe, 0xfffffffff87fffff, 0xfffeffffffffffe0, 0x07ffffffffff7fff,
     0xffff000fffffffff, 0x7fffffffffffffff, 0x0000000000000020, 0x0000000000000008,
     0x0000040000000000, 0x0000000000002000, 0x0000000000000389, 0x0000000020000000,
     0x8000000000701000, 0x0000010080000001, 0x0001000000000000, 0x0000000000000010,
     0x00003e0000000040, 0x000000000000103e, 0x000000000000001e, 0x0000000008000000,
     0x0202000000000000, 0x0400000000000000, 0xc000000000000000, 0x000000000001f000,
     0x4000000000000000, 0x0000000000001000, 0x0000000000040000, 0x0000000000000040,
     0x0000000000400000, 0x0000100000000000, 0x0008400000000000, 0x0000000200000000,
     0x0100000000001040, 0x0040000000000000, 0xffffffffffff1fff, 0xffffffffffff007f,
     0x00000fffffffffff, 0xc0087fffffffffff, 0xffffffff3fffffff, 0x00fcffffffffffff,
     0xff8000000000007c, 0x03ff0f9ffffff7bb, 0x00ffffffffffffff, 0x7ffc000003ffc00f,
     0xffffc03fffffffff, 0x1fffffff800c007f, 0xcc37fffffffffff8, 0x7fffffdfc3ffbfff,
     0x001981ffffffffff, 0xeffffffff3ff2ff7, 0x3e62ffffffffffff, 0x003fcffff8000005,
     0xffff7f7f007e7e7e, 0xffff00ffffffffff, 0x03ff1edfffffffff, 0x0ffffffffffff87f,
     0xffff3fffffffffff, 0x0000000003ffffff, 0x5f7fffffa0f8007f, 0xffffffffffffffdb,
     0xfffffffffff80003, 0xffffffffffff0000, 0xfffffffffffcffff, 0x3fff0000000000ff,
     0xffff000003ff0000, 0xffdf0f7ffff7ffff, 0x1fffffffffffffff, 0x7fffffff3fffffff,
     0x30007f7f1cfcfcfc},
    {1, 2,  3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 10, 11, 12, 13, 5, 14, 15, 5, 5, 16, 5, 5, 5, 5, 5, 5, 5,
     5, 17, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5},
    {1,   2,   3,   4,   2,   5,   6,   7,   7,   8,   9,   10,  11,  12,  13,  2,   2,   14,  15,
     16,  17,  7,   7,   2,   2,   2,   2,   18,  19,  7,   7,   20,  21,  22,  23,  24,  7,   25,
     26,  27,  28,  29,  30,  31,  32,  33,  7,   2,   34,  35,  36,  37,  7,   7,   7,   7,   38,
     7,   7,   16,  39,  7,   40,  41,  42,  43,  44,  45,  46,  47,  48,  49,  7,   50,  51,  52,
     53,  7,   7,   54,  55,  56,  57,  7,   7,   58,  59,  60,  61,  62,  63,  64,  7,   7,   7,
     65,  7,   66,  67,  7,   7,   68,  69,  70,  71,  72,  73,  7,   7,   7,   7,   74,  75,  76,
     7,   77,  78,  79,  7,   7,   7,   7,   80,  7,   7,   7,   81,  2,   2,   2,   2,   2,   2,
     2,   2,   2,   2,   2,   2,   2,   2,   82,  7,   2,   83,  2,   2,   2,   84,  7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   85,  7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   2,   2,   2,   2,   2,   2,   2,   2,   2,   86,  7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   2,   2,   2,
     2,   2,   2,   2,   2,   73,  87,  7,   88,  89,  90,  91,  7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   2,   92,  7,   2,   93,  94,  95,  2,   2,   2,   2,   2,   2,   2,   2,   2,
     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,
     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   54,  2,   2,   2,   2,   2,   2,   2,   2,
     2,   2,   2,   35,  7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   2,   2,   2,   2,   96,  97,  2,   2,   2,   2,   2,   98,  7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   2,   99,  100, 7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   2,   2,   2,   101, 102, 103, 104,
     105, 2,   106, 7,   107, 2,   108, 7,   7,   2,   109, 110, 111, 112, 113, 2,   2,   2,   2,
     114, 2,   2,   2,   2,   115, 2,   2,   2,   2,   2,   2,   2,   2,   116, 117, 118, 7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   119, 120, 7,   7,   7,   7,   7,   121, 7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   2,   2,   2,   122, 2,   123,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   124, 125, 7,   126, 7,   7,   7,   127,
     128, 129, 130, 7,   7,   7,   7,   131, 2,   132, 133, 134, 135, 136, 137, 138, 139, 7,   7,
     2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   2,   140, 2,   141, 2,
     142, 143, 144, 145, 7,   146, 147, 148, 149, 2,   150, 151, 7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   152, 153, 7,   154, 155,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   156, 7,   157, 7,   7,   7,   7,
     158, 159, 7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   160, 7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   161, 7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   162, 7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   163, 7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   2,   2,
     2,   2,   2,   2,   2,   2,   164, 7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7,
     7,   7,   7,   7,   7,   7,   7,   7,   7,   7,   7},
    {0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,
     0xff8fffffffffff87, 0x000000010fff7fff, 0x1fffffffffff0000, 0x0000000000000000,
     0xffffffff1fffffff, 0x0ffffffe0001ffff, 0xffffe00fffffffff, 0x003fffffffff07ff,
     0xffffffffbfffffff, 0x00000000003fff0f, 0xffff03ff3fffffff, 0x0fffffffff0fffff,
     0xffff00ffffffffff, 0x0000800fffffffff, 0x007fffffffffffff, 0x000000ff003fffff,
     0x91bffffffffffd3f, 0xffffffffffbfffff, 0x0000ff807fffffff, 0xf837ffff00000000,
     0x83ffffff8fffffff, 0xf0ffffffffffffff, 0xfffffffffffcffff, 0x003ffffffeef0001,
     0xffffffff01ff01ff, 0x00000000ffffffff, 0x007ff81fffffffff, 0xfe3fffffffffffff,
     0xff07ffffff3fffff, 0x0000fe001e03ffff, 0x00000000000001ff, 0x0007ffffffffffff,
     0xfc07ffffffffffff, 0x03ff000fffffffff, 0x7fffffff00000000, 0x0000000003fe003f,
     0x007fffff00000000, 0x00fffffffffffffd, 0x0000fffffffc3f80, 0xd987fffffffffffc,
     0x03ff01ffffff0003, 0xffc0107ffffffff8, 0x0077ffffffff007f, 0x803ffffffffffffc,
     0x001ffffeffff21ff, 0x3f2c7ffffffbffff, 0xffff03ffbfffbd7f, 0x03ff00077fffffff,
     0xa3edfdfffff99fec, 0x0000000fe001399e, 0x00ffffffffffffff, 0x00000000abffffa3,
     0x5a06ffffffffffff, 0x0000000003ff00f2, 0x4f037fffffffffff, 0x000000000ffffffe,
     0x5807ffffffffffff, 0x00001fff03ff001e, 0x0140d7ffffffffff, 0x00000000000003ff,
     0xffff004307ffffff, 0x09007fffffffffff, 0xffffffff00000000, 0x8007ffffffffffff,
     0xfffffcff00000000, 0x0000001ef00fffff, 0x8607fffffffff801, 0xfffffffff181007f,
     0x00000007fc8003ff, 0x01ffffffffffffff, 0x4000fffffffffdff, 0xffff1fffffff003f,
     0x001202000000ffff, 0x0001fffffffffb7f, 0xfffffdbf03ff0040, 0x000003ff01587fff,
     0x01e7ffff00000000, 0x8003ffffffffffff, 0x0000000003ffffff, 0x001f7fffffffffff,
     0x000000000000000f, 0x00007fffffffffff, 0x000000000000007f, 0x0000c3ff7fffffff,
     0x00203fffffff0000, 0xff80ffffffffffff, 0xe0fffffbfbff003f, 0x000000000000ffff,
     0x0000000007ffffff, 0xffffffffffff07ff, 0x00000000fff800ff, 0x0000000f00000000,
     0x000000007fffffff, 0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff,
     0x0000000093ff01ff, 0x003fffffffffffff, 0xfffffe7fffffffff, 0x00003c5fffffffff,
     0xffffc3fffffff018, 0x000001ffffffffff, 0x0000000000000023, 0x000fffff00000000,
     0x01ffffff007fffff, 0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef,
     0x7bffffffdfdfe7bf, 0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xffffffffffffcfff,
     0x0780000000000000, 0xffdfe00000000000, 0x0000000000000fef, 0x3f801fffffffffff,
     0x000000000000c3ff, 0x83ff0fffffffffff, 0x000000000000ff9f, 0x00000000c3ff080f,
     0xfffe000000000000, 0x001fffffffffffff, 0x3ffffffffffffffe, 0x0af7fe96ffffffef,
     0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x0003000000000000, 0xffff0fffffffffff,
     0xfffe7fff000fffff, 0x003ffffffffefffe, 0xffffffffffff1fff, 0xffff1fffffffffff,
     0x00001fffffffffff, 0xffffffc000000000, 0x0fffffffffff0007, 0x0000003f000301ff,
     0x07ff1fff003fffff, 0x000fffffffffffff, 0x00000fff01ffffff, 0xffffffffffff0fff,
     0xffffffff03ff00ff, 0x00003fffffff00ff, 0xffffffffffffefff, 0xfc7bffffffffffff,
     0xffffc7e7ffffffff, 0xffffffffffffe7ff, 0x070f3fff000fffff, 0x00000000003f0007,
     0x0000000000000003, 0x0000001000000000, 0x0000000400000000, 0x0000000200000000,
     0x0000040000000000, 0x0000000010001008, 0x2000040000000000, 0x0000000002000000,
     0x0000000000010000, 0x0000000001000000, 0x0000000008000000, 0x0000200000000000,
     0x000000003fffffff}};
static constexpr __bool_trie<32, 991, 1, 0, 74, 255, 1, 0, 449, 7, 56, 58> __prop_gr_ext_data{
    {0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0xffffffffffffffff, 0x0000ffffffffffff, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x00000000000003f8, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0xbffffffffffe0000, 0x00000000000000b6,
     0x0000000007ff0000, 0x00010000fffff800, 0x0000000000000000, 0x00003d9f9fc00000,
     0xffff000000020000, 0x00000000000007ff, 0x0001ffc000000000, 0x200ff80000000000},
    {1,  2,  3,  4,  5,  6,  7,  8,  9,  8,  10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 2,  21, 22,
     23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  33, 2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  34, 35, 36, 37, 38, 2,  39, 2,  40, 2,  2,  2,  41,
     42, 43, 2,  44, 45, 46, 47, 48, 2,  2,  49, 2,  2,  2,  50, 2,  2,  2,  2,  2,  2,  2,  2,  51,
     2,  2,  52, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  53, 2,  54, 2,  55, 2,  2,  2,  2,  2,  2,  2,  2,  56, 2,  57, 2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  58, 59, 60, 2,  2,  2,  2,  61, 2,  2,  62, 63, 64, 65, 66, 67,
     68, 69, 70, 2,  2,  2,  71, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  72, 2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  2,  73,
     2,  2,  2,  2,  2,  59, 2},
    {0x00003eeffbc00000, 0x000000000e000000, 0x0000000000000000, 0xfffffffbfff80000,
     0x1400000000000007, 0x0000000c00fe21fe, 0x5000000000000002, 0x4000000c0080201e,
     0x1000000000000006, 0x0023000000023986, 0xfc00000c000021be, 0xd000000000000002,
     0x0000000c00c0201e, 0x4000000000000004, 0x0000000000802001, 0xc000000000000011,
     0x0000000c00603dc1, 0x9000000000000002, 0x0000000c00603044, 0x5800000000000003,
     0x0000000c0080201e, 0x00000000805c8400, 0x07f2000000000000, 0x0000000000007f80,
     0x1ff2000000000000, 0x0000000000003f00, 0x02a0000003000000, 0x7ffe000000000000,
     0x1ffffffffeffe0df, 0x0000000000000040, 0x66fde00000000000, 0x001e0001c3000000,
     0x0000000020002064, 0x00000000e0000000, 0x001c0000001c0000, 0x000c0000000c0000,
     0x3fb0000000000000, 0x00000000200ffe40, 0x0000000000003800, 0x0000020000000060,
     0x0e04018700000000, 0x0000000009800000, 0x9ff81fe57f400000, 0x7fff000000000000,
     0x17f000000000000f, 0x000ff80000000004, 0x00003b3c00000003, 0x0003a34000000000,
     0x00cff00000000000, 0x031021fdfff70000, 0xfbffffffffffffff, 0x0000000000001000,
     0x0001ffffffff0000, 0x0003800000000000, 0x8000000000000000, 0xffffffff00000000,
     0x0000fc0000000000, 0x0000000006000000, 0x3ff7800000000000, 0x00000000c0000000,
     0x0003000000000000, 0x0000006000000844, 0x8003ffff00000030, 0x00003fc000000000,
     0x000000000003ff80, 0x33c8000000000007, 0x0000002000000000, 0x00667e0000000000,
     0x1000000000001008, 0xc19d000000000000, 0x0040300000000002, 0x0000212000000000,
     0x0000000040000000, 0x0000ffff0000ffff},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 7, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1,  0,  0,  0,  2,  0, 3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  4,  0,  0,  5,  0,  0,  0,  0,  0,  0,  0,  0,  6,  0,  0,
     0,  0,  0,  0,  0,  0, 7,  0,  0,  8,  9,  10, 0,  11, 12, 13, 14, 15, 0,  0,  16, 17, 18, 0,
     0,  19, 20, 21, 22, 0, 0,  23, 24, 25, 26, 27, 0,  28, 0,  0,  0,  29, 0,  0,  0,  0,  0,  0,
     30, 31, 32, 33, 0,  0, 0,  0,  0,  34, 0,  35, 0,  36, 37, 38, 0,  0,  0,  0,  39, 0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  40, 41, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 42, 43, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  44, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 45, 46, 0,  0,  47, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  48, 49, 50, 0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  51, 0,  0,  0,  41, 0,  0,
     0,  0,  0,  0,  52, 0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  53, 0, 54, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0, 0,  0,  0,  55, 56, 0,  0,  56, 56, 56, 57},
    {0x0000000000000000, 0x2000000000000000, 0x0000000100000000, 0x07c0000000000000,
     0x870000000000f06e, 0x0000006000000000, 0x000000f000000000, 0x000000000001ffc0,
     0xff00000000000002, 0x800000000000007f, 0x0678000000000003, 0x001fef8000000007,
     0x0008000000000000, 0x7fc0000000000003, 0x0000000000001e00, 0x40d3800000000000,
     0x000007f880000000, 0x5800000000000003, 0x001f1fc000800001, 0xff00000000000000,
     0x000000004000005c, 0xa5f9000000000000, 0x000000000000000d, 0xb03c800000000000,
     0x0000000030000001, 0xa7f8000000000000, 0x0000000000000001, 0x00bf280000000000,
     0x00000fbce0000000, 0x06ff800000000000, 0x000000010cf00000, 0x79f80000000007fe,
     0x000000000e7e0080, 0x00000000037ffc00, 0xbf7f000000000000, 0x006dfcfffffc0000,
     0xb47e000000000000, 0x00000000000000bf, 0x0000000000a30000, 0x0018000000000000,
     0x001f000000000000, 0x007f000000000000, 0x0000000000008000, 0x0000000000078000,
     0x0000000060000000, 0xf807c3a000000000, 0x00003c0000000fe7, 0x000000000000001c,
     0xf87fffffffffffff, 0x00201fffffffffff, 0x0000fffef8000010, 0x000007dbf9ffff7f,
     0x0000f00000000000, 0x00000000007f0000, 0x00000000000007f0, 0xffffffff00000000,
     0xffffffffffffffff, 0x0000ffffffffffff}};
static constexpr __range_array<13> __prop_hex_data = {
    {__range_array_elem{0x0000, 0} /*48*/, __range_array_elem{0x0030, 1} /*10*/,
     __range_array_elem{0x003A, 0} /*7*/, __range_array_elem{0x0041, 1} /*6*/,
     __range_array_elem{0x0047, 0} /*26*/, __range_array_elem{0x0061, 1} /*6*/,
     __range_array_elem{0x0067, 0} /*65193*/, __range_array_elem{0xFF10, 1} /*10*/,
     __range_array_elem{0xFF1A, 0} /*7*/, __range_array_elem{0xFF21, 1} /*6*/,
     __range_array_elem{0xFF27, 0} /*26*/, __range_array_elem{0xFF41, 1} /*6*/,
     __range_array_elem{0xFF47, 0} /*1048760*/}};
static constexpr __bool_trie<0, 812, 160, 20, 33, 25, 7, 224, 489, 64, 23, 19> __prop_ideo_data{
    {},
    {1,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 2,  0, 3,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  4,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 5,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 6,  7, 8,  9,  5,
     10, 0, 0,  0,  0,  0,  0,  11, 12, 0,  0,  0,  0,  0,  0, 0, 13, 0, 14, 0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  15, 0,  0,  0,  0,  0,  0,  0,  16, 0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  17, 0,  18, 19, 0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  20, 0,  21, 0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  22, 0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 23, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 24, 0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  20, 0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 23, 0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  25, 0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 26, 0, 10, 0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  27, 28, 0,  29, 0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 21, 0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 0, 0,  0, 0,  0, 0,  0, 0,  0,  0,
     0,  0, 0,  0,  30, 30, 30, 30, 30, 31, 30, 32},
    {0x0000000000000000, 0x070003fe000000c0, 0x0000000000000020, 0x0000000000000008,
     0x0000040000000000, 0x0000000000002000, 0x0000000000000389, 0x0000000020000000,
     0x8000000000701000, 0x0000010080000001, 0x0001000000000000, 0x0000000000000010,
     0x00003e0000000040, 0x000000000000103e, 0x000000000000001e, 0x0000000008000000,
     0x0202000000000000, 0x0400000000000000, 0xc000000000000000, 0x000000000001f000,
     0x4000000000000000, 0x0000000000001000, 0x0000000000040000, 0x0000000000000040,
     0x0000000000400000, 0x0000100000000000, 0x0008400000000000, 0x0000000200000000,
     0x0100000000001040, 0x0040000000000000, 0xffffffffffffffff, 0xffff3fffffffffff,
     0x0000000003ffffff},
    {1, 2, 0, 0, 3, 0, 0, 0, 0, 4, 0, 5, 6, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 8},
    {1, 1, 1, 1,  1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,
     1, 1, 1, 1,  1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,
     1, 1, 1, 1,  1,  1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 1, 1, 1, 1, 1, 1,  1, 1,  1,
     1, 1, 1, 1,  1,  1, 1, 1, 2, 1,  1, 1, 1, 1, 1, 1, 1,  1, 1, 1, 3, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  4, 1, 1, 1, 1, 1, 5, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 6, 7, 0, 8, 9, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 11, 0,
     0, 0, 0, 12, 13, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  15, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0,
     0, 0, 0, 0,  0,  0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 1,  1, 1, 1, 1, 1, 1, 1, 18},
    {0x0000000000000000, 0xffffffffffffffff, 0x00ffffffffffffff, 0x0007ffffffffffff,
     0xffff000000000000, 0x0fffffffffffffff, 0x0000000000000003, 0x0000001000000000,
     0x0000000400000000, 0x0000000200000000, 0x0000040000000000, 0x0000000010001008,
     0x2000040000000000, 0x0000000002000000, 0x0000000000010000, 0x0000000001000000,
     0x0000000008000000, 0x0000200000000000, 0x000000003fffffff}};
static constexpr __range_array<5> __prop_idsb_data = {
    {__range_array_elem{0x0000, 0} /*12272*/, __range_array_elem{0x2FF0, 1} /*2*/,
     __range_array_elem{0x2FF2, 0} /*2*/, __range_array_elem{0x2FF4, 1} /*8*/,
     __range_array_elem{0x2FFC, 0} /*1101827*/}};
static constexpr flat_array<2> __prop_idst_data{{0x2FF2, 0x2FF3}};
static constexpr flat_array<2> __prop_join_c_data{{0x200C, 0x200D}};
static constexpr __range_array<15> __prop_loe_data = {
    {__range_array_elem{0x0000, 0} /*3648*/, __range_array_elem{0x0E40, 1} /*5*/,
     __range_array_elem{0x0E45, 0} /*123*/, __range_array_elem{0x0EC0, 1} /*5*/,
     __range_array_elem{0x0EC5, 0} /*2800*/, __range_array_elem{0x19B5, 1} /*3*/,
     __range_array_elem{0x19B8, 0} /*2*/, __range_array_elem{0x19BA, 1} /*1*/,
     __range_array_elem{0x19BB, 0} /*37114*/, __range_array_elem{0xAAB5, 1} /*2*/,
     __range_array_elem{0xAAB7, 0} /*2*/, __range_array_elem{0xAAB9, 1} /*1*/,
     __range_array_elem{0xAABA, 0} /*1*/, __range_array_elem{0xAABB, 1} /*2*/,
     __range_array_elem{0xAABD, 0} /*1070402*/}};
static constexpr __bool_trie<32, 991, 1, 0, 55, 255, 1, 0, 378, 13, 57, 42> __prop_oalpha_data{
    {0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000020, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0xbfff000000000000, 0x00000000000000b6,
     0x0000000007ff0000, 0x00010000fefff800, 0x0000000000000000, 0x0000219e1fc00000,
     0xffff000000020000, 0x0000000000000000, 0x0001ffc000000000, 0x0000000000000000},
    {1,  1,  2,  3,  4,  5,  6,  5,  7,  5,  8, 5,  9,  10, 11, 12, 13, 5,  13, 12, 14, 15, 16, 17,
     18, 19, 18, 1,  20, 21, 1,  22, 23, 24, 1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 25, 25, 26, 27, 1,  1,  28, 1,  29, 1,  1,  1,  30,
     31, 1,  1,  32, 33, 34, 35, 36, 1,  1,  1, 1,  1,  1,  37, 1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  26, 38, 1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  39, 1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  40, 41, 1, 1,  1,  1,  1,  42, 1,  43, 44, 45, 46, 47, 48, 49,
     50, 51, 52, 1,  1,  1,  53, 1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 54, 1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1,
     1,  1,  1,  1,  1,  1,  1},
    {0x00001eeff8c00000, 0x0000000000000000, 0xffff03f8fff00000, 0xcc0000000000000f,
     0x0000000c00e0dfff, 0xc00000000000000e, 0x0000000c0080199f, 0x0023000000021987,
     0x1c00000c00001bbf, 0x0000000c00c0199f, 0xc000000000000004, 0x0000000000801dc7,
     0xc00000000000000f, 0x0000000c00601ddf, 0x0000000c00801ddf, 0x000000000000000c,
     0x000c0000ff5f8000, 0x07f2000000000000, 0x0000000000002000, 0x1bf2000000000000,
     0xfffe000000000000, 0x1ffffffffeffe003, 0x797ff80000000000, 0x001e3f9dc3c00000,
     0x000000003c00bffc, 0x000c0000000c0000, 0xffc0000000000000, 0x00000000000001ff,
     0x0000020000000060, 0x01ff0fff00000000, 0x000000000f800000, 0x001ffffe7fe00000,
     0xffe000000000001f, 0x000000000000000f, 0x000033fe00000007, 0x0003ff8000000000,
     0x007ffff000000000, 0x001fff8000000000, 0x000003ffffffffff, 0xffffffff00000000,
     0x0ff0000000000000, 0x00000000c0000000, 0x000000f800000804, 0xfff0000000000003,
     0x800000000000002f, 0x000007c000000000, 0x000000000007ff80, 0xfff000000000000f,
     0x0000002000000000, 0x007ffe0000000000, 0x3800000000003008, 0x419d000000000000,
     0x0020f80000000000, 0x000007f800000000, 0x0000000040000000},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 2, 5, 6, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  2,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  3,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  4,  5,  6,  0, 7,  8,  9,  0, 10, 0, 0, 11, 12, 13, 0, 0,  14, 15, 16, 17, 0,
     0,  18, 19, 20, 21, 22, 0, 23, 0,  0,  0, 24, 0, 0, 0,  0,  0,  0, 25, 26, 27, 28, 0,  0,
     0,  0,  0,  29, 0,  30, 0, 31, 32, 33, 0, 0,  0, 0, 34, 0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     35, 36, 0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  37, 0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  38, 0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  39, 0,  0, 0,  0, 0, 0,  0,  0,  0, 0,  0,  0,  0,  0,  0,
     0,  0,  0,  0,  0,  0,  0, 0,  0,  0,  0, 0,  0, 0, 0,  16, 40, 41},
    {0x0000000000000000, 0x07c0000000000000, 0x000000000000f06e, 0x000000f000000000,
     0xff00000000000007, 0x000000000000003f, 0x01ff000000000004, 0x0007ff8000000007,
     0x0000000000000060, 0xfff8000000000007, 0x409ff00000000000, 0x000001ff80000000,
     0xc00000000000000f, 0x0000000c0080199f, 0xffe0000000000000, 0x000000000000003b,
     0xffff000000000000, 0x0000000000000003, 0x7f3f800000000000, 0x0000000030000000,
     0x7fff000000000000, 0x0000000000000001, 0x003ff80000000000, 0x000007ffe0000000,
     0x01fff00000000000, 0x00000010fcfe0000, 0x7be00000000007fe, 0x000000000ffe0000,
     0x0000000000fffc00, 0x7f7f800000000000, 0x007ffefffffc0000, 0xb47e000000000000,
     0x000000000000008b, 0x00000000007b7c00, 0x0078000000000000, 0xfffffffffffe8000,
     0x00000000000780ff, 0x0000000040000000, 0x000007dbf9ffff7f, 0x0000000000000080,
     0xffff03ffffff03ff, 0x00000000000003ff}};
static constexpr flat_array<9> __prop_odi_data{
    {0x034F, 0x115F, 0x1160, 0x17B4, 0x17B5, 0x2065, 0x3164, 0xFFA0, 0xE0000}};
static constexpr __range_array<49> __prop_ogr_ext_data = {
    {__range_array_elem{0x0000, 0} /*2494*/,
     __range_array_elem{0x09BE, 1} /*1*/,
     __range_array_elem{0x09BF, 0} /*24*/,
     __range_array_elem{0x09D7, 1} /*1*/,
     __range_array_elem{0x09D8, 0} /*358*/,
     __range_array_elem{0x0B3E, 1} /*1*/,
     __range_array_elem{0x0B3F, 0} /*24*/,
     __range_array_elem{0x0B57, 1} /*1*/,
     __range_array_elem{0x0B58, 0} /*102*/,
     __range_array_elem{0x0BBE, 1} /*1*/,
     __range_array_elem{0x0BBF, 0} /*24*/,
     __range_array_elem{0x0BD7, 1} /*1*/,
     __range_array_elem{0x0BD8, 0} /*234*/,
     __range_array_elem{0x0CC2, 1} /*1*/,
     __range_array_elem{0x0CC3, 0} /*18*/,
     __range_array_elem{0x0CD5, 1} /*2*/,
     __range_array_elem{0x0CD7, 0} /*103*/,
     __range_array_elem{0x0D3E, 1} /*1*/,
     __range_array_elem{0x0D3F, 0} /*24*/,
     __range_array_elem{0x0D57, 1} /*1*/,
     __range_array_elem{0x0D58, 0} /*119*/,
     __range_array_elem{0x0DCF, 1} /*1*/,
     __range_array_elem{0x0DD0, 0} /*15*/,
     __range_array_elem{0x0DDF, 1} /*1*/,
     __range_array_elem{0x0DE0, 0} /*3413*/,
     __range_array_elem{0x1B35, 1} /*1*/,
     __range_array_elem{0x1B36, 0} /*1238*/,
     __range_array_elem{0x200C, 1} /*1*/,
     __range_array_elem{0x200D, 0} /*4129*/,
     __range_array_elem{0x302E, 1} /*2*/,
     __range_array_elem{0x3030, 0} /*53102*/,
     __range_array_elem{0xFF9E, 1} /*2*/,
     __range_array_elem{0xFFA0, 0} /*5022*/,
     __range_array_elem{0x1133E, 1} /*1*/,
     __range_array_elem{0x1133F, 0} /*24*/,
     __range_array_elem{0x11357, 1} /*1*/,
     __range_array_elem{0x11358, 0} /*344*/,
     __range_array_elem{0x114B0, 1} /*1*/,
     __range_array_elem{0x114B1, 0} /*12*/,
     __range_array_elem{0x114BD, 1} /*1*/,
     __range_array_elem{0x114BE, 0} /*241*/,
     __range_array_elem{0x115AF, 1} /*1*/,
     __range_array_elem{0x115B0, 0} /*48053*/,
     __range_array_elem{0x1D165, 1} /*1*/,
     __range_array_elem{0x1D166, 0} /*8*/,
     __range_array_elem{0x1D16E, 1} /*5*/,
     __range_array_elem{0x1D173, 0} /*798381*/,
     __range_array_elem{0xE0020, 1} /*96*/,
     __range_array_elem{0xE0080, 0} /*196479*/}};
static constexpr __range_array<9> __prop_oidc_data = {
    {__range_array_elem{0x0000, 0} /*183*/, __range_array_elem{0x00B7, 1} /*1*/,
     __range_array_elem{0x00B8, 0} /*719*/, __range_array_elem{0x0387, 1} /*1*/,
     __range_array_elem{0x0388, 0} /*4065*/, __range_array_elem{0x1369, 1} /*9*/,
     __range_array_elem{0x1372, 0} /*1640*/, __range_array_elem{0x19DA, 1} /*1*/,
     __range_array_elem{0x19DB, 0} /*1107492*/}};
static constexpr flat_array<6> __prop_oids_data{{0x1885, 0x1886, 0x2118, 0x212E, 0x309B, 0x309C}};
static constexpr __range_array<41> __prop_olower_data = {
    {__range_array_elem{0x0000, 0} /*170*/,
     __range_array_elem{0x00AA, 1} /*1*/,
     __range_array_elem{0x00AB, 0} /*15*/,
     __range_array_elem{0x00BA, 1} /*1*/,
     __range_array_elem{0x00BB, 0} /*501*/,
     __range_array_elem{0x02B0, 1} /*9*/,
     __range_array_elem{0x02B9, 0} /*7*/,
     __range_array_elem{0x02C0, 1} /*2*/,
     __range_array_elem{0x02C2, 0} /*30*/,
     __range_array_elem{0x02E0, 1} /*5*/,
     __range_array_elem{0x02E5, 0} /*96*/,
     __range_array_elem{0x0345, 1} /*1*/,
     __range_array_elem{0x0346, 0} /*52*/,
     __range_array_elem{0x037A, 1} /*1*/,
     __range_array_elem{0x037B, 0} /*6577*/,
     __range_array_elem{0x1D2C, 1} /*63*/,
     __range_array_elem{0x1D6B, 0} /*13*/,
     __range_array_elem{0x1D78, 1} /*1*/,
     __range_array_elem{0x1D79, 0} /*34*/,
     __range_array_elem{0x1D9B, 1} /*37*/,
     __range_array_elem{0x1DC0, 0} /*689*/,
     __range_array_elem{0x2071, 1} /*1*/,
     __range_array_elem{0x2072, 0} /*13*/,
     __range_array_elem{0x207F, 1} /*1*/,
     __range_array_elem{0x2080, 0} /*16*/,
     __range_array_elem{0x2090, 1} /*13*/,
     __range_array_elem{0x209D, 0} /*211*/,
     __range_array_elem{0x2170, 1} /*16*/,
     __range_array_elem{0x2180, 0} /*848*/,
     __range_array_elem{0x24D0, 1} /*26*/,
     __range_array_elem{0x24EA, 0} /*1938*/,
     __range_array_elem{0x2C7C, 1} /*2*/,
     __range_array_elem{0x2C7E, 0} /*31262*/,
     __range_array_elem{0xA69C, 1} /*2*/,
     __range_array_elem{0xA69E, 0} /*210*/,
     __range_array_elem{0xA770, 1} /*1*/,
     __range_array_elem{0xA771, 0} /*135*/,
     __range_array_elem{0xA7F8, 1} /*2*/,
     __range_array_elem{0xA7FA, 0} /*866*/,
     __range_array_elem{0xAB5C, 1} /*4*/,
     __range_array_elem{0xAB60, 0} /*1070239*/}};
static constexpr __bool_trie<32, 893, 96, 3, 21, 2, 13, 241, 107, 80, 5, 16> __prop_omath_data{
    {0x0000000000000000, 0x0000000040000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0033000000270000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1, 2, 3, 4,  5, 6, 7, 8, 0, 0, 0,  0,  9, 0, 10, 11, 0, 0, 0, 0, 0, 0,  12, 13, 14, 15, 0, 0,
     0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 17, 18, 0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,
     0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0,  0,  0, 0, 0,  0,  0, 0, 0, 0, 0, 19, 0,  0,  20},
    {0x0000000000000000, 0x001c000000400000, 0x6000001e00000001, 0x0000000000006000,
     0x0000f8621fff0000, 0xf1fbb3103e2ffc84, 0x00000000000003e0, 0xf0c33eb6f3e00000,
     0x000000302feb3fff, 0x0000000000000f00, 0x00b0000000000000, 0x0000000400010000,
     0xf07fc00300000000, 0x00001f94000f8cc1, 0x0000000000000060, 0x0000600f00000005,
     0x0000ffc000000060, 0x0000000001fffff8, 0x300000000f000000, 0x0000010a00000000,
     0x5000000000000000},
    {1, 2},
    {1, 2, 3, 4, 5, 6, 1, 1, 1, 1, 7, 8, 9, 10, 11, 12, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 0,  0,  0, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0, 0, 13, 14, 15},
    {0x0000000000000000, 0xffffffffffffffff, 0xffffffffffdfffff, 0xebffde64dfffffff,
     0xffffffffffffffef, 0x7bffffffdfdfe7bf, 0xfffffffffffdfc5f, 0xffffff3fffffffff,
     0xf7fffffff7fffffd, 0xffdfffffffdfffff, 0xffff7fffffff7fff, 0xfffffdfffffffdff,
     0xffffffffffffcff7, 0x0af7fe96ffffffef, 0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff}};
static constexpr __range_array<11> __prop_oupper_data = {
    {__range_array_elem{0x0000, 0} /*8544*/, __range_array_elem{0x2160, 1} /*16*/,
     __range_array_elem{0x2170, 0} /*838*/, __range_array_elem{0x24B6, 1} /*26*/,
     __range_array_elem{0x24D0, 0} /*117856*/, __range_array_elem{0x1F130, 1} /*26*/,
     __range_array_elem{0x1F14A, 0} /*6*/, __range_array_elem{0x1F150, 1} /*26*/,
     __range_array_elem{0x1F16A, 0} /*6*/, __range_array_elem{0x1F170, 1} /*26*/,
     __range_array_elem{0x1F18A, 0} /*986741*/}};
static constexpr __bool_trie<32, 890, 96, 6, 15, 0, 0, 0, 0, 0, 0, 0> __prop_pat_syn_data{
    {0xfc00fffe00000000, 0x7800000178000001, 0x88435afe00000000, 0x0080000000800000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000},
    {1, 2, 0, 0, 0,  0, 3, 4, 4, 4, 4, 4, 4, 4, 4,  4, 5,  6, 0, 0, 4, 4, 4, 4, 4, 4, 4, 4,  4, 7,
     8, 4, 4, 4, 4,  4, 4, 4, 4, 4, 4, 4, 4, 4, 4,  9, 10, 4, 0, 0, 0, 0, 0, 0, 0, 0, 4, 11, 0, 0,
     0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0,
     0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0,  0, 0, 14},
    {0x0000000000000000, 0x7fff00ffffff0000, 0x000000007feffffe, 0xffffffffffff0000,
     0xffffffffffffffff, 0x0000007fffffffff, 0x00000000000007ff, 0x003fffffffffffff,
     0xfffffffffff00000, 0xffcfffffffffffff, 0xffffffffff3fffff, 0x000000000000ffff,
     0x00010001ffffff0e, 0xc000000000000000, 0x0000000000000060},
    {},
    {},
    {}};
static constexpr flat_array<11> __prop_pat_ws_data{
    {0x0009, 0x000A, 0x000B, 0x000C, 0x000D, 0x0020, 0x0085, 0x200E, 0x200F, 0x2028, 0x2029}};
static constexpr flat_array<11> __prop_pcm_data{
    {0x0600, 0x0601, 0x0602, 0x0603, 0x0604, 0x0605, 0x06DD, 0x070F, 0x08E2, 0x110BD, 0x110CD}};
static constexpr __range_array<27> __prop_qmark_data = {
    {__range_array_elem{0x0000, 0} /*34*/,
     __range_array_elem{0x0022, 1} /*1*/,
     __range_array_elem{0x0023, 0} /*4*/,
     __range_array_elem{0x0027, 1} /*1*/,
     __range_array_elem{0x0028, 0} /*131*/,
     __range_array_elem{0x00AB, 1} /*1*/,
     __range_array_elem{0x00AC, 0} /*15*/,
     __range_array_elem{0x00BB, 1} /*1*/,
     __range_array_elem{0x00BC, 0} /*8028*/,
     __range_array_elem{0x2018, 1} /*8*/,
     __range_array_elem{0x2020, 0} /*25*/,
     __range_array_elem{0x2039, 1} /*2*/,
     __range_array_elem{0x203B, 0} /*3591*/,
     __range_array_elem{0x2E42, 1} /*1*/,
     __range_array_elem{0x2E43, 0} /*457*/,
     __range_array_elem{0x300C, 1} /*4*/,
     __range_array_elem{0x3010, 0} /*13*/,
     __range_array_elem{0x301D, 1} /*3*/,
     __range_array_elem{0x3020, 0} /*52769*/,
     __range_array_elem{0xFE41, 1} /*4*/,
     __range_array_elem{0xFE45, 0} /*189*/,
     __range_array_elem{0xFF02, 1} /*1*/,
     __range_array_elem{0xFF03, 0} /*4*/,
     __range_array_elem{0xFF07, 1} /*1*/,
     __range_array_elem{0xFF08, 0} /*90*/,
     __range_array_elem{0xFF62, 1} /*2*/,
     __range_array_elem{0xFF64, 0} /*1048731*/}};
static constexpr __range_array<7> __prop_radical_data = {
    {__range_array_elem{0x0000, 0} /*11904*/, __range_array_elem{0x2E80, 1} /*26*/,
     __range_array_elem{0x2E9A, 0} /*1*/, __range_array_elem{0x2E9B, 1} /*89*/,
     __range_array_elem{0x2EF4, 0} /*12*/, __range_array_elem{0x2F00, 1} /*214*/,
     __range_array_elem{0x2FD6, 0} /*1101865*/}};
static constexpr __range_array<3> __prop_ri_data = {{__range_array_elem{0x0000, 0} /*127462*/,
                                                     __range_array_elem{0x1F1E6, 1} /*26*/,
                                                     __range_array_elem{0x1F200, 0} /*986623*/}};
static constexpr flat_array<46> __prop_sd_data{
    {0x0069,  0x006A,  0x012F,  0x0249,  0x0268,  0x029D,  0x02B2,  0x03F3,  0x0456,  0x0458,
     0x1D62,  0x1D96,  0x1DA4,  0x1DA8,  0x1E2D,  0x1ECB,  0x2071,  0x2148,  0x2149,  0x2C7C,
     0x1D422, 0x1D423, 0x1D456, 0x1D457, 0x1D48A, 0x1D48B, 0x1D4BE, 0x1D4BF, 0x1D4F2, 0x1D4F3,
     0x1D526, 0x1D527, 0x1D55A, 0x1D55B, 0x1D58E, 0x1D58F, 0x1D5C2, 0x1D5C3, 0x1D5F6, 0x1D5F7,
     0x1D62A, 0x1D62B, 0x1D65E, 0x1D65F, 0x1D692, 0x1D693}};
static constexpr __bool_trie<32, 991, 1, 0, 29, 255, 1, 0, 322, 41, 21, 23> __prop_sterm_data{
    {0x8000400200000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000200, 0x0000000000000000,
     0x00000000c0000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000100000,
     0x0000000000000007, 0x0000000000000000, 0x0000000000000000, 0x0200000000000000},
    {1,  1,  1,  1,  2,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 3, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  4,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  5,  1, 1, 6,  1, 1, 1,  7, 1, 1, 1, 1, 8,  1,  1,  1,  1, 9,  1,  1, 10, 1,
     1,  11, 12, 1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  13, 14, 1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 15, 1,  1, 1,  1,
     1,  1,  1,  16, 1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  17, 1,  1,  1, 1, 18, 1, 1, 19, 1, 1, 1, 1, 1, 20, 1,  18, 21, 1, 1,  22, 1, 23, 1,
     24, 1,  1,  1,  25, 1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  1,  1, 1,  1,
     1,  1,  1,  1,  1,  1, 1, 1,  1, 1, 1,  1, 1, 1, 1, 1, 1,  1,  1,  1,  1, 1,  26, 1, 1,  27,
     28, 1,  1},
    {0x6280000000000000, 0x0000000000000000, 0x0000003000000000, 0x0000000000000c00,
     0x0000018400000000, 0x0000400000000000, 0x0060000000000000, 0x0000000000000208,
     0x0000000000000030, 0x00000f0000000000, 0x00000000cc000000, 0x1800000000000000,
     0xc000000000000000, 0x3000000000000000, 0x0000000000000380, 0x1000400000000000,
     0x0000000000000004, 0x8000000000000000, 0x000000000000c000, 0x0088000000000000,
     0x00c0000000000000, 0x0000800000000000, 0x0000000000000300, 0x00000000e0000000,
     0x0003000000000000, 0x0000080000000000, 0x0000000000c40000, 0x0000000080004002,
     0x0000000200000000},
    {1, 2, 2, 2, 2, 3, 2, 2, 2, 2, 4, 2, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
    {1, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  2,  0,  0,  0, 3,  4, 5,
     0, 6,  0, 7,  8, 0,  9,  0,  0, 0, 0,  0,  0, 10, 0, 0, 0, 0, 0,  11, 0,  12, 0,  0, 13, 0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 14, 15, 0, 0,  0, 0, 0, 0, 12, 0,  0,  0,  0,  0, 0,  0, 0,
     0, 16, 0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,  0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,  0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,  0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,  0, 0,
     0, 0,  0, 17, 0, 18, 16, 19, 0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  20, 0,  0,  0, 0,  0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,  0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  21, 0, 0,  0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 0,  0, 0,
     0, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0,  0,  0, 22},
    {0x0000000000000000, 0x0000000000c00000, 0x0000000003e00000, 0x0000000000000180,
     0xc000000000000000, 0x0000000000000003, 0x000000000000000e, 0x00000000c0002060,
     0x1b00000000000000, 0x0000020000000000, 0x0000000000001800, 0x0000000000fffe0c,
     0x0000000000000006, 0x7000000000000000, 0x000000000000000c, 0x0000000018000000,
     0x0180000000000000, 0x0000c00000000000, 0x0020000000000000, 0x0000000000000010,
     0x0000000001000000, 0x0000000080000000, 0x0000000000000100}};
static constexpr __bool_trie<32, 991, 1, 0, 34, 255, 1, 0, 413, 14, 21, 31> __prop_term_data{
    {0x8c00500200000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x4000000000000000, 0x0000000000000080, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000000, 0x0000000000000000,
     0x0000000000000000, 0x0000000000000000, 0x0000000000000200, 0x0000000000000008,
     0x00000000c8001000, 0x0000000000000000, 0x0000000000000000, 0x0000000000100000,
     0x00000000000017ff, 0x0000000000000000, 0x0000000000000000, 0x0300000000000000},
    {1,  2,  2,  2,  3,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 4,  2,
     2,  5,  2,  2,  2,  2, 6, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  7,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  8,  2, 9, 10, 2, 2, 11, 12, 2, 2, 2, 2, 13, 2,  2,  2,  2, 14, 2,  2, 15, 2,
     2,  16, 17, 2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  18, 19, 2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 20, 21, 2, 2,  2,
     2,  2,  2,  22, 2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  17, 2,  2,  2, 2, 23, 2, 2, 24, 2,  2, 2, 2, 2, 25, 2,  26, 27, 2, 2,  19, 2, 28, 2,
     29, 2,  2,  2,  30, 2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  2,  2, 2,  2,
     2,  2,  2,  2,  2,  2, 2, 2,  2, 2, 2,  2,  2, 2, 2, 2, 2,  2,  2,  2,  2, 2,  31, 2, 2,  32,
     33, 2,  2},
    {0x7fff000000000000, 0x0000000040000000, 0x0000000000000000, 0x0000003000000000,
     0x000000000c000000, 0x000000000007e100, 0x0000000000000c00, 0x000001fe00000000,
     0x0000400000000000, 0x0000380000000000, 0x0060000000000000, 0x0000000004700000,
     0x000000000000033c, 0x0000000000000030, 0x00000f0000000000, 0x00000000ec000000,
     0xf800000000000000, 0xc000000000000000, 0x3000000000000000, 0x0000000000000380,
     0x1000400000000000, 0x000000000000d002, 0x0000000000000006, 0x000000000000e000,
     0x00f8000000000000, 0x00c0000000000000, 0x000000000000c000, 0x0000800000000000,
     0x00000000e0000000, 0x0003000080000000, 0x0000080000000000, 0x0000000000f70000,
     0x000000008c005002, 0x0000001200000000},
    {1, 2, 3, 3, 3, 4, 3, 3, 3, 3, 5, 3, 6, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
     3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3},
    {1,  2,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 3, 0, 0,  1, 0,  0, 0,
     0,  4,  0, 5,  6, 0,  7,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 8,  0, 0,  0, 9,
     10, 11, 0, 12, 0, 13, 14, 0, 15, 0, 0, 0, 0, 0,  0,  16, 0, 0, 0, 0, 0, 17, 0, 18, 0, 0,
     19, 0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 20, 21, 0,  0, 0, 0, 0, 0, 22, 0, 0,  0, 0,
     0,  0,  0, 0,  0, 23, 0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  24, 0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 25, 0, 26,
     27, 28, 0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  29, 0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 1, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  0, 0,  0, 0,
     0,  0,  0, 0,  0, 0,  0,  0, 0,  0, 0, 0, 0, 0,  0,  0,  0, 0, 0, 0, 0, 0,  30},
    {0x0000000000000000, 0x0000000080000000, 0x0000000000010000, 0x0000000000800000,
     0x0000000000c00000, 0x003f000000000000, 0xfc00000000000000, 0x000000001e000000,
     0x0000000003e00000, 0x0000000000003f80, 0xc000000000000000, 0x0000000000000003,
     0x000000000000000e, 0x00000000c0002060, 0x1f00000000000000, 0x0000020000000000,
     0x0000000008003800, 0x0000000000fffe3c, 0x0000000000000006, 0x7000000000000000,
     0x000000000000000c, 0x0000000618000000, 0x000200000000000e, 0x0180000000000000,
     0x001f000000000000, 0x0000c00000000000, 0x0020000000000000, 0x0380000000000000,
     0x0000000000000010, 0x0000000001800000, 0x0000000000000780}};
static constexpr __bool_trie<0, 793, 176, 23, 30, 7, 16, 233, 202, 64, 54, 13> __prop_uideo_data{
    {},
    {1, 0, 2,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  3,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  4,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     5, 6, 7,  8,  4, 9,  0, 0,  0,  0,  0, 0, 10, 11, 0, 0,  0,  0,  0, 0, 0,  12, 0, 13, 0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  14, 0, 0, 0,  0,  0, 0,  0,  15, 0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  16, 0, 17, 18, 0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 19, 0, 20, 0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 21,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 22, 0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 23, 0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 19, 0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 22, 0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  24, 0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  25, 0,  9, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 26, 27, 0, 28, 0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 20, 0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0,  0,  0, 0, 0,  0,  0, 0,  0, 0,
     0, 0, 0,  0,  0, 0,  0, 0,  0,  0,  0, 0, 29},
    {0x0000000000000000, 0x0000000000000020, 0x0000000000000008, 0x0000040000000000,
     0x0000000000002000, 0x0000000000000389, 0x0000000020000000, 0x8000000000701000,
     0x0000010080000001, 0x0001000000000000, 0x0000000000000010, 0x00003e0000000040,
     0x000000000000103e, 0x000000000000001e, 0x0000000008000000, 0x0202000000000000,
     0x0400000000000000, 0xc000000000000000, 0x000000000001f000, 0x4000000000000000,
     0x0000000000001000, 0x0000000000040000, 0x0000000000000040, 0x0000000000400000,
     0x0000100000000000, 0x0008400000000000, 0x0000000200000000, 0x0100000000001040,
     0x0040000000000000, 0x0000039a801ac000},
    {1, 0, 2, 3, 0, 0, 4},
    {1, 2, 0, 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0, 0, 0, 0, 0, 0, 5, 0, 6, 0, 0, 0, 0, 7, 8,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0,
     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12},
    {0x0000000000000000, 0x0000000000000003, 0x0000001000000000, 0x0000000400000000,
     0x0000000200000000, 0x0000040000000000, 0x0000000010001008, 0x2000040000000000,
     0x0000000002000000, 0x0000000000010000, 0x0000000001000000, 0x0000000008000000,
     0x0000200000000000}};
static constexpr __range_array<7> __prop_vs_data = {
    {__range_array_elem{0x0000, 0} /*6155*/, __range_array_elem{0x180B, 1} /*3*/,
     __range_array_elem{0x180E, 0} /*58866*/, __range_array_elem{0xFE00, 1} /*16*/,
     __range_array_elem{0xFE10, 0} /*852720*/, __range_array_elem{0xE0100, 1} /*240*/,
     __range_array_elem{0xE01F0, 0} /*196111*/}};
static constexpr __range_array<21> __prop_wspace_data = {
    {__range_array_elem{0x0000, 0} /*9*/,    __range_array_elem{0x0009, 1} /*5*/,
     __range_array_elem{0x000E, 0} /*18*/,   __range_array_elem{0x0020, 1} /*1*/,
     __range_array_elem{0x0021, 0} /*100*/,  __range_array_elem{0x0085, 1} /*1*/,
     __range_array_elem{0x0086, 0} /*26*/,   __range_array_elem{0x00A0, 1} /*1*/,
     __range_array_elem{0x00A1, 0} /*5599*/, __range_array_elem{0x1680, 1} /*1*/,
     __range_array_elem{0x1681, 0} /*2431*/, __range_array_elem{0x2000, 1} /*11*/,
     __range_array_elem{0x200B, 0} /*29*/,   __range_array_elem{0x2028, 1} /*2*/,
     __range_array_elem{0x202A, 0} /*5*/,    __range_array_elem{0x202F, 1} /*1*/,
     __range_array_elem{0x2030, 0} /*47*/,   __range_array_elem{0x205F, 1} /*1*/,
     __range_array_elem{0x2060, 0} /*4000*/, __range_array_elem{0x3000, 1} /*1*/,
     __range_array_elem{0x3001, 0} /*1101822*/}};
static constexpr __bool_trie<32, 991, 1, 0, 156, 255, 1, 0, 1151, 1, 0, 125> __prop_xidc_data{
    {0x03ff000000000000, 0x07fffffe87fffffe, 0x04a0040000000000, 0xff7fffffff7fffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0x0000501f0003ffc3,
     0xffffffffffffffff, 0xb8dfffffffffffff, 0xfffffffbffffd7c0, 0xffbfffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffcfb, 0xffffffffffffffff,
     0xfffeffffffffffff, 0xffffffff027fffff, 0xbffffffffffe01ff, 0x000787ffffff00b6,
     0xffffffff07ff0000, 0xffffc3ffffffffff, 0xffffffffffffffff, 0x9ffffdff9fefffff,
     0xffffffffffff0000, 0xffffffffffffe7ff, 0x0003ffffffffffff, 0x243fffffffffffff},
    {1,   2,   3,   4,   5,   6,   7,   8,   9,   10, 11,  12,  13,  14,  15,  16,  17,  18,  19,
     20,  21,  22,  23,  24,  25,  26,  27,  28,  29, 30,  31,  4,   32,  33,  34,  4,   4,   4,
     4,   4,   35,  36,  37,  38,  39,  40,  41,  42, 4,   4,   4,   4,   4,   4,   4,   4,   43,
     44,  45,  46,  47,  4,   48,  49,  50,  51,  52, 53,  54,  55,  56,  57,  58,  59,  60,  4,
     61,  4,   62,  63,  64,  65,  66,  4,   4,   4,  67,  4,   4,   4,   4,   68,  69,  70,  71,
     72,  73,  74,  75,  76,  77,  78,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 79,  80,  4,   81,  82,  83,  84,  85,  60,
     60,  60,  60,  60,  60,  60,  60,  86,  42,  87, 88,  89,  4,   90,  91,  60,  60,  60,  60,
     60,  60,  60,  60,  92,  60,  93,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  94,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  95,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  96,  97,  98,  99,  95,  100,
     60,  60,  60,  60,  60,  60,  101, 102, 60,  60, 60,  60,  60,  60,  60,  103, 60,  104, 60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 105, 60,  60,  60,  60,  60,  60,  60,  106,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  107, 60,  108, 109, 60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  110, 60,  111, 60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  112, 60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  31,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  113, 60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  110, 60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  31,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  114, 60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  115, 60,  100,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  116, 117, 60,
     118, 60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  111, 4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   119, 120,
     4,   4,   4,   4,   121, 122, 4,   123, 124, 4,  125, 126, 127, 62,  4,   128, 129, 130, 4,
     131, 132, 133, 4,   134, 135, 136, 4,   137, 4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,
     4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,   138, 139, 60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  60,  60,  60,  60,  60,  60,
     60,  60,  60,  60,  60,  60,  60,  60,  60,  60, 60,  60,  60,  4,   4,   4,   4,   4,   129,
     4,   140, 141, 142, 123, 143, 4,   144, 4,   4,  145, 146, 147, 148, 149, 150, 4,   151, 152,
     153, 154, 155},
    {0x00003fffffffffff, 0x000007ff0fffffff, 0x3fdfffff00000000, 0xfffffffbfff80000,
     0xffffffffffffffff, 0xfffeffcfffffffff, 0xf3c5fdfffff99fef, 0x5003ffcfb080799f,
     0xd36dfdfffff987ee, 0x003fffc05e023987, 0xf3edfdfffffbbfee, 0xfe00ffcf00013bbf,
     0xf3edfdfffff99fee, 0x0002ffcfb0c0399f, 0xc3ffc718d63dc7ec, 0x0000ffc000813dc7,
     0xe3fffdfffffddfff, 0x0000ffcf07603ddf, 0xf3effdfffffddfef, 0x0006ffcf40603ddf,
     0xfffffffffffddfef, 0xfc00ffcf80f07ddf, 0x2ffbfffffc7fffec, 0x000cffc0ff5f847f,
     0x07fffffffffffffe, 0x0000000003ff7fff, 0x3fffffaffffff7d6, 0x00000000f3ff3f5f,
     0xc2a003ff03000001, 0xfffe1ffffffffeff, 0x1ffffffffeffffdf, 0x0000000000000040,
     0xffffffffffff03ff, 0xffffffff3fffffff, 0xf7ffffffffff20bf, 0xffffffff3d7f3dff,
     0x7f3dffffffff3dff, 0xffffffffff7fff3d, 0xffffffffff3dffff, 0x0003fe00e7ffffff,
     0xffffffff0000ffff, 0x3f3fffffffffffff, 0xfffffffffffffffe, 0xffff9fffffffffff,
     0xffffffff07fffffe, 0x01ffc7ffffffffff, 0x001fffff001fdfff, 0x000ddfff000fffff,
     0x000003ff308fffff, 0xffffffff03ff3800, 0x01ffffffffffffff, 0xffff07ffffffffff,
     0x003fffffffffffff, 0x0fff0fff7fffffff, 0x001f3fffffffffc0, 0xffff0fffffffffff,
     0x0000000007ff03ff, 0xffffffff0fffffff, 0x9fffffff7fffffff, 0x3fff008003ff03ff,
     0x0000000000000000, 0x000ff80003ff0fff, 0x000fffffffffffff, 0x00ffffffffffffff,
     0x3fffffffffffe3ff, 0xe7ffffffffff01ff, 0x07fffffffff70000, 0xfbffffffffffffff,
     0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0x5fdfffffffffffff, 0x1fdc1fff0fcf1fdc,
     0x8000000000000000, 0x8002000000100001, 0x000000001fff0000, 0x0001ffe21fff0000,
     0xf3fffd503f2ffc84, 0xffffffff000043e0, 0x00000000000001ff, 0xffff7fffffffffff,
     0xffffffff7fffffff, 0x000ff81fffffffff, 0xffff20bfffffffff, 0x800080ffffffffff,
     0x7f7f7f7f007fffff, 0xffffffff7f7f7f7f, 0x1f3efffe000000e0, 0xfffffffee67fffff,
     0xf7ffffffffffffff, 0xfffeffffffffffe0, 0x07ffffff00007fff, 0xffff000000000000,
     0x0000000000000020, 0x0000000000000008, 0x0000040000000000, 0x0000000000002000,
     0x0000000000000389, 0x0000000020000000, 0x8000000000701000, 0x0000010080000001,
     0x0001000000000000, 0x0000000000000010, 0x00003e0000000040, 0x000000000000103e,
     0x000000000000001e, 0x0000000008000000, 0x0202000000000000, 0x0400000000000000,
     0xc000000000000000, 0x000000000001f000, 0x4000000000000000, 0x0000000000001000,
     0x0000000000040000, 0x0000000000400000, 0x0000100000000000, 0x0008400000000000,
     0x0000000200000000, 0x0100000000001040, 0x0040000000000000, 0x0000000000001fff,
     0x3fffffffffff0000, 0x00000fffffff1fff, 0xbff0ffffffffffff, 0x0003ffffffffffff,
     0xfffffffcff800000, 0xfffffffffffff9ff, 0xff8000000000007c, 0x000000ffffffffff,
     0xe8ffffff03ff003f, 0xffff3fffffffffff, 0x1fffffff000fffff, 0x7fffffff03ff8001,
     0x007fffffffffffff, 0xfc7fffff03ff3fff, 0x007cffff38000007, 0xffff7f7f007e7e7e,
     0xffff00fff7ffffff, 0x03ff37ffffffffff, 0xffff000fffffffff, 0x0ffffffffffff87f,
     0x0000000003ffffff, 0x5f7ffdffe0f8007f, 0xffffffffffffffdb, 0xfffffffffff80000,
     0xfffffff03fffffff, 0x3fffffffffffffff, 0xffffffffffff0000, 0xfffffffffffcffff,
     0x03ff0000000000ff, 0x0018ffff0000ffff, 0xaa8a00000000e000, 0x1fffffffffffffff,
     0x87fffffe03ff0000, 0xffffffc007fffffe, 0x7fffffffffffffff, 0x000000001cfcfcfc},
    {1, 2,  3, 4, 5,  6, 7, 8, 5, 5, 9, 5, 10, 11, 5, 12, 5, 13, 14, 5, 5, 15, 5, 5, 5, 5, 5, 5, 5,
     5, 16, 5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 17, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5},
    {1,   2,   3,  4,   5,  4,   6,  4,   4,   7,   8,   9,   10, 11, 12,  2,  2,  13, 14,  15,
     16,  4,   4,  2,   2,  2,   2,  17,  18,  4,   4,   19,  20, 21, 22,  23, 4,  24, 4,   25,
     26,  27,  28, 29,  30, 31,  4,  2,   32,  33,  33,  34,  4,  4,  4,   4,  4,  4,  4,   35,
     36,  4,   37, 2,   38, 3,   39, 40,  41,  2,   42,  43,  4,  44, 45,  46, 47, 4,  4,   2,
     48,  2,   49, 4,   4,  50,  51, 2,   52,  53,  54,  55,  4,  4,  4,   3,  4,  56, 57,  4,
     4,   58,  59, 60,  61, 62,  53, 4,   4,   4,   4,   63,  64, 65, 4,   66, 67, 68, 4,   4,
     4,   4,   37, 4,   4,  4,   4,  2,   2,   2,   2,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     2,   69,  4,  2,   70, 2,   2,  2,   71,  4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     2,   2,   2,  2,   2,  2,   2,  70,  4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     72,  4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   2,  2,  2,  2,   2,
     2,   2,   2,  53,  73, 4,   74, 17,  75,  76,  4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     2,   4,   4,  2,   77, 78,  79, 2,   2,   2,   2,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     2,   2,   2,  2,   2,  2,   2,  2,   2,   2,   2,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     2,   2,   2,  2,   2,  2,   2,  2,   2,   2,   2,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     2,   2,   2,  2,   2,  2,   2,  2,   2,   2,   2,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     2,   2,   2,  2,   2,  2,   2,  2,   2,   2,   2,   2,   2,  2,  2,   2,  2,  2,  2,   2,
     2,   2,   80, 2,   2,  2,   2,  2,   2,   2,   2,   2,   2,  2,  33,  4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   2,  2,  2,  2,   21,
     81,  2,   2,  2,   2,  2,   82, 4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  2,   83, 84,  4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   85, 86,  4,  4,   87,  4,   4,   4,   4,  4,  4,   2,  88, 89, 90,  91,
     92,  2,   2,  2,   2,  93,  94, 95,  96,  97,  98,  4,   4,  4,  4,   4,  4,  4,  4,   99,
     100, 101, 4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  102, 4,  4,   4,  103, 104, 4,   4,   4,   4,  4,  105, 4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   2,  2,  2,  106, 2,
     107, 4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   108,
     109, 110, 4,  4,   4,  4,   4,  111, 112, 4,   113, 114, 4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  115, 4,  116, 4,  4,   4,   4,   117, 118, 4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  119, 4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   120, 4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   121,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   122, 4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   2,  2,  2,  2,   2,
     2,   2,   2,  123, 4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   2,   2,  2,  124, 4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4,   4,   4,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,  4,   4,  4,   4,  4,   4,   4,   4},
    {0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,
     0x0000000000000000, 0x001fffffffffffff, 0x2000000000000000, 0xffffffff1fffffff,
     0x000000010001ffff, 0xffffe000ffffffff, 0x07ffffffffff07ff, 0xffffffff3fffffff,
     0x00000000003eff0f, 0xffff03ff3fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff,
     0x0000000fffffffff, 0x007fffffffffffff, 0x000000ff003fffff, 0x91bffffffffffd3f,
     0x007fffff003fffff, 0x000000007fffffff, 0x0037ffff00000000, 0x03ffffff003fffff,
     0xc0ffffffffffffff, 0x873ffffffeeff06f, 0x1fffffff00000000, 0x000000001fffffff,
     0x0000007ffffffeff, 0x003fffffffffffff, 0x0007ffff003fffff, 0x000000000003ffff,
     0x00000000000001ff, 0x0007ffffffffffff, 0x03ff00ffffffffff, 0xffff00801fffffff,
     0x000000000001ffff, 0x007fffff00000000, 0x8000ffc00000007f, 0x03ff01ffffff0000,
     0xffdfffffffffffff, 0x004fffffffff0070, 0x0000000017ff1e1f, 0x40fffffffffbffff,
     0xffff01ffbfffbd7f, 0x03ff07ffffffffff, 0xfbedfdfffff99fef, 0x001f1fcfe081399f,
     0x00000000c3ff07ff, 0x0000000003ff00bf, 0xff3fffffffffffff, 0x000000003f000001,
     0x0000000003ff0011, 0x01ffffffffffffff, 0x00000000000003ff, 0x03ff0fffe7ffffff,
     0xffffffff00000000, 0x800003ffffffffff, 0xfffffcff00000000, 0x0000001bfcffffff,
     0x7fffffffffffffff, 0xffffffffffff0080, 0x0000000023ffffff, 0xff7ffffffffffdff,
     0xfffc000003ff0001, 0x007ffefffffcffff, 0xb47ffffffffffb7f, 0xfffffdbf03ff00ff,
     0x000003ff01fb7fff, 0x0000000003ffffff, 0x00007fffffffffff, 0x000000000000000f,
     0x000000000000007f, 0x000003ff7fffffff, 0x001f3fffffff0000, 0xe0fffff803ff000f,
     0x000000000000ffff, 0xffffffffffff87ff, 0x00000000ffff80ff, 0x0000000b00000000,
     0x00ffffffffffffff, 0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff,
     0x0000000063ff01ff, 0xf807e3e000000000, 0x00003c0000000fe7, 0x000000000000001c,
     0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef, 0x7bffffffdfdfe7bf,
     0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xf7fffffff7fffffd, 0xffdfffffffdfffff,
     0xffff7fffffff7fff, 0xfffffdfffffffdff, 0xffffffffffffcff7, 0xf87fffffffffffff,
     0x00201fffffffffff, 0x0000fffef8000010, 0x000007dbf9ffff7f, 0x3fff1fffffffffff,
     0x00000000000043ff, 0x03ffffffffffffff, 0x00000000007f001f, 0x0000000003ff0fff,
     0x0af7fe96ffffffef, 0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x0000000000000003,
     0x0000001000000000, 0x0000000400000000, 0x0000000200000000, 0x0000040000000000,
     0x0000000010001008, 0x2000040000000000, 0x0000000002000000, 0x0000000000010000,
     0x0000000001000000, 0x0000000008000000, 0x0000200000000000, 0x000000003fffffff,
     0x0000ffffffffffff}};
static constexpr __bool_trie<32, 991, 1, 0, 161, 255, 1, 0, 1087, 1, 0, 115> __prop_xids_data{
    {0x0000000000000000, 0x07fffffe07fffffe, 0x0420040000000000, 0xff7fffffff7fffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0x0000501f0003ffc3,
     0x0000000000000000, 0xb8df000000000000, 0xfffffffbffffd740, 0xffbfffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xfffffffffffffc03, 0xffffffffffffffff,
     0xfffeffffffffffff, 0xffffffff027fffff, 0x00000000000001ff, 0x000787ffffff0000,
     0xffffffff00000000, 0xfffec000000007ff, 0xffffffffffffffff, 0x9c00c060002fffff,
     0x0000fffffffd0000, 0xffffffffffffe000, 0x0002003fffffffff, 0x043007fffffffc00},
    {1,   2,   3,   4,   5,   6,   7,   8,   9,   10, 11,  12,  13,  14,  15,  16,  17,  18,  19,
     20,  21,  22,  23,  24,  23,  25,  26,  27,  28, 29,  3,   30,  31,  32,  33,  34,  34,  34,
     34,  34,  35,  36,  37,  38,  39,  40,  41,  42, 34,  34,  34,  34,  34,  34,  34,  34,  43,
     44,  45,  46,  47,  48,  49,  50,  51,  52,  53, 54,  55,  56,  57,  58,  59,  60,  3,   61,
     62,  63,  64,  65,  66,  67,  68,  34,  34,  34, 3,   34,  34,  34,  34,  69,  70,  71,  72,
     3,   73,  74,  3,   75,  76,  77,  3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  78,  79,  34,  80,  81,  82,  83,  84,  3,
     3,   3,   3,   3,   3,   3,   3,   85,  42,  86, 87,  88,  34,  89,  90,  3,   3,   3,   3,
     3,   3,   3,   3,   91,  3,   92,  3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   93,  3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   94,  3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   95,  96,  97,  98,  94,  99,
     3,   3,   3,   3,   3,   3,   100, 101, 3,   3,  3,   3,   3,   3,   3,   102, 3,   103, 3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  104, 3,   3,   3,   3,   3,   3,   3,   105,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   106, 3,   107, 108, 3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   109, 3,   110, 3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   111, 3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   112, 3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   113, 3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   109, 3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   112, 3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   114, 3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   115, 3,   99,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   116, 117, 3,
     118, 3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   110, 34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  119, 120,
     34,  34,  34,  34,  121, 122, 123, 124, 125, 34, 126, 127, 128, 48,  129, 130, 131, 132, 133,
     134, 135, 136, 137, 138, 139, 140, 34,  141, 34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  34,  34,  34,  34,  34,  34,  34,
     34,  34,  34,  34,  34,  34,  34,  34,  34,  34, 34,  34,  142, 143, 3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   3,   3,   3,   3,   3,   3,
     3,   3,   3,   3,   3,   3,   3,   3,   3,   3,  3,   3,   3,   34,  34,  34,  34,  34,  144,
     34,  145, 146, 147, 148, 149, 34,  150, 34,  34, 151, 152, 153, 154, 3,   155, 34,  156, 157,
     158, 159, 160},
    {0x00000110043fffff, 0x000007ff01ffffff, 0x3fdfffff00000000, 0x0000000000000000,
     0x23fffffffffffff0, 0xfffe0003ff010000, 0x23c5fdfffff99fe1, 0x10030003b0004000,
     0x036dfdfffff987e0, 0x001c00005e000000, 0x23edfdfffffbbfe0, 0x0200000300010000,
     0x23edfdfffff99fe0, 0x00020003b0000000, 0x03ffc718d63dc7e8, 0x0000000000010000,
     0x23fffdfffffddfe0, 0x0000000307000000, 0x23effdfffffddfe1, 0x0006000340000000,
     0x27fffffffffddfe0, 0xfc00000380704000, 0x2ffbfffffc7fffe0, 0x000000000000007f,
     0x0005fffffffffffe, 0x2005ffaffffff7d6, 0x00000000f000005f, 0x0000000000000001,
     0x00001ffffffffeff, 0x0000000000001f00, 0x800007ffffffffff, 0xffe1c0623c3f0000,
     0xffffffff00004003, 0xf7ffffffffff20bf, 0xffffffffffffffff, 0xffffffff3d7f3dff,
     0x7f3dffffffff3dff, 0xffffffffff7fff3d, 0xffffffffff3dffff, 0x0000000007ffffff,
     0xffffffff0000ffff, 0x3f3fffffffffffff, 0xfffffffffffffffe, 0xffff9fffffffffff,
     0xffffffff07fffffe, 0x01ffc7ffffffffff, 0x0003ffff0003dfff, 0x0001dfff0003ffff,
     0x000fffffffffffff, 0x0000000010800000, 0xffffffff00000000, 0x01ffffffffffffff,
     0xffff05ffffffffff, 0x003fffffffffffff, 0x000000007fffffff, 0x001f3fffffff0000,
     0xffff0fffffffffff, 0x00000000000003ff, 0xffffffff007fffff, 0x00000000001fffff,
     0x0000008000000000, 0x000fffffffffffe0, 0x0000000000000fe0, 0xfc00c001fffffff8,
     0x0000003fffffffff, 0x0000000fffffffff, 0x3ffffffffc00e000, 0xe7ffffffffff01ff,
     0x046fde0000000000, 0xffffffff3f3fffff, 0x3fffffffaaff3f3f, 0x5fdfffffffffffff,
     0x1fdc1fff0fcf1fdc, 0x8002000000000000, 0x000000001fff0000, 0xf3fffd503f2ffc84,
     0xffffffff000043e0, 0x00000000000001ff, 0xffff7fffffffffff, 0xffffffff7fffffff,
     0x000c781fffffffff, 0xffff20bfffffffff, 0x000080ffffffffff, 0x7f7f7f7f007fffff,
     0x000000007f7f7f7f, 0x1f3e03fe000000e0, 0xfffffffee07fffff, 0xf7ffffffffffffff,
     0xfffeffffffffffe0, 0x07ffffff00007fff, 0xffff000000000000, 0x0000000000000020,
     0x0000000000000008, 0x0000040000000000, 0x0000000000002000, 0x0000000000000389,
     0x0000000020000000, 0x8000000000701000, 0x0000010080000001, 0x0001000000000000,
     0x0000000000000010, 0x00003e0000000040, 0x000000000000103e, 0x000000000000001e,
     0x0000000008000000, 0x0202000000000000, 0x0400000000000000, 0xc000000000000000,
     0x000000000001f000, 0x4000000000000000, 0x0000000000001000, 0x0000000000040000,
     0x0000000000000040, 0x0000000000400000, 0x0000100000000000, 0x0008400000000000,
     0x0000000200000000, 0x0100000000001040, 0x0040000000000000, 0x0000000000001fff,
     0x3fffffffffff0000, 0x00000c00ffff1fff, 0x80007fffffffffff, 0xffffffff3fffffff,
     0x0000ffffffffffff, 0xfffffffcff800000, 0xfffffffffffff9ff, 0xff8000000000007c,
     0x00000007fffff7bb, 0x000ffffffffffffc, 0x68fc000000000000, 0xffff003ffffffc00,
     0x1fffffff0000007f, 0x0007fffffffffff0, 0x7c00ffdf00008000, 0x000001ffffffffff,
     0xc47fffff00000ff7, 0x3e62ffffffffffff, 0x001c07ff38000005, 0xffff7f7f007e7e7e,
     0xffff00fff7ffffff, 0x00000007ffffffff, 0xffff000fffffffff, 0x0ffffffffffff87f,
     0xffff3fffffffffff, 0x0000000003ffffff, 0x5f7ffdffa0f8007f, 0xffffffffffffffdb,
     0x0003ffffffffffff, 0xfffffffffff80000, 0xfffffff03fffffff, 0x3fffffffffffffff,
     0xffffffffffff0000, 0xfffffffffffcffff, 0x03ff0000000000ff, 0xaa8a000000000000,
     0x1fffffffffffffff, 0x07fffffe00000000, 0xffffffc007fffffe, 0x7fffffff3fffffff,
     0x000000001cfcfcfc},
    {1, 2,  3, 4, 5, 6, 7, 8, 5, 5, 9, 5, 10, 11, 5, 12, 5, 13, 14, 5, 5, 15, 5, 5, 5, 5, 5, 5, 5,
     5, 16, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5, 5,  5, 5,  5,  5, 5, 5,  5},
    {1,  2,  3,   4,  5,   4,   4,  4,   4,   6,  7,  8,   9,   10,  11,  2,   2,  12, 13, 14, 15,
     4,  4,  2,   2,  2,   2,   16, 17,  4,   4,  18, 19,  20,  21,  22,  4,   23, 4,  24, 25, 26,
     27, 28, 29,  30, 4,   2,   31, 32,  32,  15, 4,  4,   4,   4,   4,   4,   4,  33, 34, 4,  35,
     36, 4,  37,  38, 39,  40,  41, 42,  43,  4,  44, 20,  45,  46,  4,   4,   5,  47, 48, 49, 4,
     4,  50, 51,  48, 52,  53,  4,  54,  4,   4,  4,  55,  4,   56,  57,  4,   4,  58, 59, 60, 61,
     62, 63, 4,   4,  4,   4,   64, 65,  66,  4,  67, 68,  69,  4,   4,   4,   4,  70, 4,  4,  4,
     4,  2,  2,   2,  2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   71,  4,  2,  50, 2,  2,
     2,  72, 4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  2,   2,  2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,  2,  50, 4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  2,  2,
     2,  2,  2,   2,  2,   2,   2,  73,  4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   2,  2,  2,  2,  2,
     2,  2,  2,   63, 20,  4,   74, 48,  75,  66, 4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  2,
     4,  4,  2,   76, 77,  78,  2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,  2,  2,  2,  2,
     2,  2,  2,   2,  2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,  2,  2,  2,  2,
     2,  2,  2,   2,  2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,  2,  2,  2,  2,
     2,  2,  2,   2,  2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,  2,  2,  2,  2,
     2,  2,  2,   2,  2,   2,   2,  2,   2,   2,  2,  2,   2,   2,   2,   2,   2,  79, 2,  2,  2,
     2,  2,  2,   2,  2,   2,   2,  2,   32,  4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   2,   2,  2,  2,   20,  80,  2,   2,   2,  2,  2,  81, 4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   2,   82,  83, 4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  2,   84,  85, 86,  87,  88, 2,  2,   2,   2,   89,  90,  91, 92, 93, 94, 4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   95,  96,  4,  4,  4,  4,  4,
     55, 4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     2,  2,  2,   97, 2,   98,  4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   99, 100, 101, 4,  4,   4,   4,  4,  102, 103, 4,   104, 105, 4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   106, 4,  107, 4,   4,  4,  4,   108, 109, 4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   110, 4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   111, 4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   112, 4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  113, 4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   2,   2,  2,   2,   2,  2,  2,   2,   114, 4,   4,   4,  4,  4,  4,  4,
     4,  4,  4,   4,  4,   4,   4,  4,   4,   4,  4,  4,   4,   4,   4,   4},
    {0xb7ffff7fffffefff, 0x000000003fff3fff, 0xffffffffffffffff, 0x07ffffffffffffff,
     0x0000000000000000, 0x001fffffffffffff, 0xffffffff1fffffff, 0x000000000001ffff,
     0xffffe000ffffffff, 0x003fffffffff07ff, 0xffffffff3fffffff, 0x00000000003eff0f,
     0xffff00003fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff, 0x0000000fffffffff,
     0x007fffffffffffff, 0x000000ff003fffff, 0x91bffffffffffd3f, 0x007fffff003fffff,
     0x000000007fffffff, 0x0037ffff00000000, 0x03ffffff003fffff, 0xc0ffffffffffffff,
     0x003ffffffeef0001, 0x1fffffff00000000, 0x000000001fffffff, 0x0000001ffffffeff,
     0x003fffffffffffff, 0x0007ffff003fffff, 0x000000000003ffff, 0x00000000000001ff,
     0x0007ffffffffffff, 0xffff00801fffffff, 0x000000000000003f, 0x007fffff00000000,
     0x00fffffffffffff8, 0x0000fffffffffff8, 0x000001ffffff0000, 0x0000007ffffffff8,
     0x0047ffffffff0010, 0x0007fffffffffff8, 0x000000001400001e, 0x00000ffffffbffff,
     0xffff01ffbfffbd7f, 0x23edfdfffff99fe0, 0x00000003e0010000, 0x0000000080000780,
     0x0000ffffffffffff, 0x00000000000000b0, 0x00007fffffffffff, 0x000000000f000000,
     0x0000000000000010, 0x010007ffffffffff, 0x0000000007ffffff, 0x00000fffffffffff,
     0xffffffff00000000, 0x80000000ffffffff, 0xfffffcff00000000, 0x0000000a0001ffff,
     0x0407fffffffff801, 0xfffffffff0010000, 0x00000000200003ff, 0x01ffffffffffffff,
     0x00007ffffffffdff, 0xfffc000000000001, 0x000000000000ffff, 0x0001fffffffffb7f,
     0xfffffdbf00000040, 0x00000000010003ff, 0x0007ffff00000000, 0x0000000003ffffff,
     0x000000000000000f, 0x000000000000007f, 0x00003fffffff0000, 0xe0fffff80000000f,
     0x00000000000107ff, 0x00000000fff80000, 0x0000000b00000000, 0x00ffffffffffffff,
     0xffff00f000070000, 0x0fffffffffffffff, 0x1fff07ffffffffff, 0x0000000003ff01ff,
     0xffffffffffdfffff, 0xebffde64dfffffff, 0xffffffffffffffef, 0x7bffffffdfdfe7bf,
     0xfffffffffffdfc5f, 0xffffff3fffffffff, 0xf7fffffff7fffffd, 0xffdfffffffdfffff,
     0xffff7fffffff7fff, 0xfffffdfffffffdff, 0x0000000000000ff7, 0x3f801fffffffffff,
     0x0000000000004000, 0x000000000000001f, 0x000000000000080f, 0x0af7fe96ffffffef,
     0x5ef7f796aa96ea84, 0x0ffffbee0ffffbff, 0x0000000000000003, 0x0000001000000000,
     0x0000000400000000, 0x0000000200000000, 0x0000040000000000, 0x0000000010001008,
     0x2000040000000000, 0x0000000002000000, 0x0000000000010000, 0x0000000001000000,
     0x0000000008000000, 0x0000200000000000, 0x000000003fffffff}};
template<>
constexpr bool cp_is<property::ahex>(char32_t c) {
    return __prop_ahex_data.lookup(c);
}
template<>
constexpr bool cp_is<property::alpha>(char32_t c) {
    return __prop_alpha_data.lookup(c);
}
template<>
constexpr bool cp_is<property::bidi_c>(char32_t c) {
    return __prop_bidi_c_data.lookup(c);
}
template<>
constexpr bool cp_is<property::bidi_m>(char32_t c) {
    return __prop_bidi_m_data.lookup(c);
}
template<>
constexpr bool cp_is<property::dash>(char32_t c) {
    return __prop_dash_data.lookup(c);
}
template<>
constexpr bool cp_is<property::dep>(char32_t c) {
    return __prop_dep_data.lookup(c);
}
template<>
constexpr bool cp_is<property::dia>(char32_t c) {
    return __prop_dia_data.lookup(c);
}
template<>
constexpr bool cp_is<property::emoji>(char32_t c) {
    return __prop_emoji_data.lookup(c);
}
template<>
constexpr bool cp_is<property::emoji_component>(char32_t c) {
    return __prop_emoji_component_data.lookup(c);
}
template<>
constexpr bool cp_is<property::emoji_modifier>(char32_t c) {
    return __prop_emoji_modifier_data.lookup(c);
}
template<>
constexpr bool cp_is<property::emoji_modifier_base>(char32_t c) {
    return __prop_emoji_modifier_base_data.lookup(c);
}
template<>
constexpr bool cp_is<property::emoji_presentation>(char32_t c) {
    return __prop_emoji_presentation_data.lookup(c);
}
template<>
constexpr bool cp_is<property::ext>(char32_t c) {
    return __prop_ext_data.lookup(c);
}
template<>
constexpr bool cp_is<property::extended_pictographic>(char32_t c) {
    return __prop_extended_pictographic_data.lookup(c);
}
template<>
constexpr bool cp_is<property::gr_base>(char32_t c) {
    return __prop_gr_base_data.lookup(c);
}
template<>
constexpr bool cp_is<property::gr_ext>(char32_t c) {
    return __prop_gr_ext_data.lookup(c);
}
template<>
constexpr bool cp_is<property::hex>(char32_t c) {
    return __prop_hex_data.lookup(c);
}
template<>
constexpr bool cp_is<property::ideo>(char32_t c) {
    return __prop_ideo_data.lookup(c);
}
template<>
constexpr bool cp_is<property::idsb>(char32_t c) {
    return __prop_idsb_data.lookup(c);
}
template<>
constexpr bool cp_is<property::idst>(char32_t c) {
    return __prop_idst_data.lookup(c);
}
template<>
constexpr bool cp_is<property::join_c>(char32_t c) {
    return __prop_join_c_data.lookup(c);
}
template<>
constexpr bool cp_is<property::loe>(char32_t c) {
    return __prop_loe_data.lookup(c);
}
template<>
constexpr bool cp_is<property::pat_syn>(char32_t c) {
    return __prop_pat_syn_data.lookup(c);
}
template<>
constexpr bool cp_is<property::pat_ws>(char32_t c) {
    return __prop_pat_ws_data.lookup(c);
}
template<>
constexpr bool cp_is<property::pcm>(char32_t c) {
    return __prop_pcm_data.lookup(c);
}
template<>
constexpr bool cp_is<property::qmark>(char32_t c) {
    return __prop_qmark_data.lookup(c);
}
template<>
constexpr bool cp_is<property::radical>(char32_t c) {
    return __prop_radical_data.lookup(c);
}
template<>
constexpr bool cp_is<property::ri>(char32_t c) {
    return __prop_ri_data.lookup(c);
}
template<>
constexpr bool cp_is<property::sd>(char32_t c) {
    return __prop_sd_data.lookup(c);
}
template<>
constexpr bool cp_is<property::sterm>(char32_t c) {
    return __prop_sterm_data.lookup(c);
}
template<>
constexpr bool cp_is<property::term>(char32_t c) {
    return __prop_term_data.lookup(c);
}
template<>
constexpr bool cp_is<property::uideo>(char32_t c) {
    return __prop_uideo_data.lookup(c);
}
template<>
constexpr bool cp_is<property::vs>(char32_t c) {
    return __prop_vs_data.lookup(c);
}
template<>
constexpr bool cp_is<property::wspace>(char32_t c) {
    return __prop_wspace_data.lookup(c);
}
template<>
constexpr bool cp_is<property::xidc>(char32_t c) {
    return __prop_xidc_data.lookup(c);
}
template<>
constexpr bool cp_is<property::xids>(char32_t c) {
    return __prop_xids_data.lookup(c);
}
static constexpr __bool_trie<32, 991, 1, 0, 128, 255, 1, 0, 1215, 1, 0, 137> __prop_assigned{
    {0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xfcffffffffffffff, 0xfffffffffffffff0, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xfffffffffe7fffff, 0xffffffffffffe7ff, 0x001f87ffffff00ff,
     0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff, 0xffffffffffffffff,
     0xffffffffffffffff, 0xffffffffffffe7ff, 0x0003ffffffffffff, 0xe7ffffffffffffff},
    {1,   2,   3,   4,  4,   5,   6,   7,   8,   9,   10,  11,  12,  13, 14,  15, 16, 9,  17,  4,
     18,  19,  20,  21, 22,  23,  24,  4,   25,  4,   26,  4,   4,   4,  27,  4,  4,  4,  4,   4,
     28,  29,  30,  31, 32,  33,  34,  4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  35, 36,  37,
     38,  4,   39,  33, 36,  40,  41,  42,  43,  44,  45,  46,  47,  48, 49,  4,  50, 4,  51,  52,
     53,  54,  55,  4,  4,   4,   4,   4,   4,   4,   4,   56,  57,  4,  58,  4,  59, 35, 60,  4,
     4,   61,  4,   4,  4,   4,   4,   4,   4,   4,   4,   62,  63,  4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     64,  31,  4,   4,  4,   4,   65,  66,  67,  68,  4,   4,   69,  4,  70,  4,  4,  4,  71,  4,
     4,   72,  4,   73, 4,   74,  75,  4,   4,   4,   4,   4,   4,   4,  4,   76, 49, 77, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  78,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 79,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 4,   80,
     81,  82,  83,  79, 84,  49,  49,  49,  49,  49,  49,  85,  86,  49, 49,  49, 49, 49, 49,  49,
     87,  49,  88,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 89,  49, 49, 49, 49,  49,
     49,  49,  90,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 91,  49,  92,  93,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  94,  49, 95,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  96,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  97,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  98,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     94,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  97,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  99, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  100, 49,  84,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  101, 102, 49,  103, 49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  95,  4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   104, 105, 4,   4,   4,   4,   106, 4,   4,  107, 4,  4,  4,  108, 109,
     107, 4,   110, 4,  111, 4,   112, 113, 114, 4,   115, 116, 117, 4,  118, 4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   4,   4,   4,   4,   4,  4,   4,  4,  4,  4,   4,
     4,   4,   4,   4,  4,   4,   4,   4,   4,   75,  119, 49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  49, 49,  49,  49,  49,  49,  49,  49,  49,  49,  49, 49,  49, 49, 49, 49,  49,
     49,  49,  49,  4,  4,   4,   4,   4,   0,   4,   120, 121, 4,   4,  122, 4,  4,  4,  4,   4,
     123, 124, 125, 33, 44,  4,   47,  4,   4,   126, 127},
    {0xffff3fffffffffff, 0x000007ffcfffffff, 0x3fffffff00000000, 0xfffffffffff80000,
     0xffffffffffffffff, 0xf3c7fffffff99fff, 0xffffffcff080799f, 0xf3fffffffff987ff,
     0x007fffc07e023987, 0xf3ffffffffffffff, 0xfe03ffcf00013fff, 0xf3fffffffff99fff,
     0x00ffffcff0c0399f, 0xc3ffc718fe3fc7fc, 0x07ffffc000813fc7, 0xe3ffffffffffffff,
     0xff80ffcf07e03fff, 0x0007ffcfc0603fff, 0xffffffcffff0ffff, 0x3ffffffffc7ffffc,
     0x001cffc0ffff847f, 0x87ffffffffffffff, 0x000000000fffffff, 0x3fffffffffffffff,
     0x00000000f3ff3fff, 0xfffe1fffffffffff, 0x0000000007ffffff, 0xffffffffffff20ff,
     0xffffffff3fff3fff, 0xff3fffffffff3fff, 0xffffffffffffff3f, 0xffffffffff3fffff,
     0x1fffffffe7ffffff, 0xffffffff03ffffff, 0x3f3fffffffffffff, 0xffffffff1fffffff,
     0x01ffffffffffffff, 0x007fffff001fffff, 0x000fffff000fffff, 0x03ff03ff3fffffff,
     0xffff07ffffffffff, 0x003fffffffffffff, 0x0fff0fffffffffff, 0x001f3ffffffffff1,
     0xffff0fffffffffff, 0xffffffffc7ff03ff, 0xffffffffcfffffff, 0x9fffffffffffffff,
     0x7fff3fff03ff03ff, 0x0000000000000000, 0x1fffffffffff0fff, 0xf00fffffffffffff,
     0xf8ffffffffffffff, 0xffffffffffffe3ff, 0xe7ffffffffff01ff, 0x07ffffffffff00ff,
     0xffffffff3f3fffff, 0x3fffffffffff3f3f, 0xfffcffffffcfffff, 0xfff3ffffffffffff,
     0x0001ffffffff0000, 0xffffffffffff0fff, 0x0000007fffffffff, 0xffffffff000007ff,
     0xffcfffffffffffff, 0xfe0fffffffffffff, 0xffff20ffffffffff, 0x800180ffffffffff,
     0xffffffff007fffff, 0x000000000000ffff, 0x000fffffffffffff, 0x0fff0000003fffff,
     0xfffffffffe7fffff, 0xffffffffffffffe0, 0x07ffffffffffffff, 0xffff000fffffffff,
     0x0000000000000020, 0x0000000000000008, 0x0000040000000000, 0x0000000000002000,
     0x0000000000000389, 0x0000000020000000, 0x8000000000701000, 0x0000010080000001,
     0x0001000000000000, 0x0000000000000010, 0x00003e0000000040, 0x000000000000103e,
     0x000000000000001e, 0x0000000008000000, 0x0202000000000000, 0x0400000000000000,
     0xc000000000000000, 0x000000000001f000, 0x4000000000000000, 0x0000000000001000,
     0x0000000000040000, 0x0000000000000040, 0x0000000000400000, 0x0000100000000000,
     0x0008400000000000, 0x0000000200000000, 0x0100000000001040, 0x0040000000000000,
     0xffffffffffff1fff, 0xffffffffffff007f, 0x00000fffffffffff, 0x00ffffffffffffff,
     0xff8000000000007c, 0x03ff0fffffffffff, 0xffffffff03ffc03f, 0x1fffffff800fffff,
     0xffffffffc3ffffff, 0x007fffffffffffff, 0xfffffffff3ff3fff, 0x007ffffff8000007,
     0xffffffff007e7e7f, 0xffff00ffffffffff, 0x03ff3fffffffffff, 0x0ffffffffffff87f,
     0x0000000003ffffff, 0xffffffffe0f8007f, 0xfffffffffff80003, 0xffffffffffff0000,
     0xfffffffffffcffff, 0x3fff0000000000ff, 0x7fffffffffffffff, 0x3e00ffff1cfcfcfc},
    {1, 2,  3, 4, 5,  6, 7, 8, 5, 5, 9, 5, 10, 11, 12, 13, 5, 14, 15, 5, 5, 16, 5, 5, 5, 5, 5, 5, 5,
     5, 17, 5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 18, 5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5,
     5, 5,  5, 5, 5,  5, 5, 5, 5, 5, 5, 5, 5,  5,  5,  5,  5, 5,  5,  5, 5, 5,  5},
    {1,   0,   2,   3,   0,  4,   5,  6,   6,   7,   8,  9,   10,  0,   11,  0,   0,   12, 13,  14,
     15,  6,   6,   0,   0,  0,   0,  16,  17,  6,   6,  18,  0,   19,  20,  21,  6,   22, 23,  24,
     25,  26,  27,  28,  29, 30,  6,  0,   31,  32,  33, 34,  6,   6,   6,   6,   35,  6,  6,   14,
     36,  6,   37,  0,   38, 0,   39, 0,   40,  0,   41, 42,  6,   43,  44,  45,  46,  6,  6,   0,
     26,  0,   47,  6,   6,  48,  49, 0,   50,  51,  52, 53,  6,   6,   6,   54,  6,   35, 55,  6,
     6,   56,  57,  0,   58, 59,  51, 6,   6,   6,   6,  0,   60,  61,  6,   62,  63,  64, 6,   6,
     6,   6,   65,  6,   6,  6,   66, 0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   36,  6,   0,   67, 0,   0,  0,   68,  6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   0,   0,   0,   0,  0,   0,  51,  6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     69,  6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   0,   0,   0,  0,   0,
     0,   0,   0,   51,  70, 6,   71, 0,   72,  73,  6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     0,   74,  6,   0,   75, 76,  77, 0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   0,   0,   0,   0,  0,   0,  0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   0,   0,   0,   0,  0,   0,  0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   0,   0,   0,   0,  0,   0,  0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   0,   0,   0,   0,  0,   0,  0,   0,   0,   0,  0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   0,   78,  0,   0,  0,   0,  0,   0,   0,   0,  0,   0,   0,   32,  6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   0,   0,   0,  0,   79,
     80,  0,   0,   0,   0,  0,   54, 6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   0,   81, 82,  6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   0,
     0,   0,   83,  84,  0,  0,   85, 0,   86,  6,   87, 0,   88,  6,   6,   0,   0,   89, 0,   90,
     91,  0,   0,   0,   0,  92,  0,  0,   0,   0,   93, 0,   0,   0,   0,   0,   0,   0,  0,   0,
     0,   94,  6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   95,  6,  6,   6,  96,  97,  6,   6,  6,   6,   6,   98,  6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   0,   0,   0,  99,  0,
     100, 6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   101, 67,  6,   102, 6,   6,  6,   103,
     104, 105, 106, 6,   6,  6,   6,  107, 0,   108, 83, 109, 110, 111, 112, 113, 114, 6,  6,   0,
     0,   0,   0,   0,   0,  0,   0,  0,   0,   0,   0,  0,   0,   0,   115, 0,   116, 0,  117, 118,
     63,  119, 6,   0,   62, 120, 90, 0,   121, 122, 6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  123, 124, 6,   125, 126, 6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  127, 6,   128, 6,  6,   6,   6,   129, 130, 6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   131, 6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   132, 6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   133, 6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   134, 6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   0,
     0,   0,   0,   0,   0,  0,   0,  49,  6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  135, 0,   6,   6,   0,   0,   0,  136, 6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6,   6,   6,   6,  6,   6,
     6,   6,   6,   6,   6,  6,   6,  6,   6,   6,   6,  6,   6,   6,   6},
    {0xffffffffffffffff, 0x000000003fff3fff, 0x07ffffffffffffff, 0xff8fffffffffff87,
     0x000000010fffffff, 0x3fffffffffff0000, 0x0000000000000000, 0xffffffff1fffffff,
     0x0fffffff0001ffff, 0xffffe00fffffffff, 0x07ffffffffff07ff, 0x00000000003fff0f,
     0xffff03ff3fffffff, 0x0fffffffff0fffff, 0xffff00ffffffffff, 0x0000800fffffffff,
     0x007fffffffffffff, 0x000000ff003fffff, 0x91ffffffffffff3f, 0x0000ff807fffffff,
     0xf83fffff00000000, 0x83ffffff8fffffff, 0xf0ffffffffffffff, 0xfffffffffffcffff,
     0x873ffffffffff07f, 0xffffffff01ff01ff, 0x00000000ffffffff, 0x007ff87fffffffff,
     0xfe3fffffffffffff, 0xff07ffffff3fffff, 0x0000fe001e03ffff, 0x00000000000001ff,
     0x0007ffffffffffff, 0xfc07ffffffffffff, 0x03ff00ffffffffff, 0xffffffff00000000,
     0x0000000003ffffff, 0x007fffff00000000, 0x8000fffffffc3fff, 0x03ff01ffffff2003,
     0x007fffffffff007f, 0x001fffffffff3fff, 0x7fffffffffffffff, 0xffff03ffffffffff,
     0x03ff07ffffffffff, 0xfffffffffff99fff, 0x001f1fcfe081399f, 0x0000000003ff00ff,
     0xff3fffffffffffff, 0x000000003fffffff, 0x00001fff03ff001f, 0x01ffffffffffffff,
     0x00000000000003ff, 0xffff0fffe7ffffff, 0x0fffffffffffffff, 0x8007ffffffffffff,
     0xfffffcff00000000, 0x0000001ffcffffff, 0xffffffffffff00ff, 0x00000007ffffffff,
     0xffff1fffffff003f, 0x007ffffffffcffff, 0xfc7fffffffffffff, 0xffffffff03ff00ff,
     0x000003ff01ffffff, 0x01ffffff00000000, 0x8003ffffffffffff, 0x001fffffffffffff,
     0x000000000000000f, 0x000000000000007f, 0x0000c3ffffffffff, 0x003f3fffffff0000,
     0xe0ffffffffff003f, 0x000000000000ffff, 0x0000000007ffffff, 0xffffffffffff87ff,
     0x00000000ffff80ff, 0x0000000f00000000, 0x00ffffffffffffff, 0x000000007fffffff,
     0xffff00f000070000, 0x1fff07ffffffffff, 0x0000000ff3ff01ff, 0x003fffffffffffff,
     0xfffffe7fffffffff, 0x000001ffffffffff, 0x000000000000003f, 0x000fffff00000000,
     0x01ffffff007fffff, 0xfffffe64ffffffff, 0xffffffffffffe7ff, 0xfffffffffffffc7f,
     0xffffff3fffffffff, 0xffffffffffffcfff, 0x0000fffff8000fff, 0x000007fff9ffffff,
     0x3fff1fffffffffff, 0x000000000000c3ff, 0x83ffffffffffffff, 0x00000000007fff9f,
     0x00000000c3ff0fff, 0xffff000000000000, 0x3fffffffffffffff, 0x0fffff9fffffffff,
     0xffffff9fff9fff84, 0x0ffffffe0fffffff, 0x0003000000000000, 0xffff0fffffffffff,
     0xfffe7fff000fffff, 0xffffffffffff1fff, 0xffff1fffffffffff, 0x00001fffffffffff,
     0xffffffc000000000, 0x0fffffffffff0007, 0x0000003f000301ff, 0x07ff1fff003fffff,
     0x000fffffffffffff, 0x00000fff01ffffff, 0xffffffffffff0fff, 0x00003fffffff00ff,
     0xffffc7e7ffffffff, 0x070f3fff000fffff, 0x00000000003f0007, 0x0000000000000003,
     0x0000001000000000, 0x0000000400000000, 0x0000000200000000, 0x0000040000000000,
     0x0000000010001008, 0x2000040000000000, 0x0000000002000000, 0x0000000000010000,
     0x0000000001000000, 0x0000000008000000, 0x0000200000000000, 0xffffffff00000003,
     0x0000ffffffffffff}};
}    // namespace uni
#ifndef UNI_SINGLE_HEADER
#    pragma once
#    include "props.h"
#endif
#include <cstring>
#include <string_view>
#include <optional>
#include <ratio>
#include <cmath>

namespace uni {

enum class property;


template<uni::version v>
constexpr category cp_category(char32_t cp) {
    static_assert(v >= uni::version::minimum_version,
                  "This version of the Unicode Database is not supported");
    if constexpr(v != uni::version::latest_version) {
        if(cp_age(cp) > v)
            return category::cn;
    }
    if(cp > 0x10FFFF)
        return category::unassigned;
    return __get_category<uni::version::latest_version>(cp);
}

constexpr uni::version __age_from_string(std::string_view a) {
    for(auto i = 0; i < __age_strings.size(); ++i) {
        const auto res = __pronamecomp(a, __age_strings[i]);
        if(res == 0)
            return uni::version(i);
    }
    return uni::version::unassigned;
}

constexpr category __category_from_string(const std::string_view s) {
    for(auto i = 0; i < __categories_names.size(); ++i) {
        const auto& c = __categories_names[i];
        const auto res = __pronamecomp(s, c.name);
        if(res == 0)
            return category(c.value);
    }
    return category::unassigned;
}

constexpr block __block_from_string(const std::string_view s) {
    for(auto i = 0; i < __blocks_names.size(); ++i) {
        const auto& c = __blocks_names[i];
        const auto res = __pronamecomp(s, c.name);
        if(res == 0)
            return block(c.value);
    }
    return block::no_block;
}

constexpr script __script_from_string(const std::string_view s) {
    for(auto i = 0; i < __scripts_names.size(); ++i) {
        const auto& c = __scripts_names[i];
        const auto res = __pronamecomp(s, c.name);
        if(res == 0)
            return script(c.value);
    }
    return script::unknown;
}

template<uni::version v = uni::version::standard_unicode_version>
constexpr script cp_script(char32_t cp) {
    static_assert(v >= uni::version::minimum_version,
                  "This version of the Unicode Database is not supported");
    if constexpr(v != uni::version::latest_version) {
        if(cp_age(cp) > v)
            return script::zzzz;
    }
    return __cp_script<0, v>(cp);
}

template<uni::version v = uni::version::standard_unicode_version>
struct script_extensions_view {
    script_extensions_view(char32_t c) : c(c){};

    struct sentinel {};
    struct iterator {
        iterator(char32_t c) : m_c(c), m_script(__get_cp_script<v>(m_c, idx)) {
            if(m_script == script::unknown)
                m_script = __cp_script<0, v>(m_c);
        }
        script operator*() const {
            return m_script;
        };

        void operator++() {
            idx++;
            m_script = __get_cp_script<v>(m_c, idx);
        }

        bool operator==(sentinel s) const {
            return m_script == script::unknown;
        };
        bool operator!=(sentinel s) const {
            return m_script != script::unknown;
        };
        bool operator==(iterator it) const {
            return m_script == it.m_script && m_c == it.m_c;
        };
        bool operator!=(iterator it) const {
            return !(*this == it);
        };

    private:
        char32_t m_c;
        script m_script;
        int idx = 1;
    };

    iterator begin() const {
        return iterator{c};
    }

private:
    char32_t c;
};

template<uni::version v = uni::version::standard_unicode_version>
constexpr auto cp_script_extensions(char32_t cp) {
    static_assert(v >= uni::version::minimum_version,
                  "This version of the Unicode Database is not supported");
    if constexpr(v != uni::version::latest_version) {
        if(cp_age(cp) > v)
            return script::zzzz;
    }
    return script_extensions_view<v>(cp);
}


constexpr version cp_age(char32_t cp) {
    auto it = uni::upper_bound(__age_data.begin(), __age_data.end(), cp,
                               [](char32_t cp, const __age_data_t& a) { return cp < a.first; });
    if(it == __age_data.begin())
        return version::unassigned;
    it = it - 1;
    return it->a;
}

constexpr block cp_block(char32_t cp) {
    if(cp > 0x10FFFF)
        return block::no_block;
    auto it = uni::upper_bound(__block_data.begin(), __block_data.end(), cp,
                               [](char32_t cp, const __block_data_t& b) { return cp < b.first; });
    if(it == __block_data.begin())
        return block::no_block;
    it--;
    return it->b;
}

template<>
constexpr bool cp_is<property::noncharacter_code_point>(char32_t cp) {
    return (char32_t(cp) & 0xfffe) == 0xfffe || (char32_t(cp) >= 0xfdd0 && char32_t(cp) <= 0xfdef);
}

// http://unicode.org/reports/tr44/#Lowercase
template<>
constexpr bool cp_is<property::lowercase>(char32_t cp) {
    return uni::__cat_ll.lookup(char32_t(cp)) || uni::__prop_olower_data.lookup(char32_t(cp));
}

// http://unicode.org/reports/tr44/#Uppercase
template<>
constexpr bool cp_is<property::uppercase>(char32_t cp) {
    return uni::__cat_lu.lookup(char32_t(cp)) || uni::__prop_oupper_data.lookup(char32_t(cp));
}

// http://unicode.org/reports/tr44/#Cased
template<>
constexpr bool cp_is<property::cased>(char32_t cp) {
    return cp_is<property::lower>(cp) || cp_is<property::upper>(cp) ||
           uni::__cat_lt.lookup(char32_t(cp));
}

constexpr bool cp_is_valid(char32_t cp) {
    return char32_t(cp) <= 0x10FFFF;
}
constexpr bool cp_is_assigned(char32_t cp) {
    return uni::__prop_assigned.lookup(char32_t(cp));
}

constexpr bool cp_is_ascii(char32_t cp) {
    return char32_t(cp) <= 0x7F;
}

template<>
constexpr bool cp_is<property::default_ignorable_code_point>(char32_t cp) {
    const auto c = char32_t(cp);
    const bool maybe = uni::__prop_odi_data.lookup(cp) || uni::__cat_cf.lookup(cp) ||
                       uni::__prop_vs_data.lookup(cp);
    if(!maybe)
        return false;
    // ignore (Interlinear annotation format characters
    if(c >= 0xFFF9 && c <= 0xFFFB) {
        return false;
    }
    // Ignore Egyptian hieroglyph format characters
    else if(c >= 0x13430 && c <= 0x13438) {
        return false;
    } else if(uni::__prop_wspace_data.lookup(cp))
        return false;
    else if(uni::__prop_pcm_data.lookup(cp))
        return false;
    return true;
}

// http://www.unicode.org/reports/tr31/#D1
template<>
constexpr bool cp_is<property::id_start>(char32_t cp) {
    const bool maybe =
        cp_is<category::letter>(cp) || __cat_nl.lookup(cp) || __prop_oids_data.lookup(cp);
    if(!maybe)
        return false;
    return !__prop_pat_syn_data.lookup(cp) && !__prop_pat_ws_data.lookup(cp);
}

template<>
constexpr bool cp_is<property::id_continue>(char32_t cp) {
    const bool maybe = cp_is<category::letter>(cp) || __cat_nl.lookup(cp) ||
                       __prop_oids_data.lookup(cp) || __cat_mn.lookup(cp) || __cat_mc.lookup(cp) ||
                       __cat_nd.lookup(cp) || __cat_pc.lookup(cp) || __prop_oidc_data.lookup(cp);
    if(!maybe)
        return false;
    return !__prop_pat_syn_data.lookup(cp) && !__prop_pat_ws_data.lookup(cp);
}

template<typename Array, typename Res = long long>
constexpr bool _get_numeric_value(char32_t cp, const Array& array, Res& res) {
    auto it = uni::lower_bound(array.begin(), array.end(), cp,
                               [](const auto& d, char32_t cp) { return d.first < cp; });
    if(it == array.end() || it->first != cp)
        return false;
    res = it->second;
    return true;
}

constexpr numeric_value cp_numeric_value(char32_t cp) {
    long long res = 0;
    if(!(_get_numeric_value(cp, __numeric_data64, res) ||
         _get_numeric_value(cp, __numeric_data32, res) ||
         _get_numeric_value(cp, __numeric_data16, res) ||
         _get_numeric_value(cp, __numeric_data8, res))) {
        return {};
    }
    uint16_t d = 1;
    _get_numeric_value(cp, __numeric_data_d, d);
    return numeric_value(res, d);
}

}    // namespace uni


static_assert(uni::cp_script('C') == uni::script::latin);
static_assert(uni::cp_block(U'🎉') == uni::block::misc_pictographs);
static_assert(!uni::cp_is<uni::property::xid_start>('1'));
static_assert(uni::cp_is<uni::property::xid_continue>('1'));
static_assert(uni::cp_age(U'🤩') == uni::version::v10_0);
static_assert(uni::cp_is<uni::property::alphabetic>(U'ß'));